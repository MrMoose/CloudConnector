// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/storage/v2/storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fstorage_2fv2_2fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fstorage_2fv2_2fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fstorage_2fv2_2fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fstorage_2fv2_2fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(int index);
namespace google {
namespace storage {
namespace v2 {
class Bucket;
struct BucketDefaultTypeInternal;
extern BucketDefaultTypeInternal _Bucket_default_instance_;
class BucketAccessControl;
struct BucketAccessControlDefaultTypeInternal;
extern BucketAccessControlDefaultTypeInternal _BucketAccessControl_default_instance_;
class Bucket_Billing;
struct Bucket_BillingDefaultTypeInternal;
extern Bucket_BillingDefaultTypeInternal _Bucket_Billing_default_instance_;
class Bucket_Cors;
struct Bucket_CorsDefaultTypeInternal;
extern Bucket_CorsDefaultTypeInternal _Bucket_Cors_default_instance_;
class Bucket_Encryption;
struct Bucket_EncryptionDefaultTypeInternal;
extern Bucket_EncryptionDefaultTypeInternal _Bucket_Encryption_default_instance_;
class Bucket_IamConfig;
struct Bucket_IamConfigDefaultTypeInternal;
extern Bucket_IamConfigDefaultTypeInternal _Bucket_IamConfig_default_instance_;
class Bucket_IamConfig_UniformBucketLevelAccess;
struct Bucket_IamConfig_UniformBucketLevelAccessDefaultTypeInternal;
extern Bucket_IamConfig_UniformBucketLevelAccessDefaultTypeInternal _Bucket_IamConfig_UniformBucketLevelAccess_default_instance_;
class Bucket_LabelsEntry_DoNotUse;
struct Bucket_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Bucket_LabelsEntry_DoNotUseDefaultTypeInternal _Bucket_LabelsEntry_DoNotUse_default_instance_;
class Bucket_Lifecycle;
struct Bucket_LifecycleDefaultTypeInternal;
extern Bucket_LifecycleDefaultTypeInternal _Bucket_Lifecycle_default_instance_;
class Bucket_Lifecycle_Rule;
struct Bucket_Lifecycle_RuleDefaultTypeInternal;
extern Bucket_Lifecycle_RuleDefaultTypeInternal _Bucket_Lifecycle_Rule_default_instance_;
class Bucket_Lifecycle_Rule_Action;
struct Bucket_Lifecycle_Rule_ActionDefaultTypeInternal;
extern Bucket_Lifecycle_Rule_ActionDefaultTypeInternal _Bucket_Lifecycle_Rule_Action_default_instance_;
class Bucket_Lifecycle_Rule_Condition;
struct Bucket_Lifecycle_Rule_ConditionDefaultTypeInternal;
extern Bucket_Lifecycle_Rule_ConditionDefaultTypeInternal _Bucket_Lifecycle_Rule_Condition_default_instance_;
class Bucket_Logging;
struct Bucket_LoggingDefaultTypeInternal;
extern Bucket_LoggingDefaultTypeInternal _Bucket_Logging_default_instance_;
class Bucket_RetentionPolicy;
struct Bucket_RetentionPolicyDefaultTypeInternal;
extern Bucket_RetentionPolicyDefaultTypeInternal _Bucket_RetentionPolicy_default_instance_;
class Bucket_Versioning;
struct Bucket_VersioningDefaultTypeInternal;
extern Bucket_VersioningDefaultTypeInternal _Bucket_Versioning_default_instance_;
class Bucket_Website;
struct Bucket_WebsiteDefaultTypeInternal;
extern Bucket_WebsiteDefaultTypeInternal _Bucket_Website_default_instance_;
class ChecksummedData;
struct ChecksummedDataDefaultTypeInternal;
extern ChecksummedDataDefaultTypeInternal _ChecksummedData_default_instance_;
class CommonObjectRequestParams;
struct CommonObjectRequestParamsDefaultTypeInternal;
extern CommonObjectRequestParamsDefaultTypeInternal _CommonObjectRequestParams_default_instance_;
class CommonRequestParams;
struct CommonRequestParamsDefaultTypeInternal;
extern CommonRequestParamsDefaultTypeInternal _CommonRequestParams_default_instance_;
class ContentRange;
struct ContentRangeDefaultTypeInternal;
extern ContentRangeDefaultTypeInternal _ContentRange_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectAccessControl;
struct ObjectAccessControlDefaultTypeInternal;
extern ObjectAccessControlDefaultTypeInternal _ObjectAccessControl_default_instance_;
class ObjectChecksums;
struct ObjectChecksumsDefaultTypeInternal;
extern ObjectChecksumsDefaultTypeInternal _ObjectChecksums_default_instance_;
class Object_CustomerEncryption;
struct Object_CustomerEncryptionDefaultTypeInternal;
extern Object_CustomerEncryptionDefaultTypeInternal _Object_CustomerEncryption_default_instance_;
class Object_MetadataEntry_DoNotUse;
struct Object_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Object_MetadataEntry_DoNotUseDefaultTypeInternal _Object_MetadataEntry_DoNotUse_default_instance_;
class Owner;
struct OwnerDefaultTypeInternal;
extern OwnerDefaultTypeInternal _Owner_default_instance_;
class ProjectTeam;
struct ProjectTeamDefaultTypeInternal;
extern ProjectTeamDefaultTypeInternal _ProjectTeam_default_instance_;
class QueryWriteStatusRequest;
struct QueryWriteStatusRequestDefaultTypeInternal;
extern QueryWriteStatusRequestDefaultTypeInternal _QueryWriteStatusRequest_default_instance_;
class QueryWriteStatusResponse;
struct QueryWriteStatusResponseDefaultTypeInternal;
extern QueryWriteStatusResponseDefaultTypeInternal _QueryWriteStatusResponse_default_instance_;
class ReadObjectRequest;
struct ReadObjectRequestDefaultTypeInternal;
extern ReadObjectRequestDefaultTypeInternal _ReadObjectRequest_default_instance_;
class ReadObjectResponse;
struct ReadObjectResponseDefaultTypeInternal;
extern ReadObjectResponseDefaultTypeInternal _ReadObjectResponse_default_instance_;
class ServiceConstants;
struct ServiceConstantsDefaultTypeInternal;
extern ServiceConstantsDefaultTypeInternal _ServiceConstants_default_instance_;
class StartResumableWriteRequest;
struct StartResumableWriteRequestDefaultTypeInternal;
extern StartResumableWriteRequestDefaultTypeInternal _StartResumableWriteRequest_default_instance_;
class StartResumableWriteResponse;
struct StartResumableWriteResponseDefaultTypeInternal;
extern StartResumableWriteResponseDefaultTypeInternal _StartResumableWriteResponse_default_instance_;
class WriteObjectRequest;
struct WriteObjectRequestDefaultTypeInternal;
extern WriteObjectRequestDefaultTypeInternal _WriteObjectRequest_default_instance_;
class WriteObjectResponse;
struct WriteObjectResponseDefaultTypeInternal;
extern WriteObjectResponseDefaultTypeInternal _WriteObjectResponse_default_instance_;
class WriteObjectSpec;
struct WriteObjectSpecDefaultTypeInternal;
extern WriteObjectSpecDefaultTypeInternal _WriteObjectSpec_default_instance_;
}  // namespace v2
}  // namespace storage
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::storage::v2::Bucket* Arena::CreateMaybeMessage<::google::storage::v2::Bucket>(Arena*);
template<> ::google::storage::v2::BucketAccessControl* Arena::CreateMaybeMessage<::google::storage::v2::BucketAccessControl>(Arena*);
template<> ::google::storage::v2::Bucket_Billing* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Billing>(Arena*);
template<> ::google::storage::v2::Bucket_Cors* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Cors>(Arena*);
template<> ::google::storage::v2::Bucket_Encryption* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Encryption>(Arena*);
template<> ::google::storage::v2::Bucket_IamConfig* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig>(Arena*);
template<> ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess>(Arena*);
template<> ::google::storage::v2::Bucket_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle_Rule* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Action>(Arena*);
template<> ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Condition>(Arena*);
template<> ::google::storage::v2::Bucket_Logging* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Logging>(Arena*);
template<> ::google::storage::v2::Bucket_RetentionPolicy* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_RetentionPolicy>(Arena*);
template<> ::google::storage::v2::Bucket_Versioning* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Versioning>(Arena*);
template<> ::google::storage::v2::Bucket_Website* Arena::CreateMaybeMessage<::google::storage::v2::Bucket_Website>(Arena*);
template<> ::google::storage::v2::ChecksummedData* Arena::CreateMaybeMessage<::google::storage::v2::ChecksummedData>(Arena*);
template<> ::google::storage::v2::CommonObjectRequestParams* Arena::CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(Arena*);
template<> ::google::storage::v2::CommonRequestParams* Arena::CreateMaybeMessage<::google::storage::v2::CommonRequestParams>(Arena*);
template<> ::google::storage::v2::ContentRange* Arena::CreateMaybeMessage<::google::storage::v2::ContentRange>(Arena*);
template<> ::google::storage::v2::Object* Arena::CreateMaybeMessage<::google::storage::v2::Object>(Arena*);
template<> ::google::storage::v2::ObjectAccessControl* Arena::CreateMaybeMessage<::google::storage::v2::ObjectAccessControl>(Arena*);
template<> ::google::storage::v2::ObjectChecksums* Arena::CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(Arena*);
template<> ::google::storage::v2::Object_CustomerEncryption* Arena::CreateMaybeMessage<::google::storage::v2::Object_CustomerEncryption>(Arena*);
template<> ::google::storage::v2::Object_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::storage::v2::Object_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::storage::v2::Owner* Arena::CreateMaybeMessage<::google::storage::v2::Owner>(Arena*);
template<> ::google::storage::v2::ProjectTeam* Arena::CreateMaybeMessage<::google::storage::v2::ProjectTeam>(Arena*);
template<> ::google::storage::v2::QueryWriteStatusRequest* Arena::CreateMaybeMessage<::google::storage::v2::QueryWriteStatusRequest>(Arena*);
template<> ::google::storage::v2::QueryWriteStatusResponse* Arena::CreateMaybeMessage<::google::storage::v2::QueryWriteStatusResponse>(Arena*);
template<> ::google::storage::v2::ReadObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::ReadObjectRequest>(Arena*);
template<> ::google::storage::v2::ReadObjectResponse* Arena::CreateMaybeMessage<::google::storage::v2::ReadObjectResponse>(Arena*);
template<> ::google::storage::v2::ServiceConstants* Arena::CreateMaybeMessage<::google::storage::v2::ServiceConstants>(Arena*);
template<> ::google::storage::v2::StartResumableWriteRequest* Arena::CreateMaybeMessage<::google::storage::v2::StartResumableWriteRequest>(Arena*);
template<> ::google::storage::v2::StartResumableWriteResponse* Arena::CreateMaybeMessage<::google::storage::v2::StartResumableWriteResponse>(Arena*);
template<> ::google::storage::v2::WriteObjectRequest* Arena::CreateMaybeMessage<::google::storage::v2::WriteObjectRequest>(Arena*);
template<> ::google::storage::v2::WriteObjectResponse* Arena::CreateMaybeMessage<::google::storage::v2::WriteObjectResponse>(Arena*);
template<> ::google::storage::v2::WriteObjectSpec* Arena::CreateMaybeMessage<::google::storage::v2::WriteObjectSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace storage {
namespace v2 {

enum ServiceConstants_Values : int {
  ServiceConstants_Values_VALUES_UNSPECIFIED = 0,
  ServiceConstants_Values_MAX_READ_CHUNK_BYTES = 2097152,
  ServiceConstants_Values_MAX_WRITE_CHUNK_BYTES = 2097152,
  ServiceConstants_Values_MAX_OBJECT_SIZE_MB = 5242880,
  ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_NAME_BYTES = 1024,
  ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES = 4096,
  ServiceConstants_Values_MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES = 8192,
  ServiceConstants_Values_MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES = 20480,
  ServiceConstants_Values_MAX_NOTIFICATION_CONFIGS_PER_BUCKET = 100,
  ServiceConstants_Values_MAX_LIFECYCLE_RULES_PER_BUCKET = 100,
  ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTES = 5,
  ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH = 256,
  ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH = 1024,
  ServiceConstants_Values_MAX_LABELS_ENTRIES_COUNT = 64,
  ServiceConstants_Values_MAX_LABELS_KEY_VALUE_LENGTH = 63,
  ServiceConstants_Values_MAX_LABELS_KEY_VALUE_BYTES = 128,
  ServiceConstants_Values_MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST = 1000,
  ServiceConstants_Values_SPLIT_TOKEN_MAX_VALID_DAYS = 14,
  ServiceConstants_Values_ServiceConstants_Values_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceConstants_Values_ServiceConstants_Values_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceConstants_Values_IsValid(int value);
constexpr ServiceConstants_Values ServiceConstants_Values_Values_MIN = ServiceConstants_Values_VALUES_UNSPECIFIED;
constexpr ServiceConstants_Values ServiceConstants_Values_Values_MAX = ServiceConstants_Values_MAX_OBJECT_SIZE_MB;
constexpr int ServiceConstants_Values_Values_ARRAYSIZE = ServiceConstants_Values_Values_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceConstants_Values_descriptor();
template<typename T>
inline const std::string& ServiceConstants_Values_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceConstants_Values>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceConstants_Values_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceConstants_Values_descriptor(), enum_t_value);
}
inline bool ServiceConstants_Values_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceConstants_Values* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceConstants_Values>(
    ServiceConstants_Values_descriptor(), name, value);
}
enum Bucket_IamConfig_PublicAccessPrevention : int {
  Bucket_IamConfig_PublicAccessPrevention_PUBLIC_ACCESS_PREVENTION_UNSPECIFIED = 0,
  Bucket_IamConfig_PublicAccessPrevention_ENFORCED = 1,
  Bucket_IamConfig_PublicAccessPrevention_Bucket_IamConfig_PublicAccessPrevention_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Bucket_IamConfig_PublicAccessPrevention_Bucket_IamConfig_PublicAccessPrevention_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Bucket_IamConfig_PublicAccessPrevention_IsValid(int value);
constexpr Bucket_IamConfig_PublicAccessPrevention Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_MIN = Bucket_IamConfig_PublicAccessPrevention_PUBLIC_ACCESS_PREVENTION_UNSPECIFIED;
constexpr Bucket_IamConfig_PublicAccessPrevention Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_MAX = Bucket_IamConfig_PublicAccessPrevention_ENFORCED;
constexpr int Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_ARRAYSIZE = Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bucket_IamConfig_PublicAccessPrevention_descriptor();
template<typename T>
inline const std::string& Bucket_IamConfig_PublicAccessPrevention_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bucket_IamConfig_PublicAccessPrevention>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bucket_IamConfig_PublicAccessPrevention_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bucket_IamConfig_PublicAccessPrevention_descriptor(), enum_t_value);
}
inline bool Bucket_IamConfig_PublicAccessPrevention_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bucket_IamConfig_PublicAccessPrevention* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bucket_IamConfig_PublicAccessPrevention>(
    Bucket_IamConfig_PublicAccessPrevention_descriptor(), name, value);
}
enum PredefinedObjectAcl : int {
  PREDEFINED_OBJECT_ACL_UNSPECIFIED = 0,
  OBJECT_ACL_AUTHENTICATED_READ = 1,
  OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL = 2,
  OBJECT_ACL_BUCKET_OWNER_READ = 3,
  OBJECT_ACL_PRIVATE = 4,
  OBJECT_ACL_PROJECT_PRIVATE = 5,
  OBJECT_ACL_PUBLIC_READ = 6,
  PredefinedObjectAcl_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PredefinedObjectAcl_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PredefinedObjectAcl_IsValid(int value);
constexpr PredefinedObjectAcl PredefinedObjectAcl_MIN = PREDEFINED_OBJECT_ACL_UNSPECIFIED;
constexpr PredefinedObjectAcl PredefinedObjectAcl_MAX = OBJECT_ACL_PUBLIC_READ;
constexpr int PredefinedObjectAcl_ARRAYSIZE = PredefinedObjectAcl_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PredefinedObjectAcl_descriptor();
template<typename T>
inline const std::string& PredefinedObjectAcl_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PredefinedObjectAcl>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PredefinedObjectAcl_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PredefinedObjectAcl_descriptor(), enum_t_value);
}
inline bool PredefinedObjectAcl_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PredefinedObjectAcl* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PredefinedObjectAcl>(
    PredefinedObjectAcl_descriptor(), name, value);
}
// ===================================================================

class ReadObjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ReadObjectRequest) */ {
 public:
  inline ReadObjectRequest() : ReadObjectRequest(nullptr) {}
  virtual ~ReadObjectRequest();
  explicit constexpr ReadObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadObjectRequest(const ReadObjectRequest& from);
  ReadObjectRequest(ReadObjectRequest&& from) noexcept
    : ReadObjectRequest() {
    *this = ::std::move(from);
  }

  inline ReadObjectRequest& operator=(const ReadObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadObjectRequest& operator=(ReadObjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadObjectRequest* internal_default_instance() {
    return reinterpret_cast<const ReadObjectRequest*>(
               &_ReadObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadObjectRequest& a, ReadObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadObjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadObjectRequest* New() const final {
    return CreateMaybeMessage<ReadObjectRequest>(nullptr);
  }

  ReadObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadObjectRequest& from);
  void MergeFrom(const ReadObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ReadObjectRequest";
  }
  protected:
  explicit ReadObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kObjectFieldNumber = 2,
    kCommonObjectRequestParamsFieldNumber = 10,
    kCommonRequestParamsFieldNumber = 11,
    kReadMaskFieldNumber = 12,
    kGenerationFieldNumber = 3,
    kReadOffsetFieldNumber = 4,
    kReadLimitFieldNumber = 5,
    kIfGenerationMatchFieldNumber = 6,
    kIfGenerationNotMatchFieldNumber = 7,
    kIfMetagenerationMatchFieldNumber = 8,
    kIfMetagenerationNotMatchFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string object = 2;
  void clear_object();
  const std::string& object() const;
  void set_object(const std::string& value);
  void set_object(std::string&& value);
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  std::string* mutable_object();
  std::string* release_object();
  void set_allocated_object(std::string* object);
  private:
  const std::string& _internal_object() const;
  void _internal_set_object(const std::string& value);
  std::string* _internal_mutable_object();
  public:

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 10;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // .google.storage.v2.CommonRequestParams common_request_params = 11;
  bool has_common_request_params() const;
  private:
  bool _internal_has_common_request_params() const;
  public:
  void clear_common_request_params();
  const ::google::storage::v2::CommonRequestParams& common_request_params() const;
  ::google::storage::v2::CommonRequestParams* release_common_request_params();
  ::google::storage::v2::CommonRequestParams* mutable_common_request_params();
  void set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params);
  private:
  const ::google::storage::v2::CommonRequestParams& _internal_common_request_params() const;
  ::google::storage::v2::CommonRequestParams* _internal_mutable_common_request_params();
  public:
  void unsafe_arena_set_allocated_common_request_params(
      ::google::storage::v2::CommonRequestParams* common_request_params);
  ::google::storage::v2::CommonRequestParams* unsafe_arena_release_common_request_params();

  // .google.protobuf.FieldMask read_mask = 12;
  bool has_read_mask() const;
  private:
  bool _internal_has_read_mask() const;
  public:
  void clear_read_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& read_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_read_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_read_mask();
  void set_allocated_read_mask(PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_read_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_read_mask();
  public:
  void unsafe_arena_set_allocated_read_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* read_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_read_mask();

  // int64 generation = 3;
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int64 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 read_offset = 4;
  void clear_read_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 read_offset() const;
  void set_read_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_read_offset() const;
  void _internal_set_read_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 read_limit = 5;
  void clear_read_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 read_limit() const;
  void set_read_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_read_limit() const;
  void _internal_set_read_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_generation_match = 6;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_match() const;
  void set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_generation_match() const;
  void _internal_set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_generation_not_match = 7;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_not_match() const;
  void set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_metageneration_match = 8;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_match() const;
  void set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_metageneration_not_match = 9;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_not_match() const;
  void set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ReadObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_;
  ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
  ::google::storage::v2::CommonRequestParams* common_request_params_;
  PROTOBUF_NAMESPACE_ID::FieldMask* read_mask_;
  ::PROTOBUF_NAMESPACE_ID::int64 generation_;
  ::PROTOBUF_NAMESPACE_ID::int64 read_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 read_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_match_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_not_match_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_match_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_not_match_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ReadObjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ReadObjectResponse) */ {
 public:
  inline ReadObjectResponse() : ReadObjectResponse(nullptr) {}
  virtual ~ReadObjectResponse();
  explicit constexpr ReadObjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadObjectResponse(const ReadObjectResponse& from);
  ReadObjectResponse(ReadObjectResponse&& from) noexcept
    : ReadObjectResponse() {
    *this = ::std::move(from);
  }

  inline ReadObjectResponse& operator=(const ReadObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadObjectResponse& operator=(ReadObjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadObjectResponse* internal_default_instance() {
    return reinterpret_cast<const ReadObjectResponse*>(
               &_ReadObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadObjectResponse& a, ReadObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadObjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadObjectResponse* New() const final {
    return CreateMaybeMessage<ReadObjectResponse>(nullptr);
  }

  ReadObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadObjectResponse& from);
  void MergeFrom(const ReadObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ReadObjectResponse";
  }
  protected:
  explicit ReadObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChecksummedDataFieldNumber = 1,
    kObjectChecksumsFieldNumber = 2,
    kContentRangeFieldNumber = 3,
    kMetadataFieldNumber = 4,
  };
  // .google.storage.v2.ChecksummedData checksummed_data = 1;
  bool has_checksummed_data() const;
  private:
  bool _internal_has_checksummed_data() const;
  public:
  void clear_checksummed_data();
  const ::google::storage::v2::ChecksummedData& checksummed_data() const;
  ::google::storage::v2::ChecksummedData* release_checksummed_data();
  ::google::storage::v2::ChecksummedData* mutable_checksummed_data();
  void set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data);
  private:
  const ::google::storage::v2::ChecksummedData& _internal_checksummed_data() const;
  ::google::storage::v2::ChecksummedData* _internal_mutable_checksummed_data();
  public:
  void unsafe_arena_set_allocated_checksummed_data(
      ::google::storage::v2::ChecksummedData* checksummed_data);
  ::google::storage::v2::ChecksummedData* unsafe_arena_release_checksummed_data();

  // .google.storage.v2.ObjectChecksums object_checksums = 2;
  bool has_object_checksums() const;
  private:
  bool _internal_has_object_checksums() const;
  public:
  void clear_object_checksums();
  const ::google::storage::v2::ObjectChecksums& object_checksums() const;
  ::google::storage::v2::ObjectChecksums* release_object_checksums();
  ::google::storage::v2::ObjectChecksums* mutable_object_checksums();
  void set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums);
  private:
  const ::google::storage::v2::ObjectChecksums& _internal_object_checksums() const;
  ::google::storage::v2::ObjectChecksums* _internal_mutable_object_checksums();
  public:
  void unsafe_arena_set_allocated_object_checksums(
      ::google::storage::v2::ObjectChecksums* object_checksums);
  ::google::storage::v2::ObjectChecksums* unsafe_arena_release_object_checksums();

  // .google.storage.v2.ContentRange content_range = 3;
  bool has_content_range() const;
  private:
  bool _internal_has_content_range() const;
  public:
  void clear_content_range();
  const ::google::storage::v2::ContentRange& content_range() const;
  ::google::storage::v2::ContentRange* release_content_range();
  ::google::storage::v2::ContentRange* mutable_content_range();
  void set_allocated_content_range(::google::storage::v2::ContentRange* content_range);
  private:
  const ::google::storage::v2::ContentRange& _internal_content_range() const;
  ::google::storage::v2::ContentRange* _internal_mutable_content_range();
  public:
  void unsafe_arena_set_allocated_content_range(
      ::google::storage::v2::ContentRange* content_range);
  ::google::storage::v2::ContentRange* unsafe_arena_release_content_range();

  // .google.storage.v2.Object metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::google::storage::v2::Object& metadata() const;
  ::google::storage::v2::Object* release_metadata();
  ::google::storage::v2::Object* mutable_metadata();
  void set_allocated_metadata(::google::storage::v2::Object* metadata);
  private:
  const ::google::storage::v2::Object& _internal_metadata() const;
  ::google::storage::v2::Object* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::google::storage::v2::Object* metadata);
  ::google::storage::v2::Object* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:google.storage.v2.ReadObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::storage::v2::ChecksummedData* checksummed_data_;
  ::google::storage::v2::ObjectChecksums* object_checksums_;
  ::google::storage::v2::ContentRange* content_range_;
  ::google::storage::v2::Object* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WriteObjectSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.WriteObjectSpec) */ {
 public:
  inline WriteObjectSpec() : WriteObjectSpec(nullptr) {}
  virtual ~WriteObjectSpec();
  explicit constexpr WriteObjectSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteObjectSpec(const WriteObjectSpec& from);
  WriteObjectSpec(WriteObjectSpec&& from) noexcept
    : WriteObjectSpec() {
    *this = ::std::move(from);
  }

  inline WriteObjectSpec& operator=(const WriteObjectSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteObjectSpec& operator=(WriteObjectSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteObjectSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteObjectSpec* internal_default_instance() {
    return reinterpret_cast<const WriteObjectSpec*>(
               &_WriteObjectSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WriteObjectSpec& a, WriteObjectSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteObjectSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteObjectSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteObjectSpec* New() const final {
    return CreateMaybeMessage<WriteObjectSpec>(nullptr);
  }

  WriteObjectSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteObjectSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteObjectSpec& from);
  void MergeFrom(const WriteObjectSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteObjectSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.WriteObjectSpec";
  }
  protected:
  explicit WriteObjectSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
    kIfGenerationMatchFieldNumber = 3,
    kIfGenerationNotMatchFieldNumber = 4,
    kIfMetagenerationMatchFieldNumber = 5,
    kIfMetagenerationNotMatchFieldNumber = 6,
    kPredefinedAclFieldNumber = 2,
  };
  // .google.storage.v2.Object resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  // int64 if_generation_match = 3;
  bool has_if_generation_match() const;
  private:
  bool _internal_has_if_generation_match() const;
  public:
  void clear_if_generation_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_match() const;
  void set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_generation_match() const;
  void _internal_set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_generation_not_match = 4;
  bool has_if_generation_not_match() const;
  private:
  bool _internal_has_if_generation_not_match() const;
  public:
  void clear_if_generation_not_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_not_match() const;
  void set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_generation_not_match() const;
  void _internal_set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_metageneration_match = 5;
  bool has_if_metageneration_match() const;
  private:
  bool _internal_has_if_metageneration_match() const;
  public:
  void clear_if_metageneration_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_match() const;
  void set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_metageneration_match() const;
  void _internal_set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 if_metageneration_not_match = 6;
  bool has_if_metageneration_not_match() const;
  private:
  bool _internal_has_if_metageneration_not_match() const;
  public:
  void clear_if_metageneration_not_match();
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_not_match() const;
  void set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_if_metageneration_not_match() const;
  void _internal_set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .google.storage.v2.PredefinedObjectAcl predefined_acl = 2;
  void clear_predefined_acl();
  ::google::storage::v2::PredefinedObjectAcl predefined_acl() const;
  void set_predefined_acl(::google::storage::v2::PredefinedObjectAcl value);
  private:
  ::google::storage::v2::PredefinedObjectAcl _internal_predefined_acl() const;
  void _internal_set_predefined_acl(::google::storage::v2::PredefinedObjectAcl value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.WriteObjectSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::google::storage::v2::Object* resource_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_match_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_generation_not_match_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_match_;
  ::PROTOBUF_NAMESPACE_ID::int64 if_metageneration_not_match_;
  int predefined_acl_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WriteObjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.WriteObjectRequest) */ {
 public:
  inline WriteObjectRequest() : WriteObjectRequest(nullptr) {}
  virtual ~WriteObjectRequest();
  explicit constexpr WriteObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteObjectRequest(const WriteObjectRequest& from);
  WriteObjectRequest(WriteObjectRequest&& from) noexcept
    : WriteObjectRequest() {
    *this = ::std::move(from);
  }

  inline WriteObjectRequest& operator=(const WriteObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteObjectRequest& operator=(WriteObjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  enum FirstMessageCase {
    kUploadId = 1,
    kWriteObjectSpec = 2,
    FIRST_MESSAGE_NOT_SET = 0,
  };

  enum DataCase {
    kChecksummedData = 4,
    DATA_NOT_SET = 0,
  };

  static inline const WriteObjectRequest* internal_default_instance() {
    return reinterpret_cast<const WriteObjectRequest*>(
               &_WriteObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteObjectRequest& a, WriteObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteObjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteObjectRequest* New() const final {
    return CreateMaybeMessage<WriteObjectRequest>(nullptr);
  }

  WriteObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteObjectRequest& from);
  void MergeFrom(const WriteObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.WriteObjectRequest";
  }
  protected:
  explicit WriteObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectChecksumsFieldNumber = 6,
    kCommonObjectRequestParamsFieldNumber = 8,
    kCommonRequestParamsFieldNumber = 9,
    kWriteOffsetFieldNumber = 3,
    kFinishWriteFieldNumber = 7,
    kUploadIdFieldNumber = 1,
    kWriteObjectSpecFieldNumber = 2,
    kChecksummedDataFieldNumber = 4,
  };
  // .google.storage.v2.ObjectChecksums object_checksums = 6;
  bool has_object_checksums() const;
  private:
  bool _internal_has_object_checksums() const;
  public:
  void clear_object_checksums();
  const ::google::storage::v2::ObjectChecksums& object_checksums() const;
  ::google::storage::v2::ObjectChecksums* release_object_checksums();
  ::google::storage::v2::ObjectChecksums* mutable_object_checksums();
  void set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums);
  private:
  const ::google::storage::v2::ObjectChecksums& _internal_object_checksums() const;
  ::google::storage::v2::ObjectChecksums* _internal_mutable_object_checksums();
  public:
  void unsafe_arena_set_allocated_object_checksums(
      ::google::storage::v2::ObjectChecksums* object_checksums);
  ::google::storage::v2::ObjectChecksums* unsafe_arena_release_object_checksums();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // .google.storage.v2.CommonRequestParams common_request_params = 9;
  bool has_common_request_params() const;
  private:
  bool _internal_has_common_request_params() const;
  public:
  void clear_common_request_params();
  const ::google::storage::v2::CommonRequestParams& common_request_params() const;
  ::google::storage::v2::CommonRequestParams* release_common_request_params();
  ::google::storage::v2::CommonRequestParams* mutable_common_request_params();
  void set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params);
  private:
  const ::google::storage::v2::CommonRequestParams& _internal_common_request_params() const;
  ::google::storage::v2::CommonRequestParams* _internal_mutable_common_request_params();
  public:
  void unsafe_arena_set_allocated_common_request_params(
      ::google::storage::v2::CommonRequestParams* common_request_params);
  ::google::storage::v2::CommonRequestParams* unsafe_arena_release_common_request_params();

  // int64 write_offset = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_write_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 write_offset() const;
  void set_write_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_write_offset() const;
  void _internal_set_write_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool finish_write = 7;
  void clear_finish_write();
  bool finish_write() const;
  void set_finish_write(bool value);
  private:
  bool _internal_finish_write() const;
  void _internal_set_finish_write(bool value);
  public:

  // string upload_id = 1;
  bool has_upload_id() const;
  private:
  bool _internal_has_upload_id() const;
  public:
  void clear_upload_id();
  const std::string& upload_id() const;
  void set_upload_id(const std::string& value);
  void set_upload_id(std::string&& value);
  void set_upload_id(const char* value);
  void set_upload_id(const char* value, size_t size);
  std::string* mutable_upload_id();
  std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // .google.storage.v2.WriteObjectSpec write_object_spec = 2;
  bool has_write_object_spec() const;
  private:
  bool _internal_has_write_object_spec() const;
  public:
  void clear_write_object_spec();
  const ::google::storage::v2::WriteObjectSpec& write_object_spec() const;
  ::google::storage::v2::WriteObjectSpec* release_write_object_spec();
  ::google::storage::v2::WriteObjectSpec* mutable_write_object_spec();
  void set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec);
  private:
  const ::google::storage::v2::WriteObjectSpec& _internal_write_object_spec() const;
  ::google::storage::v2::WriteObjectSpec* _internal_mutable_write_object_spec();
  public:
  void unsafe_arena_set_allocated_write_object_spec(
      ::google::storage::v2::WriteObjectSpec* write_object_spec);
  ::google::storage::v2::WriteObjectSpec* unsafe_arena_release_write_object_spec();

  // .google.storage.v2.ChecksummedData checksummed_data = 4;
  bool has_checksummed_data() const;
  private:
  bool _internal_has_checksummed_data() const;
  public:
  void clear_checksummed_data();
  const ::google::storage::v2::ChecksummedData& checksummed_data() const;
  ::google::storage::v2::ChecksummedData* release_checksummed_data();
  ::google::storage::v2::ChecksummedData* mutable_checksummed_data();
  void set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data);
  private:
  const ::google::storage::v2::ChecksummedData& _internal_checksummed_data() const;
  ::google::storage::v2::ChecksummedData* _internal_mutable_checksummed_data();
  public:
  void unsafe_arena_set_allocated_checksummed_data(
      ::google::storage::v2::ChecksummedData* checksummed_data);
  ::google::storage::v2::ChecksummedData* unsafe_arena_release_checksummed_data();

  void clear_first_message();
  FirstMessageCase first_message_case() const;
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:google.storage.v2.WriteObjectRequest)
 private:
  class _Internal;
  void set_has_upload_id();
  void set_has_write_object_spec();
  void set_has_checksummed_data();

  inline bool has_first_message() const;
  inline void clear_has_first_message();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::storage::v2::ObjectChecksums* object_checksums_;
  ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
  ::google::storage::v2::CommonRequestParams* common_request_params_;
  ::PROTOBUF_NAMESPACE_ID::int64 write_offset_;
  bool finish_write_;
  union FirstMessageUnion {
    constexpr FirstMessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
    ::google::storage::v2::WriteObjectSpec* write_object_spec_;
  } first_message_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::storage::v2::ChecksummedData* checksummed_data_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class WriteObjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.WriteObjectResponse) */ {
 public:
  inline WriteObjectResponse() : WriteObjectResponse(nullptr) {}
  virtual ~WriteObjectResponse();
  explicit constexpr WriteObjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteObjectResponse(const WriteObjectResponse& from);
  WriteObjectResponse(WriteObjectResponse&& from) noexcept
    : WriteObjectResponse() {
    *this = ::std::move(from);
  }

  inline WriteObjectResponse& operator=(const WriteObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteObjectResponse& operator=(WriteObjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  enum WriteStatusCase {
    kCommittedSize = 1,
    kResource = 2,
    WRITE_STATUS_NOT_SET = 0,
  };

  static inline const WriteObjectResponse* internal_default_instance() {
    return reinterpret_cast<const WriteObjectResponse*>(
               &_WriteObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteObjectResponse& a, WriteObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteObjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteObjectResponse* New() const final {
    return CreateMaybeMessage<WriteObjectResponse>(nullptr);
  }

  WriteObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteObjectResponse& from);
  void MergeFrom(const WriteObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.WriteObjectResponse";
  }
  protected:
  explicit WriteObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommittedSizeFieldNumber = 1,
    kResourceFieldNumber = 2,
  };
  // int64 committed_size = 1;
  bool has_committed_size() const;
  private:
  bool _internal_has_committed_size() const;
  public:
  void clear_committed_size();
  ::PROTOBUF_NAMESPACE_ID::int64 committed_size() const;
  void set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_committed_size() const;
  void _internal_set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .google.storage.v2.Object resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  void clear_write_status();
  WriteStatusCase write_status_case() const;
  // @@protoc_insertion_point(class_scope:google.storage.v2.WriteObjectResponse)
 private:
  class _Internal;
  void set_has_committed_size();
  void set_has_resource();

  inline bool has_write_status() const;
  inline void clear_has_write_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WriteStatusUnion {
    constexpr WriteStatusUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int64 committed_size_;
    ::google::storage::v2::Object* resource_;
  } write_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class QueryWriteStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.QueryWriteStatusRequest) */ {
 public:
  inline QueryWriteStatusRequest() : QueryWriteStatusRequest(nullptr) {}
  virtual ~QueryWriteStatusRequest();
  explicit constexpr QueryWriteStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryWriteStatusRequest(const QueryWriteStatusRequest& from);
  QueryWriteStatusRequest(QueryWriteStatusRequest&& from) noexcept
    : QueryWriteStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryWriteStatusRequest& operator=(const QueryWriteStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWriteStatusRequest& operator=(QueryWriteStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryWriteStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryWriteStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryWriteStatusRequest*>(
               &_QueryWriteStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryWriteStatusRequest& a, QueryWriteStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWriteStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryWriteStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryWriteStatusRequest* New() const final {
    return CreateMaybeMessage<QueryWriteStatusRequest>(nullptr);
  }

  QueryWriteStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryWriteStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryWriteStatusRequest& from);
  void MergeFrom(const QueryWriteStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWriteStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.QueryWriteStatusRequest";
  }
  protected:
  explicit QueryWriteStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 1,
    kCommonObjectRequestParamsFieldNumber = 2,
    kCommonRequestParamsFieldNumber = 3,
  };
  // string upload_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_upload_id();
  const std::string& upload_id() const;
  void set_upload_id(const std::string& value);
  void set_upload_id(std::string&& value);
  void set_upload_id(const char* value);
  void set_upload_id(const char* value, size_t size);
  std::string* mutable_upload_id();
  std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 2;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // .google.storage.v2.CommonRequestParams common_request_params = 3;
  bool has_common_request_params() const;
  private:
  bool _internal_has_common_request_params() const;
  public:
  void clear_common_request_params();
  const ::google::storage::v2::CommonRequestParams& common_request_params() const;
  ::google::storage::v2::CommonRequestParams* release_common_request_params();
  ::google::storage::v2::CommonRequestParams* mutable_common_request_params();
  void set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params);
  private:
  const ::google::storage::v2::CommonRequestParams& _internal_common_request_params() const;
  ::google::storage::v2::CommonRequestParams* _internal_mutable_common_request_params();
  public:
  void unsafe_arena_set_allocated_common_request_params(
      ::google::storage::v2::CommonRequestParams* common_request_params);
  ::google::storage::v2::CommonRequestParams* unsafe_arena_release_common_request_params();

  // @@protoc_insertion_point(class_scope:google.storage.v2.QueryWriteStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
  ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
  ::google::storage::v2::CommonRequestParams* common_request_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class QueryWriteStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.QueryWriteStatusResponse) */ {
 public:
  inline QueryWriteStatusResponse() : QueryWriteStatusResponse(nullptr) {}
  virtual ~QueryWriteStatusResponse();
  explicit constexpr QueryWriteStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryWriteStatusResponse(const QueryWriteStatusResponse& from);
  QueryWriteStatusResponse(QueryWriteStatusResponse&& from) noexcept
    : QueryWriteStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryWriteStatusResponse& operator=(const QueryWriteStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWriteStatusResponse& operator=(QueryWriteStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryWriteStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  enum WriteStatusCase {
    kCommittedSize = 1,
    kResource = 2,
    WRITE_STATUS_NOT_SET = 0,
  };

  static inline const QueryWriteStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryWriteStatusResponse*>(
               &_QueryWriteStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryWriteStatusResponse& a, QueryWriteStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWriteStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryWriteStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryWriteStatusResponse* New() const final {
    return CreateMaybeMessage<QueryWriteStatusResponse>(nullptr);
  }

  QueryWriteStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryWriteStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryWriteStatusResponse& from);
  void MergeFrom(const QueryWriteStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWriteStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.QueryWriteStatusResponse";
  }
  protected:
  explicit QueryWriteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommittedSizeFieldNumber = 1,
    kResourceFieldNumber = 2,
  };
  // int64 committed_size = 1;
  bool has_committed_size() const;
  private:
  bool _internal_has_committed_size() const;
  public:
  void clear_committed_size();
  ::PROTOBUF_NAMESPACE_ID::int64 committed_size() const;
  void set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_committed_size() const;
  void _internal_set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .google.storage.v2.Object resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::storage::v2::Object& resource() const;
  ::google::storage::v2::Object* release_resource();
  ::google::storage::v2::Object* mutable_resource();
  void set_allocated_resource(::google::storage::v2::Object* resource);
  private:
  const ::google::storage::v2::Object& _internal_resource() const;
  ::google::storage::v2::Object* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::storage::v2::Object* resource);
  ::google::storage::v2::Object* unsafe_arena_release_resource();

  void clear_write_status();
  WriteStatusCase write_status_case() const;
  // @@protoc_insertion_point(class_scope:google.storage.v2.QueryWriteStatusResponse)
 private:
  class _Internal;
  void set_has_committed_size();
  void set_has_resource();

  inline bool has_write_status() const;
  inline void clear_has_write_status();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WriteStatusUnion {
    constexpr WriteStatusUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int64 committed_size_;
    ::google::storage::v2::Object* resource_;
  } write_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StartResumableWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.StartResumableWriteRequest) */ {
 public:
  inline StartResumableWriteRequest() : StartResumableWriteRequest(nullptr) {}
  virtual ~StartResumableWriteRequest();
  explicit constexpr StartResumableWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResumableWriteRequest(const StartResumableWriteRequest& from);
  StartResumableWriteRequest(StartResumableWriteRequest&& from) noexcept
    : StartResumableWriteRequest() {
    *this = ::std::move(from);
  }

  inline StartResumableWriteRequest& operator=(const StartResumableWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResumableWriteRequest& operator=(StartResumableWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartResumableWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResumableWriteRequest* internal_default_instance() {
    return reinterpret_cast<const StartResumableWriteRequest*>(
               &_StartResumableWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartResumableWriteRequest& a, StartResumableWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResumableWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResumableWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResumableWriteRequest* New() const final {
    return CreateMaybeMessage<StartResumableWriteRequest>(nullptr);
  }

  StartResumableWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResumableWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartResumableWriteRequest& from);
  void MergeFrom(const StartResumableWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResumableWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.StartResumableWriteRequest";
  }
  protected:
  explicit StartResumableWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteObjectSpecFieldNumber = 1,
    kCommonObjectRequestParamsFieldNumber = 3,
    kCommonRequestParamsFieldNumber = 4,
  };
  // .google.storage.v2.WriteObjectSpec write_object_spec = 1;
  bool has_write_object_spec() const;
  private:
  bool _internal_has_write_object_spec() const;
  public:
  void clear_write_object_spec();
  const ::google::storage::v2::WriteObjectSpec& write_object_spec() const;
  ::google::storage::v2::WriteObjectSpec* release_write_object_spec();
  ::google::storage::v2::WriteObjectSpec* mutable_write_object_spec();
  void set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec);
  private:
  const ::google::storage::v2::WriteObjectSpec& _internal_write_object_spec() const;
  ::google::storage::v2::WriteObjectSpec* _internal_mutable_write_object_spec();
  public:
  void unsafe_arena_set_allocated_write_object_spec(
      ::google::storage::v2::WriteObjectSpec* write_object_spec);
  ::google::storage::v2::WriteObjectSpec* unsafe_arena_release_write_object_spec();

  // .google.storage.v2.CommonObjectRequestParams common_object_request_params = 3;
  bool has_common_object_request_params() const;
  private:
  bool _internal_has_common_object_request_params() const;
  public:
  void clear_common_object_request_params();
  const ::google::storage::v2::CommonObjectRequestParams& common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* release_common_object_request_params();
  ::google::storage::v2::CommonObjectRequestParams* mutable_common_object_request_params();
  void set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  private:
  const ::google::storage::v2::CommonObjectRequestParams& _internal_common_object_request_params() const;
  ::google::storage::v2::CommonObjectRequestParams* _internal_mutable_common_object_request_params();
  public:
  void unsafe_arena_set_allocated_common_object_request_params(
      ::google::storage::v2::CommonObjectRequestParams* common_object_request_params);
  ::google::storage::v2::CommonObjectRequestParams* unsafe_arena_release_common_object_request_params();

  // .google.storage.v2.CommonRequestParams common_request_params = 4;
  bool has_common_request_params() const;
  private:
  bool _internal_has_common_request_params() const;
  public:
  void clear_common_request_params();
  const ::google::storage::v2::CommonRequestParams& common_request_params() const;
  ::google::storage::v2::CommonRequestParams* release_common_request_params();
  ::google::storage::v2::CommonRequestParams* mutable_common_request_params();
  void set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params);
  private:
  const ::google::storage::v2::CommonRequestParams& _internal_common_request_params() const;
  ::google::storage::v2::CommonRequestParams* _internal_mutable_common_request_params();
  public:
  void unsafe_arena_set_allocated_common_request_params(
      ::google::storage::v2::CommonRequestParams* common_request_params);
  ::google::storage::v2::CommonRequestParams* unsafe_arena_release_common_request_params();

  // @@protoc_insertion_point(class_scope:google.storage.v2.StartResumableWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::storage::v2::WriteObjectSpec* write_object_spec_;
  ::google::storage::v2::CommonObjectRequestParams* common_object_request_params_;
  ::google::storage::v2::CommonRequestParams* common_request_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class StartResumableWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.StartResumableWriteResponse) */ {
 public:
  inline StartResumableWriteResponse() : StartResumableWriteResponse(nullptr) {}
  virtual ~StartResumableWriteResponse();
  explicit constexpr StartResumableWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResumableWriteResponse(const StartResumableWriteResponse& from);
  StartResumableWriteResponse(StartResumableWriteResponse&& from) noexcept
    : StartResumableWriteResponse() {
    *this = ::std::move(from);
  }

  inline StartResumableWriteResponse& operator=(const StartResumableWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResumableWriteResponse& operator=(StartResumableWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartResumableWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResumableWriteResponse* internal_default_instance() {
    return reinterpret_cast<const StartResumableWriteResponse*>(
               &_StartResumableWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartResumableWriteResponse& a, StartResumableWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResumableWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResumableWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResumableWriteResponse* New() const final {
    return CreateMaybeMessage<StartResumableWriteResponse>(nullptr);
  }

  StartResumableWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResumableWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartResumableWriteResponse& from);
  void MergeFrom(const StartResumableWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResumableWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.StartResumableWriteResponse";
  }
  protected:
  explicit StartResumableWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 1,
  };
  // string upload_id = 1;
  void clear_upload_id();
  const std::string& upload_id() const;
  void set_upload_id(const std::string& value);
  void set_upload_id(std::string&& value);
  void set_upload_id(const char* value);
  void set_upload_id(const char* value, size_t size);
  std::string* mutable_upload_id();
  std::string* release_upload_id();
  void set_allocated_upload_id(std::string* upload_id);
  private:
  const std::string& _internal_upload_id() const;
  void _internal_set_upload_id(const std::string& value);
  std::string* _internal_mutable_upload_id();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.StartResumableWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CommonObjectRequestParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CommonObjectRequestParams) */ {
 public:
  inline CommonObjectRequestParams() : CommonObjectRequestParams(nullptr) {}
  virtual ~CommonObjectRequestParams();
  explicit constexpr CommonObjectRequestParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonObjectRequestParams(const CommonObjectRequestParams& from);
  CommonObjectRequestParams(CommonObjectRequestParams&& from) noexcept
    : CommonObjectRequestParams() {
    *this = ::std::move(from);
  }

  inline CommonObjectRequestParams& operator=(const CommonObjectRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonObjectRequestParams& operator=(CommonObjectRequestParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonObjectRequestParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonObjectRequestParams* internal_default_instance() {
    return reinterpret_cast<const CommonObjectRequestParams*>(
               &_CommonObjectRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommonObjectRequestParams& a, CommonObjectRequestParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonObjectRequestParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonObjectRequestParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonObjectRequestParams* New() const final {
    return CreateMaybeMessage<CommonObjectRequestParams>(nullptr);
  }

  CommonObjectRequestParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonObjectRequestParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonObjectRequestParams& from);
  void MergeFrom(const CommonObjectRequestParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonObjectRequestParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CommonObjectRequestParams";
  }
  protected:
  explicit CommonObjectRequestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionAlgorithmFieldNumber = 1,
    kEncryptionKeyFieldNumber = 2,
    kEncryptionKeySha256FieldNumber = 3,
  };
  // string encryption_algorithm = 1;
  void clear_encryption_algorithm();
  const std::string& encryption_algorithm() const;
  void set_encryption_algorithm(const std::string& value);
  void set_encryption_algorithm(std::string&& value);
  void set_encryption_algorithm(const char* value);
  void set_encryption_algorithm(const char* value, size_t size);
  std::string* mutable_encryption_algorithm();
  std::string* release_encryption_algorithm();
  void set_allocated_encryption_algorithm(std::string* encryption_algorithm);
  private:
  const std::string& _internal_encryption_algorithm() const;
  void _internal_set_encryption_algorithm(const std::string& value);
  std::string* _internal_mutable_encryption_algorithm();
  public:

  // string encryption_key = 2;
  void clear_encryption_key();
  const std::string& encryption_key() const;
  void set_encryption_key(const std::string& value);
  void set_encryption_key(std::string&& value);
  void set_encryption_key(const char* value);
  void set_encryption_key(const char* value, size_t size);
  std::string* mutable_encryption_key();
  std::string* release_encryption_key();
  void set_allocated_encryption_key(std::string* encryption_key);
  private:
  const std::string& _internal_encryption_key() const;
  void _internal_set_encryption_key(const std::string& value);
  std::string* _internal_mutable_encryption_key();
  public:

  // string encryption_key_sha256 = 3;
  void clear_encryption_key_sha256();
  const std::string& encryption_key_sha256() const;
  void set_encryption_key_sha256(const std::string& value);
  void set_encryption_key_sha256(std::string&& value);
  void set_encryption_key_sha256(const char* value);
  void set_encryption_key_sha256(const char* value, size_t size);
  std::string* mutable_encryption_key_sha256();
  std::string* release_encryption_key_sha256();
  void set_allocated_encryption_key_sha256(std::string* encryption_key_sha256);
  private:
  const std::string& _internal_encryption_key_sha256() const;
  void _internal_set_encryption_key_sha256(const std::string& value);
  std::string* _internal_mutable_encryption_key_sha256();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.CommonObjectRequestParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_sha256_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class CommonRequestParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.CommonRequestParams) */ {
 public:
  inline CommonRequestParams() : CommonRequestParams(nullptr) {}
  virtual ~CommonRequestParams();
  explicit constexpr CommonRequestParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonRequestParams(const CommonRequestParams& from);
  CommonRequestParams(CommonRequestParams&& from) noexcept
    : CommonRequestParams() {
    *this = ::std::move(from);
  }

  inline CommonRequestParams& operator=(const CommonRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRequestParams& operator=(CommonRequestParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonRequestParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonRequestParams* internal_default_instance() {
    return reinterpret_cast<const CommonRequestParams*>(
               &_CommonRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommonRequestParams& a, CommonRequestParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRequestParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRequestParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonRequestParams* New() const final {
    return CreateMaybeMessage<CommonRequestParams>(nullptr);
  }

  CommonRequestParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonRequestParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonRequestParams& from);
  void MergeFrom(const CommonRequestParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRequestParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.CommonRequestParams";
  }
  protected:
  explicit CommonRequestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserProjectFieldNumber = 1,
  };
  // string user_project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_user_project();
  const std::string& user_project() const;
  void set_user_project(const std::string& value);
  void set_user_project(std::string&& value);
  void set_user_project(const char* value);
  void set_user_project(const char* value, size_t size);
  std::string* mutable_user_project();
  std::string* release_user_project();
  void set_allocated_user_project(std::string* user_project);
  private:
  const std::string& _internal_user_project() const;
  void _internal_set_user_project(const std::string& value);
  std::string* _internal_mutable_user_project();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.CommonRequestParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_project_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ServiceConstants PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ServiceConstants) */ {
 public:
  inline ServiceConstants() : ServiceConstants(nullptr) {}
  virtual ~ServiceConstants();
  explicit constexpr ServiceConstants(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceConstants(const ServiceConstants& from);
  ServiceConstants(ServiceConstants&& from) noexcept
    : ServiceConstants() {
    *this = ::std::move(from);
  }

  inline ServiceConstants& operator=(const ServiceConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConstants& operator=(ServiceConstants&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceConstants& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceConstants* internal_default_instance() {
    return reinterpret_cast<const ServiceConstants*>(
               &_ServiceConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServiceConstants& a, ServiceConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceConstants* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConstants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceConstants* New() const final {
    return CreateMaybeMessage<ServiceConstants>(nullptr);
  }

  ServiceConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceConstants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceConstants& from);
  void MergeFrom(const ServiceConstants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceConstants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ServiceConstants";
  }
  protected:
  explicit ServiceConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServiceConstants_Values Values;
  static constexpr Values VALUES_UNSPECIFIED =
    ServiceConstants_Values_VALUES_UNSPECIFIED;
  static constexpr Values MAX_READ_CHUNK_BYTES =
    ServiceConstants_Values_MAX_READ_CHUNK_BYTES;
  static constexpr Values MAX_WRITE_CHUNK_BYTES =
    ServiceConstants_Values_MAX_WRITE_CHUNK_BYTES;
  static constexpr Values MAX_OBJECT_SIZE_MB =
    ServiceConstants_Values_MAX_OBJECT_SIZE_MB;
  static constexpr Values MAX_CUSTOM_METADATA_FIELD_NAME_BYTES =
    ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_NAME_BYTES;
  static constexpr Values MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES =
    ServiceConstants_Values_MAX_CUSTOM_METADATA_FIELD_VALUE_BYTES;
  static constexpr Values MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES =
    ServiceConstants_Values_MAX_CUSTOM_METADATA_TOTAL_SIZE_BYTES;
  static constexpr Values MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES =
    ServiceConstants_Values_MAX_BUCKET_METADATA_TOTAL_SIZE_BYTES;
  static constexpr Values MAX_NOTIFICATION_CONFIGS_PER_BUCKET =
    ServiceConstants_Values_MAX_NOTIFICATION_CONFIGS_PER_BUCKET;
  static constexpr Values MAX_LIFECYCLE_RULES_PER_BUCKET =
    ServiceConstants_Values_MAX_LIFECYCLE_RULES_PER_BUCKET;
  static constexpr Values MAX_NOTIFICATION_CUSTOM_ATTRIBUTES =
    ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTES;
  static constexpr Values MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH =
    ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_KEY_LENGTH;
  static constexpr Values MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH =
    ServiceConstants_Values_MAX_NOTIFICATION_CUSTOM_ATTRIBUTE_VALUE_LENGTH;
  static constexpr Values MAX_LABELS_ENTRIES_COUNT =
    ServiceConstants_Values_MAX_LABELS_ENTRIES_COUNT;
  static constexpr Values MAX_LABELS_KEY_VALUE_LENGTH =
    ServiceConstants_Values_MAX_LABELS_KEY_VALUE_LENGTH;
  static constexpr Values MAX_LABELS_KEY_VALUE_BYTES =
    ServiceConstants_Values_MAX_LABELS_KEY_VALUE_BYTES;
  static constexpr Values MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST =
    ServiceConstants_Values_MAX_OBJECT_IDS_PER_DELETE_OBJECTS_REQUEST;
  static constexpr Values SPLIT_TOKEN_MAX_VALID_DAYS =
    ServiceConstants_Values_SPLIT_TOKEN_MAX_VALID_DAYS;
  static inline bool Values_IsValid(int value) {
    return ServiceConstants_Values_IsValid(value);
  }
  static constexpr Values Values_MIN =
    ServiceConstants_Values_Values_MIN;
  static constexpr Values Values_MAX =
    ServiceConstants_Values_Values_MAX;
  static constexpr int Values_ARRAYSIZE =
    ServiceConstants_Values_Values_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Values_descriptor() {
    return ServiceConstants_Values_descriptor();
  }
  template<typename T>
  static inline const std::string& Values_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Values>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Values_Name.");
    return ServiceConstants_Values_Name(enum_t_value);
  }
  static inline bool Values_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Values* value) {
    return ServiceConstants_Values_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.storage.v2.ServiceConstants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Billing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Billing) */ {
 public:
  inline Bucket_Billing() : Bucket_Billing(nullptr) {}
  virtual ~Bucket_Billing();
  explicit constexpr Bucket_Billing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Billing(const Bucket_Billing& from);
  Bucket_Billing(Bucket_Billing&& from) noexcept
    : Bucket_Billing() {
    *this = ::std::move(from);
  }

  inline Bucket_Billing& operator=(const Bucket_Billing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Billing& operator=(Bucket_Billing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Billing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Billing* internal_default_instance() {
    return reinterpret_cast<const Bucket_Billing*>(
               &_Bucket_Billing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Bucket_Billing& a, Bucket_Billing& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Billing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Billing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Billing* New() const final {
    return CreateMaybeMessage<Bucket_Billing>(nullptr);
  }

  Bucket_Billing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Billing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Billing& from);
  void MergeFrom(const Bucket_Billing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Billing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Billing";
  }
  protected:
  explicit Bucket_Billing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesterPaysFieldNumber = 1,
  };
  // bool requester_pays = 1;
  void clear_requester_pays();
  bool requester_pays() const;
  void set_requester_pays(bool value);
  private:
  bool _internal_requester_pays() const;
  void _internal_set_requester_pays(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Billing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool requester_pays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Cors PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Cors) */ {
 public:
  inline Bucket_Cors() : Bucket_Cors(nullptr) {}
  virtual ~Bucket_Cors();
  explicit constexpr Bucket_Cors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Cors(const Bucket_Cors& from);
  Bucket_Cors(Bucket_Cors&& from) noexcept
    : Bucket_Cors() {
    *this = ::std::move(from);
  }

  inline Bucket_Cors& operator=(const Bucket_Cors& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Cors& operator=(Bucket_Cors&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Cors& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Cors* internal_default_instance() {
    return reinterpret_cast<const Bucket_Cors*>(
               &_Bucket_Cors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Bucket_Cors& a, Bucket_Cors& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Cors* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Cors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Cors* New() const final {
    return CreateMaybeMessage<Bucket_Cors>(nullptr);
  }

  Bucket_Cors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Cors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Cors& from);
  void MergeFrom(const Bucket_Cors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Cors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Cors";
  }
  protected:
  explicit Bucket_Cors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kMethodFieldNumber = 2,
    kResponseHeaderFieldNumber = 3,
    kMaxAgeSecondsFieldNumber = 4,
  };
  // repeated string origin = 1;
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  const std::string& origin(int index) const;
  std::string* mutable_origin(int index);
  void set_origin(int index, const std::string& value);
  void set_origin(int index, std::string&& value);
  void set_origin(int index, const char* value);
  void set_origin(int index, const char* value, size_t size);
  std::string* add_origin();
  void add_origin(const std::string& value);
  void add_origin(std::string&& value);
  void add_origin(const char* value);
  void add_origin(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_origin();
  private:
  const std::string& _internal_origin(int index) const;
  std::string* _internal_add_origin();
  public:

  // repeated string method = 2;
  int method_size() const;
  private:
  int _internal_method_size() const;
  public:
  void clear_method();
  const std::string& method(int index) const;
  std::string* mutable_method(int index);
  void set_method(int index, const std::string& value);
  void set_method(int index, std::string&& value);
  void set_method(int index, const char* value);
  void set_method(int index, const char* value, size_t size);
  std::string* add_method();
  void add_method(const std::string& value);
  void add_method(std::string&& value);
  void add_method(const char* value);
  void add_method(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& method() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_method();
  private:
  const std::string& _internal_method(int index) const;
  std::string* _internal_add_method();
  public:

  // repeated string response_header = 3;
  int response_header_size() const;
  private:
  int _internal_response_header_size() const;
  public:
  void clear_response_header();
  const std::string& response_header(int index) const;
  std::string* mutable_response_header(int index);
  void set_response_header(int index, const std::string& value);
  void set_response_header(int index, std::string&& value);
  void set_response_header(int index, const char* value);
  void set_response_header(int index, const char* value, size_t size);
  std::string* add_response_header();
  void add_response_header(const std::string& value);
  void add_response_header(std::string&& value);
  void add_response_header(const char* value);
  void add_response_header(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& response_header() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_response_header();
  private:
  const std::string& _internal_response_header(int index) const;
  std::string* _internal_add_response_header();
  public:

  // int32 max_age_seconds = 4;
  void clear_max_age_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 max_age_seconds() const;
  void set_max_age_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_age_seconds() const;
  void _internal_set_max_age_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Cors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> origin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> method_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> response_header_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_age_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Encryption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Encryption) */ {
 public:
  inline Bucket_Encryption() : Bucket_Encryption(nullptr) {}
  virtual ~Bucket_Encryption();
  explicit constexpr Bucket_Encryption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Encryption(const Bucket_Encryption& from);
  Bucket_Encryption(Bucket_Encryption&& from) noexcept
    : Bucket_Encryption() {
    *this = ::std::move(from);
  }

  inline Bucket_Encryption& operator=(const Bucket_Encryption& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Encryption& operator=(Bucket_Encryption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Encryption& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Encryption* internal_default_instance() {
    return reinterpret_cast<const Bucket_Encryption*>(
               &_Bucket_Encryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Bucket_Encryption& a, Bucket_Encryption& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Encryption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Encryption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Encryption* New() const final {
    return CreateMaybeMessage<Bucket_Encryption>(nullptr);
  }

  Bucket_Encryption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Encryption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Encryption& from);
  void MergeFrom(const Bucket_Encryption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Encryption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Encryption";
  }
  protected:
  explicit Bucket_Encryption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultKmsKeyFieldNumber = 1,
  };
  // string default_kms_key = 1 [(.google.api.resource_reference) = {
  void clear_default_kms_key();
  const std::string& default_kms_key() const;
  void set_default_kms_key(const std::string& value);
  void set_default_kms_key(std::string&& value);
  void set_default_kms_key(const char* value);
  void set_default_kms_key(const char* value, size_t size);
  std::string* mutable_default_kms_key();
  std::string* release_default_kms_key();
  void set_allocated_default_kms_key(std::string* default_kms_key);
  private:
  const std::string& _internal_default_kms_key() const;
  void _internal_set_default_kms_key(const std::string& value);
  std::string* _internal_mutable_default_kms_key();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Encryption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_kms_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_IamConfig_UniformBucketLevelAccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess) */ {
 public:
  inline Bucket_IamConfig_UniformBucketLevelAccess() : Bucket_IamConfig_UniformBucketLevelAccess(nullptr) {}
  virtual ~Bucket_IamConfig_UniformBucketLevelAccess();
  explicit constexpr Bucket_IamConfig_UniformBucketLevelAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_IamConfig_UniformBucketLevelAccess(const Bucket_IamConfig_UniformBucketLevelAccess& from);
  Bucket_IamConfig_UniformBucketLevelAccess(Bucket_IamConfig_UniformBucketLevelAccess&& from) noexcept
    : Bucket_IamConfig_UniformBucketLevelAccess() {
    *this = ::std::move(from);
  }

  inline Bucket_IamConfig_UniformBucketLevelAccess& operator=(const Bucket_IamConfig_UniformBucketLevelAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_IamConfig_UniformBucketLevelAccess& operator=(Bucket_IamConfig_UniformBucketLevelAccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_IamConfig_UniformBucketLevelAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_IamConfig_UniformBucketLevelAccess* internal_default_instance() {
    return reinterpret_cast<const Bucket_IamConfig_UniformBucketLevelAccess*>(
               &_Bucket_IamConfig_UniformBucketLevelAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Bucket_IamConfig_UniformBucketLevelAccess& a, Bucket_IamConfig_UniformBucketLevelAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_IamConfig_UniformBucketLevelAccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_IamConfig_UniformBucketLevelAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_IamConfig_UniformBucketLevelAccess* New() const final {
    return CreateMaybeMessage<Bucket_IamConfig_UniformBucketLevelAccess>(nullptr);
  }

  Bucket_IamConfig_UniformBucketLevelAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_IamConfig_UniformBucketLevelAccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_IamConfig_UniformBucketLevelAccess& from);
  void MergeFrom(const Bucket_IamConfig_UniformBucketLevelAccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_IamConfig_UniformBucketLevelAccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess";
  }
  protected:
  explicit Bucket_IamConfig_UniformBucketLevelAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockTimeFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // .google.protobuf.Timestamp lock_time = 2;
  bool has_lock_time() const;
  private:
  bool _internal_has_lock_time() const;
  public:
  void clear_lock_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& lock_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_lock_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lock_time();
  void set_allocated_lock_time(PROTOBUF_NAMESPACE_ID::Timestamp* lock_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lock_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lock_time();
  public:
  void unsafe_arena_set_allocated_lock_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* lock_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lock_time();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* lock_time_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_IamConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.IamConfig) */ {
 public:
  inline Bucket_IamConfig() : Bucket_IamConfig(nullptr) {}
  virtual ~Bucket_IamConfig();
  explicit constexpr Bucket_IamConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_IamConfig(const Bucket_IamConfig& from);
  Bucket_IamConfig(Bucket_IamConfig&& from) noexcept
    : Bucket_IamConfig() {
    *this = ::std::move(from);
  }

  inline Bucket_IamConfig& operator=(const Bucket_IamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_IamConfig& operator=(Bucket_IamConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_IamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_IamConfig* internal_default_instance() {
    return reinterpret_cast<const Bucket_IamConfig*>(
               &_Bucket_IamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Bucket_IamConfig& a, Bucket_IamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_IamConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_IamConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_IamConfig* New() const final {
    return CreateMaybeMessage<Bucket_IamConfig>(nullptr);
  }

  Bucket_IamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_IamConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_IamConfig& from);
  void MergeFrom(const Bucket_IamConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_IamConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.IamConfig";
  }
  protected:
  explicit Bucket_IamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bucket_IamConfig_UniformBucketLevelAccess UniformBucketLevelAccess;

  typedef Bucket_IamConfig_PublicAccessPrevention PublicAccessPrevention;
  static constexpr PublicAccessPrevention PUBLIC_ACCESS_PREVENTION_UNSPECIFIED =
    Bucket_IamConfig_PublicAccessPrevention_PUBLIC_ACCESS_PREVENTION_UNSPECIFIED;
  static constexpr PublicAccessPrevention ENFORCED =
    Bucket_IamConfig_PublicAccessPrevention_ENFORCED;
  static inline bool PublicAccessPrevention_IsValid(int value) {
    return Bucket_IamConfig_PublicAccessPrevention_IsValid(value);
  }
  static constexpr PublicAccessPrevention PublicAccessPrevention_MIN =
    Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_MIN;
  static constexpr PublicAccessPrevention PublicAccessPrevention_MAX =
    Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_MAX;
  static constexpr int PublicAccessPrevention_ARRAYSIZE =
    Bucket_IamConfig_PublicAccessPrevention_PublicAccessPrevention_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PublicAccessPrevention_descriptor() {
    return Bucket_IamConfig_PublicAccessPrevention_descriptor();
  }
  template<typename T>
  static inline const std::string& PublicAccessPrevention_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PublicAccessPrevention>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PublicAccessPrevention_Name.");
    return Bucket_IamConfig_PublicAccessPrevention_Name(enum_t_value);
  }
  static inline bool PublicAccessPrevention_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PublicAccessPrevention* value) {
    return Bucket_IamConfig_PublicAccessPrevention_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUniformBucketLevelAccessFieldNumber = 1,
    kPublicAccessPreventionFieldNumber = 2,
  };
  // .google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess uniform_bucket_level_access = 1;
  bool has_uniform_bucket_level_access() const;
  private:
  bool _internal_has_uniform_bucket_level_access() const;
  public:
  void clear_uniform_bucket_level_access();
  const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& uniform_bucket_level_access() const;
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* release_uniform_bucket_level_access();
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* mutable_uniform_bucket_level_access();
  void set_allocated_uniform_bucket_level_access(::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access);
  private:
  const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& _internal_uniform_bucket_level_access() const;
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* _internal_mutable_uniform_bucket_level_access();
  public:
  void unsafe_arena_set_allocated_uniform_bucket_level_access(
      ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access);
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* unsafe_arena_release_uniform_bucket_level_access();

  // .google.storage.v2.Bucket.IamConfig.PublicAccessPrevention public_access_prevention = 2;
  void clear_public_access_prevention();
  ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention public_access_prevention() const;
  void set_public_access_prevention(::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention value);
  private:
  ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention _internal_public_access_prevention() const;
  void _internal_set_public_access_prevention(::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.IamConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access_;
  int public_access_prevention_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle_Rule_Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle.Rule.Action) */ {
 public:
  inline Bucket_Lifecycle_Rule_Action() : Bucket_Lifecycle_Rule_Action(nullptr) {}
  virtual ~Bucket_Lifecycle_Rule_Action();
  explicit constexpr Bucket_Lifecycle_Rule_Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle_Rule_Action(const Bucket_Lifecycle_Rule_Action& from);
  Bucket_Lifecycle_Rule_Action(Bucket_Lifecycle_Rule_Action&& from) noexcept
    : Bucket_Lifecycle_Rule_Action() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle_Rule_Action& operator=(const Bucket_Lifecycle_Rule_Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle_Rule_Action& operator=(Bucket_Lifecycle_Rule_Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Lifecycle_Rule_Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle_Rule_Action* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle_Rule_Action*>(
               &_Bucket_Lifecycle_Rule_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Bucket_Lifecycle_Rule_Action& a, Bucket_Lifecycle_Rule_Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle_Rule_Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle_Rule_Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Lifecycle_Rule_Action* New() const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule_Action>(nullptr);
  }

  Bucket_Lifecycle_Rule_Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule_Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Lifecycle_Rule_Action& from);
  void MergeFrom(const Bucket_Lifecycle_Rule_Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle_Rule_Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle.Rule.Action";
  }
  protected:
  explicit Bucket_Lifecycle_Rule_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStorageClassFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string storage_class = 2;
  void clear_storage_class();
  const std::string& storage_class() const;
  void set_storage_class(const std::string& value);
  void set_storage_class(std::string&& value);
  void set_storage_class(const char* value);
  void set_storage_class(const char* value, size_t size);
  std::string* mutable_storage_class();
  std::string* release_storage_class();
  void set_allocated_storage_class(std::string* storage_class);
  private:
  const std::string& _internal_storage_class() const;
  void _internal_set_storage_class(const std::string& value);
  std::string* _internal_mutable_storage_class();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle.Rule.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_class_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle_Rule_Condition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle.Rule.Condition) */ {
 public:
  inline Bucket_Lifecycle_Rule_Condition() : Bucket_Lifecycle_Rule_Condition(nullptr) {}
  virtual ~Bucket_Lifecycle_Rule_Condition();
  explicit constexpr Bucket_Lifecycle_Rule_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle_Rule_Condition(const Bucket_Lifecycle_Rule_Condition& from);
  Bucket_Lifecycle_Rule_Condition(Bucket_Lifecycle_Rule_Condition&& from) noexcept
    : Bucket_Lifecycle_Rule_Condition() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle_Rule_Condition& operator=(const Bucket_Lifecycle_Rule_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle_Rule_Condition& operator=(Bucket_Lifecycle_Rule_Condition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Lifecycle_Rule_Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle_Rule_Condition* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle_Rule_Condition*>(
               &_Bucket_Lifecycle_Rule_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Bucket_Lifecycle_Rule_Condition& a, Bucket_Lifecycle_Rule_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle_Rule_Condition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle_Rule_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Lifecycle_Rule_Condition* New() const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule_Condition>(nullptr);
  }

  Bucket_Lifecycle_Rule_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule_Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Lifecycle_Rule_Condition& from);
  void MergeFrom(const Bucket_Lifecycle_Rule_Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle_Rule_Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle.Rule.Condition";
  }
  protected:
  explicit Bucket_Lifecycle_Rule_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesStorageClassFieldNumber = 5,
    kMatchesPatternFieldNumber = 6,
    kCreatedBeforeTimeFieldNumber = 2,
    kCustomTimeBeforeTimeFieldNumber = 8,
    kNoncurrentTimeBeforeTimeFieldNumber = 10,
    kAgeDaysFieldNumber = 1,
    kIsLiveFieldNumber = 3,
    kNumNewerVersionsFieldNumber = 4,
    kDaysSinceCustomTimeFieldNumber = 7,
    kDaysSinceNoncurrentTimeFieldNumber = 9,
  };
  // repeated string matches_storage_class = 5;
  int matches_storage_class_size() const;
  private:
  int _internal_matches_storage_class_size() const;
  public:
  void clear_matches_storage_class();
  const std::string& matches_storage_class(int index) const;
  std::string* mutable_matches_storage_class(int index);
  void set_matches_storage_class(int index, const std::string& value);
  void set_matches_storage_class(int index, std::string&& value);
  void set_matches_storage_class(int index, const char* value);
  void set_matches_storage_class(int index, const char* value, size_t size);
  std::string* add_matches_storage_class();
  void add_matches_storage_class(const std::string& value);
  void add_matches_storage_class(std::string&& value);
  void add_matches_storage_class(const char* value);
  void add_matches_storage_class(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matches_storage_class() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matches_storage_class();
  private:
  const std::string& _internal_matches_storage_class(int index) const;
  std::string* _internal_add_matches_storage_class();
  public:

  // string matches_pattern = 6;
  void clear_matches_pattern();
  const std::string& matches_pattern() const;
  void set_matches_pattern(const std::string& value);
  void set_matches_pattern(std::string&& value);
  void set_matches_pattern(const char* value);
  void set_matches_pattern(const char* value, size_t size);
  std::string* mutable_matches_pattern();
  std::string* release_matches_pattern();
  void set_allocated_matches_pattern(std::string* matches_pattern);
  private:
  const std::string& _internal_matches_pattern() const;
  void _internal_set_matches_pattern(const std::string& value);
  std::string* _internal_mutable_matches_pattern();
  public:

  // .google.protobuf.Timestamp created_before_time = 2;
  bool has_created_before_time() const;
  private:
  bool _internal_has_created_before_time() const;
  public:
  void clear_created_before_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_before_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_before_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_before_time();
  void set_allocated_created_before_time(PROTOBUF_NAMESPACE_ID::Timestamp* created_before_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_before_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_before_time();
  public:
  void unsafe_arena_set_allocated_created_before_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_before_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_before_time();

  // .google.protobuf.Timestamp custom_time_before_time = 8;
  bool has_custom_time_before_time() const;
  private:
  bool _internal_has_custom_time_before_time() const;
  public:
  void clear_custom_time_before_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& custom_time_before_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_custom_time_before_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_custom_time_before_time();
  void set_allocated_custom_time_before_time(PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_before_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_custom_time_before_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_custom_time_before_time();
  public:
  void unsafe_arena_set_allocated_custom_time_before_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_before_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_custom_time_before_time();

  // .google.protobuf.Timestamp noncurrent_time_before_time = 10;
  bool has_noncurrent_time_before_time() const;
  private:
  bool _internal_has_noncurrent_time_before_time() const;
  public:
  void clear_noncurrent_time_before_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& noncurrent_time_before_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_noncurrent_time_before_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_noncurrent_time_before_time();
  void set_allocated_noncurrent_time_before_time(PROTOBUF_NAMESPACE_ID::Timestamp* noncurrent_time_before_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_noncurrent_time_before_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_noncurrent_time_before_time();
  public:
  void unsafe_arena_set_allocated_noncurrent_time_before_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* noncurrent_time_before_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_noncurrent_time_before_time();

  // int32 age_days = 1;
  void clear_age_days();
  ::PROTOBUF_NAMESPACE_ID::int32 age_days() const;
  void set_age_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age_days() const;
  void _internal_set_age_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_live = 3;
  bool has_is_live() const;
  private:
  bool _internal_has_is_live() const;
  public:
  void clear_is_live();
  bool is_live() const;
  void set_is_live(bool value);
  private:
  bool _internal_is_live() const;
  void _internal_set_is_live(bool value);
  public:

  // int32 num_newer_versions = 4;
  void clear_num_newer_versions();
  ::PROTOBUF_NAMESPACE_ID::int32 num_newer_versions() const;
  void set_num_newer_versions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_newer_versions() const;
  void _internal_set_num_newer_versions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 days_since_custom_time = 7;
  void clear_days_since_custom_time();
  ::PROTOBUF_NAMESPACE_ID::int32 days_since_custom_time() const;
  void set_days_since_custom_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days_since_custom_time() const;
  void _internal_set_days_since_custom_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 days_since_noncurrent_time = 9;
  void clear_days_since_noncurrent_time();
  ::PROTOBUF_NAMESPACE_ID::int32 days_since_noncurrent_time() const;
  void set_days_since_noncurrent_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days_since_noncurrent_time() const;
  void _internal_set_days_since_noncurrent_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle.Rule.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matches_storage_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_pattern_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_before_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_before_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* noncurrent_time_before_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_days_;
  bool is_live_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_newer_versions_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_since_custom_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_since_noncurrent_time_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle_Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle.Rule) */ {
 public:
  inline Bucket_Lifecycle_Rule() : Bucket_Lifecycle_Rule(nullptr) {}
  virtual ~Bucket_Lifecycle_Rule();
  explicit constexpr Bucket_Lifecycle_Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle_Rule(const Bucket_Lifecycle_Rule& from);
  Bucket_Lifecycle_Rule(Bucket_Lifecycle_Rule&& from) noexcept
    : Bucket_Lifecycle_Rule() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle_Rule& operator=(const Bucket_Lifecycle_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle_Rule& operator=(Bucket_Lifecycle_Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Lifecycle_Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle_Rule* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle_Rule*>(
               &_Bucket_Lifecycle_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Bucket_Lifecycle_Rule& a, Bucket_Lifecycle_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle_Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle_Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Lifecycle_Rule* New() const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule>(nullptr);
  }

  Bucket_Lifecycle_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Lifecycle_Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Lifecycle_Rule& from);
  void MergeFrom(const Bucket_Lifecycle_Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle_Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle.Rule";
  }
  protected:
  explicit Bucket_Lifecycle_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bucket_Lifecycle_Rule_Action Action;
  typedef Bucket_Lifecycle_Rule_Condition Condition;

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kConditionFieldNumber = 2,
  };
  // .google.storage.v2.Bucket.Lifecycle.Rule.Action action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& action() const;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* release_action();
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* mutable_action();
  void set_allocated_action(::google::storage::v2::Bucket_Lifecycle_Rule_Action* action);
  private:
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& _internal_action() const;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::google::storage::v2::Bucket_Lifecycle_Rule_Action* action);
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* unsafe_arena_release_action();

  // .google.storage.v2.Bucket.Lifecycle.Rule.Condition condition = 2;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& condition() const;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* release_condition();
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* mutable_condition();
  void set_allocated_condition(::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition);
  private:
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& _internal_condition() const;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition);
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* action_;
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Lifecycle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Lifecycle) */ {
 public:
  inline Bucket_Lifecycle() : Bucket_Lifecycle(nullptr) {}
  virtual ~Bucket_Lifecycle();
  explicit constexpr Bucket_Lifecycle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Lifecycle(const Bucket_Lifecycle& from);
  Bucket_Lifecycle(Bucket_Lifecycle&& from) noexcept
    : Bucket_Lifecycle() {
    *this = ::std::move(from);
  }

  inline Bucket_Lifecycle& operator=(const Bucket_Lifecycle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Lifecycle& operator=(Bucket_Lifecycle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Lifecycle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Lifecycle* internal_default_instance() {
    return reinterpret_cast<const Bucket_Lifecycle*>(
               &_Bucket_Lifecycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Bucket_Lifecycle& a, Bucket_Lifecycle& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Lifecycle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Lifecycle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Lifecycle* New() const final {
    return CreateMaybeMessage<Bucket_Lifecycle>(nullptr);
  }

  Bucket_Lifecycle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Lifecycle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Lifecycle& from);
  void MergeFrom(const Bucket_Lifecycle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Lifecycle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Lifecycle";
  }
  protected:
  explicit Bucket_Lifecycle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bucket_Lifecycle_Rule Rule;

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFieldNumber = 1,
  };
  // repeated .google.storage.v2.Bucket.Lifecycle.Rule rule = 1;
  int rule_size() const;
  private:
  int _internal_rule_size() const;
  public:
  void clear_rule();
  ::google::storage::v2::Bucket_Lifecycle_Rule* mutable_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >*
      mutable_rule();
  private:
  const ::google::storage::v2::Bucket_Lifecycle_Rule& _internal_rule(int index) const;
  ::google::storage::v2::Bucket_Lifecycle_Rule* _internal_add_rule();
  public:
  const ::google::storage::v2::Bucket_Lifecycle_Rule& rule(int index) const;
  ::google::storage::v2::Bucket_Lifecycle_Rule* add_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >&
      rule() const;

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Lifecycle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule > rule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Logging PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Logging) */ {
 public:
  inline Bucket_Logging() : Bucket_Logging(nullptr) {}
  virtual ~Bucket_Logging();
  explicit constexpr Bucket_Logging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Logging(const Bucket_Logging& from);
  Bucket_Logging(Bucket_Logging&& from) noexcept
    : Bucket_Logging() {
    *this = ::std::move(from);
  }

  inline Bucket_Logging& operator=(const Bucket_Logging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Logging& operator=(Bucket_Logging&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Logging& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Logging* internal_default_instance() {
    return reinterpret_cast<const Bucket_Logging*>(
               &_Bucket_Logging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Bucket_Logging& a, Bucket_Logging& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Logging* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Logging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Logging* New() const final {
    return CreateMaybeMessage<Bucket_Logging>(nullptr);
  }

  Bucket_Logging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Logging>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Logging& from);
  void MergeFrom(const Bucket_Logging& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Logging* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Logging";
  }
  protected:
  explicit Bucket_Logging(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogBucketFieldNumber = 1,
    kLogObjectPrefixFieldNumber = 2,
  };
  // string log_bucket = 1;
  void clear_log_bucket();
  const std::string& log_bucket() const;
  void set_log_bucket(const std::string& value);
  void set_log_bucket(std::string&& value);
  void set_log_bucket(const char* value);
  void set_log_bucket(const char* value, size_t size);
  std::string* mutable_log_bucket();
  std::string* release_log_bucket();
  void set_allocated_log_bucket(std::string* log_bucket);
  private:
  const std::string& _internal_log_bucket() const;
  void _internal_set_log_bucket(const std::string& value);
  std::string* _internal_mutable_log_bucket();
  public:

  // string log_object_prefix = 2;
  void clear_log_object_prefix();
  const std::string& log_object_prefix() const;
  void set_log_object_prefix(const std::string& value);
  void set_log_object_prefix(std::string&& value);
  void set_log_object_prefix(const char* value);
  void set_log_object_prefix(const char* value, size_t size);
  std::string* mutable_log_object_prefix();
  std::string* release_log_object_prefix();
  void set_allocated_log_object_prefix(std::string* log_object_prefix);
  private:
  const std::string& _internal_log_object_prefix() const;
  void _internal_set_log_object_prefix(const std::string& value);
  std::string* _internal_mutable_log_object_prefix();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Logging)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_object_prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_RetentionPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.RetentionPolicy) */ {
 public:
  inline Bucket_RetentionPolicy() : Bucket_RetentionPolicy(nullptr) {}
  virtual ~Bucket_RetentionPolicy();
  explicit constexpr Bucket_RetentionPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_RetentionPolicy(const Bucket_RetentionPolicy& from);
  Bucket_RetentionPolicy(Bucket_RetentionPolicy&& from) noexcept
    : Bucket_RetentionPolicy() {
    *this = ::std::move(from);
  }

  inline Bucket_RetentionPolicy& operator=(const Bucket_RetentionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_RetentionPolicy& operator=(Bucket_RetentionPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_RetentionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_RetentionPolicy* internal_default_instance() {
    return reinterpret_cast<const Bucket_RetentionPolicy*>(
               &_Bucket_RetentionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Bucket_RetentionPolicy& a, Bucket_RetentionPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_RetentionPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_RetentionPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_RetentionPolicy* New() const final {
    return CreateMaybeMessage<Bucket_RetentionPolicy>(nullptr);
  }

  Bucket_RetentionPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_RetentionPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_RetentionPolicy& from);
  void MergeFrom(const Bucket_RetentionPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_RetentionPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.RetentionPolicy";
  }
  protected:
  explicit Bucket_RetentionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveTimeFieldNumber = 1,
    kRetentionPeriodFieldNumber = 3,
    kIsLockedFieldNumber = 2,
  };
  // .google.protobuf.Timestamp effective_time = 1;
  bool has_effective_time() const;
  private:
  bool _internal_has_effective_time() const;
  public:
  void clear_effective_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& effective_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_effective_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_effective_time();
  void set_allocated_effective_time(PROTOBUF_NAMESPACE_ID::Timestamp* effective_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_effective_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_effective_time();
  public:
  void unsafe_arena_set_allocated_effective_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* effective_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_effective_time();

  // int64 retention_period = 3;
  void clear_retention_period();
  ::PROTOBUF_NAMESPACE_ID::int64 retention_period() const;
  void set_retention_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_retention_period() const;
  void _internal_set_retention_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_locked = 2;
  void clear_is_locked();
  bool is_locked() const;
  void set_is_locked(bool value);
  private:
  bool _internal_is_locked() const;
  void _internal_set_is_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.RetentionPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* effective_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 retention_period_;
  bool is_locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Versioning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Versioning) */ {
 public:
  inline Bucket_Versioning() : Bucket_Versioning(nullptr) {}
  virtual ~Bucket_Versioning();
  explicit constexpr Bucket_Versioning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Versioning(const Bucket_Versioning& from);
  Bucket_Versioning(Bucket_Versioning&& from) noexcept
    : Bucket_Versioning() {
    *this = ::std::move(from);
  }

  inline Bucket_Versioning& operator=(const Bucket_Versioning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Versioning& operator=(Bucket_Versioning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Versioning& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Versioning* internal_default_instance() {
    return reinterpret_cast<const Bucket_Versioning*>(
               &_Bucket_Versioning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Bucket_Versioning& a, Bucket_Versioning& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Versioning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Versioning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Versioning* New() const final {
    return CreateMaybeMessage<Bucket_Versioning>(nullptr);
  }

  Bucket_Versioning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Versioning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Versioning& from);
  void MergeFrom(const Bucket_Versioning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Versioning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Versioning";
  }
  protected:
  explicit Bucket_Versioning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Versioning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_Website PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket.Website) */ {
 public:
  inline Bucket_Website() : Bucket_Website(nullptr) {}
  virtual ~Bucket_Website();
  explicit constexpr Bucket_Website(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket_Website(const Bucket_Website& from);
  Bucket_Website(Bucket_Website&& from) noexcept
    : Bucket_Website() {
    *this = ::std::move(from);
  }

  inline Bucket_Website& operator=(const Bucket_Website& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket_Website& operator=(Bucket_Website&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket_Website& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket_Website* internal_default_instance() {
    return reinterpret_cast<const Bucket_Website*>(
               &_Bucket_Website_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Bucket_Website& a, Bucket_Website& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket_Website* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket_Website* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket_Website* New() const final {
    return CreateMaybeMessage<Bucket_Website>(nullptr);
  }

  Bucket_Website* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket_Website>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket_Website& from);
  void MergeFrom(const Bucket_Website& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket_Website* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket.Website";
  }
  protected:
  explicit Bucket_Website(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPageSuffixFieldNumber = 1,
    kNotFoundPageFieldNumber = 2,
  };
  // string main_page_suffix = 1;
  void clear_main_page_suffix();
  const std::string& main_page_suffix() const;
  void set_main_page_suffix(const std::string& value);
  void set_main_page_suffix(std::string&& value);
  void set_main_page_suffix(const char* value);
  void set_main_page_suffix(const char* value, size_t size);
  std::string* mutable_main_page_suffix();
  std::string* release_main_page_suffix();
  void set_allocated_main_page_suffix(std::string* main_page_suffix);
  private:
  const std::string& _internal_main_page_suffix() const;
  void _internal_set_main_page_suffix(const std::string& value);
  std::string* _internal_mutable_main_page_suffix();
  public:

  // string not_found_page = 2;
  void clear_not_found_page();
  const std::string& not_found_page() const;
  void set_not_found_page(const std::string& value);
  void set_not_found_page(std::string&& value);
  void set_not_found_page(const char* value);
  void set_not_found_page(const char* value, size_t size);
  std::string* mutable_not_found_page();
  std::string* release_not_found_page();
  void set_allocated_not_found_page(std::string* not_found_page);
  private:
  const std::string& _internal_not_found_page() const;
  void _internal_set_not_found_page(const std::string& value);
  std::string* _internal_mutable_not_found_page();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket.Website)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_page_suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_found_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Bucket_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Bucket_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Bucket_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Bucket_LabelsEntry_DoNotUse();
  explicit constexpr Bucket_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Bucket_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Bucket_LabelsEntry_DoNotUse& other);
  static const Bucket_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Bucket_LabelsEntry_DoNotUse*>(&_Bucket_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Bucket.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Bucket.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto);
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto.file_level_metadata[25];
  }

  public:
};

// -------------------------------------------------------------------

class Bucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Bucket) */ {
 public:
  inline Bucket() : Bucket(nullptr) {}
  virtual ~Bucket();
  explicit constexpr Bucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bucket(const Bucket& from);
  Bucket(Bucket&& from) noexcept
    : Bucket() {
    *this = ::std::move(from);
  }

  inline Bucket& operator=(const Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bucket& operator=(Bucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bucket* internal_default_instance() {
    return reinterpret_cast<const Bucket*>(
               &_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Bucket& a, Bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(Bucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bucket* New() const final {
    return CreateMaybeMessage<Bucket>(nullptr);
  }

  Bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bucket& from);
  void MergeFrom(const Bucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Bucket";
  }
  protected:
  explicit Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bucket_Billing Billing;
  typedef Bucket_Cors Cors;
  typedef Bucket_Encryption Encryption;
  typedef Bucket_IamConfig IamConfig;
  typedef Bucket_Lifecycle Lifecycle;
  typedef Bucket_Logging Logging;
  typedef Bucket_RetentionPolicy RetentionPolicy;
  typedef Bucket_Versioning Versioning;
  typedef Bucket_Website Website;

  // accessors -------------------------------------------------------

  enum : int {
    kAclFieldNumber = 8,
    kDefaultObjectAclFieldNumber = 9,
    kCorsFieldNumber = 12,
    kLabelsFieldNumber = 15,
    kZoneAffinityFieldNumber = 24,
    kNameFieldNumber = 1,
    kBucketIdFieldNumber = 2,
    kProjectFieldNumber = 3,
    kLocationFieldNumber = 5,
    kLocationTypeFieldNumber = 6,
    kStorageClassFieldNumber = 7,
    kLifecycleFieldNumber = 10,
    kCreateTimeFieldNumber = 11,
    kUpdateTimeFieldNumber = 13,
    kWebsiteFieldNumber = 16,
    kVersioningFieldNumber = 17,
    kLoggingFieldNumber = 18,
    kOwnerFieldNumber = 19,
    kEncryptionFieldNumber = 20,
    kBillingFieldNumber = 21,
    kRetentionPolicyFieldNumber = 22,
    kIamConfigFieldNumber = 23,
    kMetagenerationFieldNumber = 4,
    kDefaultEventBasedHoldFieldNumber = 14,
    kSatisfiesPzsFieldNumber = 25,
  };
  // repeated .google.storage.v2.BucketAccessControl acl = 8;
  int acl_size() const;
  private:
  int _internal_acl_size() const;
  public:
  void clear_acl();
  ::google::storage::v2::BucketAccessControl* mutable_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >*
      mutable_acl();
  private:
  const ::google::storage::v2::BucketAccessControl& _internal_acl(int index) const;
  ::google::storage::v2::BucketAccessControl* _internal_add_acl();
  public:
  const ::google::storage::v2::BucketAccessControl& acl(int index) const;
  ::google::storage::v2::BucketAccessControl* add_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >&
      acl() const;

  // repeated .google.storage.v2.ObjectAccessControl default_object_acl = 9;
  int default_object_acl_size() const;
  private:
  int _internal_default_object_acl_size() const;
  public:
  void clear_default_object_acl();
  ::google::storage::v2::ObjectAccessControl* mutable_default_object_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
      mutable_default_object_acl();
  private:
  const ::google::storage::v2::ObjectAccessControl& _internal_default_object_acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* _internal_add_default_object_acl();
  public:
  const ::google::storage::v2::ObjectAccessControl& default_object_acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* add_default_object_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
      default_object_acl() const;

  // repeated .google.storage.v2.Bucket.Cors cors = 12;
  int cors_size() const;
  private:
  int _internal_cors_size() const;
  public:
  void clear_cors();
  ::google::storage::v2::Bucket_Cors* mutable_cors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >*
      mutable_cors();
  private:
  const ::google::storage::v2::Bucket_Cors& _internal_cors(int index) const;
  ::google::storage::v2::Bucket_Cors* _internal_add_cors();
  public:
  const ::google::storage::v2::Bucket_Cors& cors(int index) const;
  ::google::storage::v2::Bucket_Cors* add_cors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >&
      cors() const;

  // map<string, string> labels = 15;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // repeated string zone_affinity = 24 [(.google.api.field_behavior) = IMMUTABLE];
  int zone_affinity_size() const;
  private:
  int _internal_zone_affinity_size() const;
  public:
  void clear_zone_affinity();
  const std::string& zone_affinity(int index) const;
  std::string* mutable_zone_affinity(int index);
  void set_zone_affinity(int index, const std::string& value);
  void set_zone_affinity(int index, std::string&& value);
  void set_zone_affinity(int index, const char* value);
  void set_zone_affinity(int index, const char* value, size_t size);
  std::string* add_zone_affinity();
  void add_zone_affinity(const std::string& value);
  void add_zone_affinity(std::string&& value);
  void add_zone_affinity(const char* value);
  void add_zone_affinity(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& zone_affinity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_zone_affinity();
  private:
  const std::string& _internal_zone_affinity(int index) const;
  std::string* _internal_add_zone_affinity();
  public:

  // string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bucket_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_bucket_id();
  const std::string& bucket_id() const;
  void set_bucket_id(const std::string& value);
  void set_bucket_id(std::string&& value);
  void set_bucket_id(const char* value);
  void set_bucket_id(const char* value, size_t size);
  std::string* mutable_bucket_id();
  std::string* release_bucket_id();
  void set_allocated_bucket_id(std::string* bucket_id);
  private:
  const std::string& _internal_bucket_id() const;
  void _internal_set_bucket_id(const std::string& value);
  std::string* _internal_mutable_bucket_id();
  public:

  // string project = 3 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_project();
  const std::string& project() const;
  void set_project(const std::string& value);
  void set_project(std::string&& value);
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  std::string* mutable_project();
  std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string location = 5 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string location_type = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_location_type();
  const std::string& location_type() const;
  void set_location_type(const std::string& value);
  void set_location_type(std::string&& value);
  void set_location_type(const char* value);
  void set_location_type(const char* value, size_t size);
  std::string* mutable_location_type();
  std::string* release_location_type();
  void set_allocated_location_type(std::string* location_type);
  private:
  const std::string& _internal_location_type() const;
  void _internal_set_location_type(const std::string& value);
  std::string* _internal_mutable_location_type();
  public:

  // string storage_class = 7;
  void clear_storage_class();
  const std::string& storage_class() const;
  void set_storage_class(const std::string& value);
  void set_storage_class(std::string&& value);
  void set_storage_class(const char* value);
  void set_storage_class(const char* value, size_t size);
  std::string* mutable_storage_class();
  std::string* release_storage_class();
  void set_allocated_storage_class(std::string* storage_class);
  private:
  const std::string& _internal_storage_class() const;
  void _internal_set_storage_class(const std::string& value);
  std::string* _internal_mutable_storage_class();
  public:

  // .google.storage.v2.Bucket.Lifecycle lifecycle = 10;
  bool has_lifecycle() const;
  private:
  bool _internal_has_lifecycle() const;
  public:
  void clear_lifecycle();
  const ::google::storage::v2::Bucket_Lifecycle& lifecycle() const;
  ::google::storage::v2::Bucket_Lifecycle* release_lifecycle();
  ::google::storage::v2::Bucket_Lifecycle* mutable_lifecycle();
  void set_allocated_lifecycle(::google::storage::v2::Bucket_Lifecycle* lifecycle);
  private:
  const ::google::storage::v2::Bucket_Lifecycle& _internal_lifecycle() const;
  ::google::storage::v2::Bucket_Lifecycle* _internal_mutable_lifecycle();
  public:
  void unsafe_arena_set_allocated_lifecycle(
      ::google::storage::v2::Bucket_Lifecycle* lifecycle);
  ::google::storage::v2::Bucket_Lifecycle* unsafe_arena_release_lifecycle();

  // .google.protobuf.Timestamp create_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.storage.v2.Bucket.Website website = 16;
  bool has_website() const;
  private:
  bool _internal_has_website() const;
  public:
  void clear_website();
  const ::google::storage::v2::Bucket_Website& website() const;
  ::google::storage::v2::Bucket_Website* release_website();
  ::google::storage::v2::Bucket_Website* mutable_website();
  void set_allocated_website(::google::storage::v2::Bucket_Website* website);
  private:
  const ::google::storage::v2::Bucket_Website& _internal_website() const;
  ::google::storage::v2::Bucket_Website* _internal_mutable_website();
  public:
  void unsafe_arena_set_allocated_website(
      ::google::storage::v2::Bucket_Website* website);
  ::google::storage::v2::Bucket_Website* unsafe_arena_release_website();

  // .google.storage.v2.Bucket.Versioning versioning = 17;
  bool has_versioning() const;
  private:
  bool _internal_has_versioning() const;
  public:
  void clear_versioning();
  const ::google::storage::v2::Bucket_Versioning& versioning() const;
  ::google::storage::v2::Bucket_Versioning* release_versioning();
  ::google::storage::v2::Bucket_Versioning* mutable_versioning();
  void set_allocated_versioning(::google::storage::v2::Bucket_Versioning* versioning);
  private:
  const ::google::storage::v2::Bucket_Versioning& _internal_versioning() const;
  ::google::storage::v2::Bucket_Versioning* _internal_mutable_versioning();
  public:
  void unsafe_arena_set_allocated_versioning(
      ::google::storage::v2::Bucket_Versioning* versioning);
  ::google::storage::v2::Bucket_Versioning* unsafe_arena_release_versioning();

  // .google.storage.v2.Bucket.Logging logging = 18;
  bool has_logging() const;
  private:
  bool _internal_has_logging() const;
  public:
  void clear_logging();
  const ::google::storage::v2::Bucket_Logging& logging() const;
  ::google::storage::v2::Bucket_Logging* release_logging();
  ::google::storage::v2::Bucket_Logging* mutable_logging();
  void set_allocated_logging(::google::storage::v2::Bucket_Logging* logging);
  private:
  const ::google::storage::v2::Bucket_Logging& _internal_logging() const;
  ::google::storage::v2::Bucket_Logging* _internal_mutable_logging();
  public:
  void unsafe_arena_set_allocated_logging(
      ::google::storage::v2::Bucket_Logging* logging);
  ::google::storage::v2::Bucket_Logging* unsafe_arena_release_logging();

  // .google.storage.v2.Owner owner = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::google::storage::v2::Owner& owner() const;
  ::google::storage::v2::Owner* release_owner();
  ::google::storage::v2::Owner* mutable_owner();
  void set_allocated_owner(::google::storage::v2::Owner* owner);
  private:
  const ::google::storage::v2::Owner& _internal_owner() const;
  ::google::storage::v2::Owner* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::google::storage::v2::Owner* owner);
  ::google::storage::v2::Owner* unsafe_arena_release_owner();

  // .google.storage.v2.Bucket.Encryption encryption = 20;
  bool has_encryption() const;
  private:
  bool _internal_has_encryption() const;
  public:
  void clear_encryption();
  const ::google::storage::v2::Bucket_Encryption& encryption() const;
  ::google::storage::v2::Bucket_Encryption* release_encryption();
  ::google::storage::v2::Bucket_Encryption* mutable_encryption();
  void set_allocated_encryption(::google::storage::v2::Bucket_Encryption* encryption);
  private:
  const ::google::storage::v2::Bucket_Encryption& _internal_encryption() const;
  ::google::storage::v2::Bucket_Encryption* _internal_mutable_encryption();
  public:
  void unsafe_arena_set_allocated_encryption(
      ::google::storage::v2::Bucket_Encryption* encryption);
  ::google::storage::v2::Bucket_Encryption* unsafe_arena_release_encryption();

  // .google.storage.v2.Bucket.Billing billing = 21;
  bool has_billing() const;
  private:
  bool _internal_has_billing() const;
  public:
  void clear_billing();
  const ::google::storage::v2::Bucket_Billing& billing() const;
  ::google::storage::v2::Bucket_Billing* release_billing();
  ::google::storage::v2::Bucket_Billing* mutable_billing();
  void set_allocated_billing(::google::storage::v2::Bucket_Billing* billing);
  private:
  const ::google::storage::v2::Bucket_Billing& _internal_billing() const;
  ::google::storage::v2::Bucket_Billing* _internal_mutable_billing();
  public:
  void unsafe_arena_set_allocated_billing(
      ::google::storage::v2::Bucket_Billing* billing);
  ::google::storage::v2::Bucket_Billing* unsafe_arena_release_billing();

  // .google.storage.v2.Bucket.RetentionPolicy retention_policy = 22;
  bool has_retention_policy() const;
  private:
  bool _internal_has_retention_policy() const;
  public:
  void clear_retention_policy();
  const ::google::storage::v2::Bucket_RetentionPolicy& retention_policy() const;
  ::google::storage::v2::Bucket_RetentionPolicy* release_retention_policy();
  ::google::storage::v2::Bucket_RetentionPolicy* mutable_retention_policy();
  void set_allocated_retention_policy(::google::storage::v2::Bucket_RetentionPolicy* retention_policy);
  private:
  const ::google::storage::v2::Bucket_RetentionPolicy& _internal_retention_policy() const;
  ::google::storage::v2::Bucket_RetentionPolicy* _internal_mutable_retention_policy();
  public:
  void unsafe_arena_set_allocated_retention_policy(
      ::google::storage::v2::Bucket_RetentionPolicy* retention_policy);
  ::google::storage::v2::Bucket_RetentionPolicy* unsafe_arena_release_retention_policy();

  // .google.storage.v2.Bucket.IamConfig iam_config = 23;
  bool has_iam_config() const;
  private:
  bool _internal_has_iam_config() const;
  public:
  void clear_iam_config();
  const ::google::storage::v2::Bucket_IamConfig& iam_config() const;
  ::google::storage::v2::Bucket_IamConfig* release_iam_config();
  ::google::storage::v2::Bucket_IamConfig* mutable_iam_config();
  void set_allocated_iam_config(::google::storage::v2::Bucket_IamConfig* iam_config);
  private:
  const ::google::storage::v2::Bucket_IamConfig& _internal_iam_config() const;
  ::google::storage::v2::Bucket_IamConfig* _internal_mutable_iam_config();
  public:
  void unsafe_arena_set_allocated_iam_config(
      ::google::storage::v2::Bucket_IamConfig* iam_config);
  ::google::storage::v2::Bucket_IamConfig* unsafe_arena_release_iam_config();

  // int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_metageneration();
  ::PROTOBUF_NAMESPACE_ID::int64 metageneration() const;
  void set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_metageneration() const;
  void _internal_set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool default_event_based_hold = 14;
  void clear_default_event_based_hold();
  bool default_event_based_hold() const;
  void set_default_event_based_hold(bool value);
  private:
  bool _internal_default_event_based_hold() const;
  void _internal_set_default_event_based_hold(bool value);
  public:

  // bool satisfies_pzs = 25;
  void clear_satisfies_pzs();
  bool satisfies_pzs() const;
  void set_satisfies_pzs(bool value);
  private:
  bool _internal_satisfies_pzs() const;
  void _internal_set_satisfies_pzs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Bucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl > acl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl > default_object_acl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors > cors_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Bucket_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> zone_affinity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_class_;
  ::google::storage::v2::Bucket_Lifecycle* lifecycle_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  ::google::storage::v2::Bucket_Website* website_;
  ::google::storage::v2::Bucket_Versioning* versioning_;
  ::google::storage::v2::Bucket_Logging* logging_;
  ::google::storage::v2::Owner* owner_;
  ::google::storage::v2::Bucket_Encryption* encryption_;
  ::google::storage::v2::Bucket_Billing* billing_;
  ::google::storage::v2::Bucket_RetentionPolicy* retention_policy_;
  ::google::storage::v2::Bucket_IamConfig* iam_config_;
  ::PROTOBUF_NAMESPACE_ID::int64 metageneration_;
  bool default_event_based_hold_;
  bool satisfies_pzs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class BucketAccessControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.BucketAccessControl) */ {
 public:
  inline BucketAccessControl() : BucketAccessControl(nullptr) {}
  virtual ~BucketAccessControl();
  explicit constexpr BucketAccessControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BucketAccessControl(const BucketAccessControl& from);
  BucketAccessControl(BucketAccessControl&& from) noexcept
    : BucketAccessControl() {
    *this = ::std::move(from);
  }

  inline BucketAccessControl& operator=(const BucketAccessControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketAccessControl& operator=(BucketAccessControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BucketAccessControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const BucketAccessControl* internal_default_instance() {
    return reinterpret_cast<const BucketAccessControl*>(
               &_BucketAccessControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BucketAccessControl& a, BucketAccessControl& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketAccessControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketAccessControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketAccessControl* New() const final {
    return CreateMaybeMessage<BucketAccessControl>(nullptr);
  }

  BucketAccessControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketAccessControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BucketAccessControl& from);
  void MergeFrom(const BucketAccessControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketAccessControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.BucketAccessControl";
  }
  protected:
  explicit BucketAccessControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kIdFieldNumber = 2,
    kEntityFieldNumber = 3,
    kEntityIdFieldNumber = 4,
    kEmailFieldNumber = 5,
    kDomainFieldNumber = 6,
    kProjectTeamFieldNumber = 7,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string entity = 3;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string entity_id = 4;
  void clear_entity_id();
  const std::string& entity_id() const;
  void set_entity_id(const std::string& value);
  void set_entity_id(std::string&& value);
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string domain = 6;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .google.storage.v2.ProjectTeam project_team = 7;
  bool has_project_team() const;
  private:
  bool _internal_has_project_team() const;
  public:
  void clear_project_team();
  const ::google::storage::v2::ProjectTeam& project_team() const;
  ::google::storage::v2::ProjectTeam* release_project_team();
  ::google::storage::v2::ProjectTeam* mutable_project_team();
  void set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team);
  private:
  const ::google::storage::v2::ProjectTeam& _internal_project_team() const;
  ::google::storage::v2::ProjectTeam* _internal_mutable_project_team();
  public:
  void unsafe_arena_set_allocated_project_team(
      ::google::storage::v2::ProjectTeam* project_team);
  ::google::storage::v2::ProjectTeam* unsafe_arena_release_project_team();

  // @@protoc_insertion_point(class_scope:google.storage.v2.BucketAccessControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::google::storage::v2::ProjectTeam* project_team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ChecksummedData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ChecksummedData) */ {
 public:
  inline ChecksummedData() : ChecksummedData(nullptr) {}
  virtual ~ChecksummedData();
  explicit constexpr ChecksummedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChecksummedData(const ChecksummedData& from);
  ChecksummedData(ChecksummedData&& from) noexcept
    : ChecksummedData() {
    *this = ::std::move(from);
  }

  inline ChecksummedData& operator=(const ChecksummedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChecksummedData& operator=(ChecksummedData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChecksummedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChecksummedData* internal_default_instance() {
    return reinterpret_cast<const ChecksummedData*>(
               &_ChecksummedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ChecksummedData& a, ChecksummedData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChecksummedData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChecksummedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChecksummedData* New() const final {
    return CreateMaybeMessage<ChecksummedData>(nullptr);
  }

  ChecksummedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChecksummedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChecksummedData& from);
  void MergeFrom(const ChecksummedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChecksummedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ChecksummedData";
  }
  protected:
  explicit ChecksummedData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kCrc32CFieldNumber = 2,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // fixed32 crc32c = 2;
  bool has_crc32c() const;
  private:
  bool _internal_has_crc32c() const;
  public:
  void clear_crc32c();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32c() const;
  void set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc32c() const;
  void _internal_set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ChecksummedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32c_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ObjectChecksums PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ObjectChecksums) */ {
 public:
  inline ObjectChecksums() : ObjectChecksums(nullptr) {}
  virtual ~ObjectChecksums();
  explicit constexpr ObjectChecksums(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectChecksums(const ObjectChecksums& from);
  ObjectChecksums(ObjectChecksums&& from) noexcept
    : ObjectChecksums() {
    *this = ::std::move(from);
  }

  inline ObjectChecksums& operator=(const ObjectChecksums& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectChecksums& operator=(ObjectChecksums&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectChecksums& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectChecksums* internal_default_instance() {
    return reinterpret_cast<const ObjectChecksums*>(
               &_ObjectChecksums_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ObjectChecksums& a, ObjectChecksums& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectChecksums* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectChecksums* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectChecksums* New() const final {
    return CreateMaybeMessage<ObjectChecksums>(nullptr);
  }

  ObjectChecksums* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectChecksums>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectChecksums& from);
  void MergeFrom(const ObjectChecksums& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectChecksums* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ObjectChecksums";
  }
  protected:
  explicit ObjectChecksums(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5HashFieldNumber = 2,
    kCrc32CFieldNumber = 1,
  };
  // bytes md5_hash = 2;
  void clear_md5_hash();
  const std::string& md5_hash() const;
  void set_md5_hash(const std::string& value);
  void set_md5_hash(std::string&& value);
  void set_md5_hash(const char* value);
  void set_md5_hash(const void* value, size_t size);
  std::string* mutable_md5_hash();
  std::string* release_md5_hash();
  void set_allocated_md5_hash(std::string* md5_hash);
  private:
  const std::string& _internal_md5_hash() const;
  void _internal_set_md5_hash(const std::string& value);
  std::string* _internal_mutable_md5_hash();
  public:

  // fixed32 crc32c = 1;
  bool has_crc32c() const;
  private:
  bool _internal_has_crc32c() const;
  public:
  void clear_crc32c();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32c() const;
  void set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc32c() const;
  void _internal_set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ObjectChecksums)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32c_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Object_CustomerEncryption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Object.CustomerEncryption) */ {
 public:
  inline Object_CustomerEncryption() : Object_CustomerEncryption(nullptr) {}
  virtual ~Object_CustomerEncryption();
  explicit constexpr Object_CustomerEncryption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object_CustomerEncryption(const Object_CustomerEncryption& from);
  Object_CustomerEncryption(Object_CustomerEncryption&& from) noexcept
    : Object_CustomerEncryption() {
    *this = ::std::move(from);
  }

  inline Object_CustomerEncryption& operator=(const Object_CustomerEncryption& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_CustomerEncryption& operator=(Object_CustomerEncryption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object_CustomerEncryption& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object_CustomerEncryption* internal_default_instance() {
    return reinterpret_cast<const Object_CustomerEncryption*>(
               &_Object_CustomerEncryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Object_CustomerEncryption& a, Object_CustomerEncryption& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_CustomerEncryption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_CustomerEncryption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_CustomerEncryption* New() const final {
    return CreateMaybeMessage<Object_CustomerEncryption>(nullptr);
  }

  Object_CustomerEncryption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_CustomerEncryption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_CustomerEncryption& from);
  void MergeFrom(const Object_CustomerEncryption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_CustomerEncryption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Object.CustomerEncryption";
  }
  protected:
  explicit Object_CustomerEncryption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionAlgorithmFieldNumber = 1,
    kKeySha256FieldNumber = 2,
  };
  // string encryption_algorithm = 1;
  void clear_encryption_algorithm();
  const std::string& encryption_algorithm() const;
  void set_encryption_algorithm(const std::string& value);
  void set_encryption_algorithm(std::string&& value);
  void set_encryption_algorithm(const char* value);
  void set_encryption_algorithm(const char* value, size_t size);
  std::string* mutable_encryption_algorithm();
  std::string* release_encryption_algorithm();
  void set_allocated_encryption_algorithm(std::string* encryption_algorithm);
  private:
  const std::string& _internal_encryption_algorithm() const;
  void _internal_set_encryption_algorithm(const std::string& value);
  std::string* _internal_mutable_encryption_algorithm();
  public:

  // string key_sha256 = 2;
  void clear_key_sha256();
  const std::string& key_sha256() const;
  void set_key_sha256(const std::string& value);
  void set_key_sha256(std::string&& value);
  void set_key_sha256(const char* value);
  void set_key_sha256(const char* value, size_t size);
  std::string* mutable_key_sha256();
  std::string* release_key_sha256();
  void set_allocated_key_sha256(std::string* key_sha256);
  private:
  const std::string& _internal_key_sha256() const;
  void _internal_set_key_sha256(const std::string& value);
  std::string* _internal_mutable_key_sha256();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Object.CustomerEncryption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_sha256_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Object_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Object_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Object_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Object_MetadataEntry_DoNotUse();
  explicit constexpr Object_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Object_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Object_MetadataEntry_DoNotUse& other);
  static const Object_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Object_MetadataEntry_DoNotUse*>(&_Object_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Object.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.storage.v2.Object.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto);
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto.file_level_metadata[31];
  }

  public:
};

// -------------------------------------------------------------------

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  virtual ~Object();
  explicit constexpr Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Object_CustomerEncryption CustomerEncryption;

  // accessors -------------------------------------------------------

  enum : int {
    kAclFieldNumber = 10,
    kMetadataFieldNumber = 22,
    kNameFieldNumber = 1,
    kBucketFieldNumber = 2,
    kStorageClassFieldNumber = 5,
    kContentEncodingFieldNumber = 7,
    kContentDispositionFieldNumber = 8,
    kCacheControlFieldNumber = 9,
    kContentLanguageFieldNumber = 11,
    kContentTypeFieldNumber = 13,
    kKmsKeyFieldNumber = 18,
    kDeleteTimeFieldNumber = 12,
    kCreateTimeFieldNumber = 14,
    kChecksumsFieldNumber = 16,
    kUpdateTimeFieldNumber = 17,
    kUpdateStorageClassTimeFieldNumber = 19,
    kRetentionExpireTimeFieldNumber = 21,
    kOwnerFieldNumber = 24,
    kCustomerEncryptionFieldNumber = 25,
    kCustomTimeFieldNumber = 26,
    kGenerationFieldNumber = 3,
    kMetagenerationFieldNumber = 4,
    kSizeFieldNumber = 6,
    kComponentCountFieldNumber = 15,
    kTemporaryHoldFieldNumber = 20,
    kEventBasedHoldFieldNumber = 23,
  };
  // repeated .google.storage.v2.ObjectAccessControl acl = 10;
  int acl_size() const;
  private:
  int _internal_acl_size() const;
  public:
  void clear_acl();
  ::google::storage::v2::ObjectAccessControl* mutable_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
      mutable_acl();
  private:
  const ::google::storage::v2::ObjectAccessControl& _internal_acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* _internal_add_acl();
  public:
  const ::google::storage::v2::ObjectAccessControl& acl(int index) const;
  ::google::storage::v2::ObjectAccessControl* add_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
      acl() const;

  // map<string, string> metadata = 22;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bucket = 2 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string storage_class = 5;
  void clear_storage_class();
  const std::string& storage_class() const;
  void set_storage_class(const std::string& value);
  void set_storage_class(std::string&& value);
  void set_storage_class(const char* value);
  void set_storage_class(const char* value, size_t size);
  std::string* mutable_storage_class();
  std::string* release_storage_class();
  void set_allocated_storage_class(std::string* storage_class);
  private:
  const std::string& _internal_storage_class() const;
  void _internal_set_storage_class(const std::string& value);
  std::string* _internal_mutable_storage_class();
  public:

  // string content_encoding = 7;
  void clear_content_encoding();
  const std::string& content_encoding() const;
  void set_content_encoding(const std::string& value);
  void set_content_encoding(std::string&& value);
  void set_content_encoding(const char* value);
  void set_content_encoding(const char* value, size_t size);
  std::string* mutable_content_encoding();
  std::string* release_content_encoding();
  void set_allocated_content_encoding(std::string* content_encoding);
  private:
  const std::string& _internal_content_encoding() const;
  void _internal_set_content_encoding(const std::string& value);
  std::string* _internal_mutable_content_encoding();
  public:

  // string content_disposition = 8;
  void clear_content_disposition();
  const std::string& content_disposition() const;
  void set_content_disposition(const std::string& value);
  void set_content_disposition(std::string&& value);
  void set_content_disposition(const char* value);
  void set_content_disposition(const char* value, size_t size);
  std::string* mutable_content_disposition();
  std::string* release_content_disposition();
  void set_allocated_content_disposition(std::string* content_disposition);
  private:
  const std::string& _internal_content_disposition() const;
  void _internal_set_content_disposition(const std::string& value);
  std::string* _internal_mutable_content_disposition();
  public:

  // string cache_control = 9;
  void clear_cache_control();
  const std::string& cache_control() const;
  void set_cache_control(const std::string& value);
  void set_cache_control(std::string&& value);
  void set_cache_control(const char* value);
  void set_cache_control(const char* value, size_t size);
  std::string* mutable_cache_control();
  std::string* release_cache_control();
  void set_allocated_cache_control(std::string* cache_control);
  private:
  const std::string& _internal_cache_control() const;
  void _internal_set_cache_control(const std::string& value);
  std::string* _internal_mutable_cache_control();
  public:

  // string content_language = 11;
  void clear_content_language();
  const std::string& content_language() const;
  void set_content_language(const std::string& value);
  void set_content_language(std::string&& value);
  void set_content_language(const char* value);
  void set_content_language(const char* value, size_t size);
  std::string* mutable_content_language();
  std::string* release_content_language();
  void set_allocated_content_language(std::string* content_language);
  private:
  const std::string& _internal_content_language() const;
  void _internal_set_content_language(const std::string& value);
  std::string* _internal_mutable_content_language();
  public:

  // string content_type = 13;
  void clear_content_type();
  const std::string& content_type() const;
  void set_content_type(const std::string& value);
  void set_content_type(std::string&& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  std::string* mutable_content_type();
  std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // string kms_key = 18 [(.google.api.resource_reference) = {
  void clear_kms_key();
  const std::string& kms_key() const;
  void set_kms_key(const std::string& value);
  void set_kms_key(std::string&& value);
  void set_kms_key(const char* value);
  void set_kms_key(const char* value, size_t size);
  std::string* mutable_kms_key();
  std::string* release_kms_key();
  void set_allocated_kms_key(std::string* kms_key);
  private:
  const std::string& _internal_kms_key() const;
  void _internal_set_kms_key(const std::string& value);
  std::string* _internal_mutable_kms_key();
  public:

  // .google.protobuf.Timestamp delete_time = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  private:
  bool _internal_has_delete_time() const;
  public:
  void clear_delete_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& delete_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_delete_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delete_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delete_time();
  public:
  void unsafe_arena_set_allocated_delete_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* delete_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delete_time();

  // .google.protobuf.Timestamp create_time = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.storage.v2.ObjectChecksums checksums = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_checksums() const;
  private:
  bool _internal_has_checksums() const;
  public:
  void clear_checksums();
  const ::google::storage::v2::ObjectChecksums& checksums() const;
  ::google::storage::v2::ObjectChecksums* release_checksums();
  ::google::storage::v2::ObjectChecksums* mutable_checksums();
  void set_allocated_checksums(::google::storage::v2::ObjectChecksums* checksums);
  private:
  const ::google::storage::v2::ObjectChecksums& _internal_checksums() const;
  ::google::storage::v2::ObjectChecksums* _internal_mutable_checksums();
  public:
  void unsafe_arena_set_allocated_checksums(
      ::google::storage::v2::ObjectChecksums* checksums);
  ::google::storage::v2::ObjectChecksums* unsafe_arena_release_checksums();

  // .google.protobuf.Timestamp update_time = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.protobuf.Timestamp update_storage_class_time = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_storage_class_time() const;
  private:
  bool _internal_has_update_storage_class_time() const;
  public:
  void clear_update_storage_class_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_storage_class_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_storage_class_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_storage_class_time();
  void set_allocated_update_storage_class_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_storage_class_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_storage_class_time();
  public:
  void unsafe_arena_set_allocated_update_storage_class_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_storage_class_time();

  // .google.protobuf.Timestamp retention_expire_time = 21;
  bool has_retention_expire_time() const;
  private:
  bool _internal_has_retention_expire_time() const;
  public:
  void clear_retention_expire_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& retention_expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_retention_expire_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_retention_expire_time();
  void set_allocated_retention_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_retention_expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_retention_expire_time();
  public:
  void unsafe_arena_set_allocated_retention_expire_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_retention_expire_time();

  // .google.storage.v2.Owner owner = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::google::storage::v2::Owner& owner() const;
  ::google::storage::v2::Owner* release_owner();
  ::google::storage::v2::Owner* mutable_owner();
  void set_allocated_owner(::google::storage::v2::Owner* owner);
  private:
  const ::google::storage::v2::Owner& _internal_owner() const;
  ::google::storage::v2::Owner* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::google::storage::v2::Owner* owner);
  ::google::storage::v2::Owner* unsafe_arena_release_owner();

  // .google.storage.v2.Object.CustomerEncryption customer_encryption = 25;
  bool has_customer_encryption() const;
  private:
  bool _internal_has_customer_encryption() const;
  public:
  void clear_customer_encryption();
  const ::google::storage::v2::Object_CustomerEncryption& customer_encryption() const;
  ::google::storage::v2::Object_CustomerEncryption* release_customer_encryption();
  ::google::storage::v2::Object_CustomerEncryption* mutable_customer_encryption();
  void set_allocated_customer_encryption(::google::storage::v2::Object_CustomerEncryption* customer_encryption);
  private:
  const ::google::storage::v2::Object_CustomerEncryption& _internal_customer_encryption() const;
  ::google::storage::v2::Object_CustomerEncryption* _internal_mutable_customer_encryption();
  public:
  void unsafe_arena_set_allocated_customer_encryption(
      ::google::storage::v2::Object_CustomerEncryption* customer_encryption);
  ::google::storage::v2::Object_CustomerEncryption* unsafe_arena_release_customer_encryption();

  // .google.protobuf.Timestamp custom_time = 26;
  bool has_custom_time() const;
  private:
  bool _internal_has_custom_time() const;
  public:
  void clear_custom_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& custom_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_custom_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_custom_time();
  void set_allocated_custom_time(PROTOBUF_NAMESPACE_ID::Timestamp* custom_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_custom_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_custom_time();
  public:
  void unsafe_arena_set_allocated_custom_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* custom_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_custom_time();

  // int64 generation = 3 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int64 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_metageneration();
  ::PROTOBUF_NAMESPACE_ID::int64 metageneration() const;
  void set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_metageneration() const;
  void _internal_set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 component_count = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_component_count();
  ::PROTOBUF_NAMESPACE_ID::int32 component_count() const;
  void set_component_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_component_count() const;
  void _internal_set_component_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool temporary_hold = 20;
  void clear_temporary_hold();
  bool temporary_hold() const;
  void set_temporary_hold(bool value);
  private:
  bool _internal_temporary_hold() const;
  void _internal_set_temporary_hold(bool value);
  public:

  // bool event_based_hold = 23;
  bool has_event_based_hold() const;
  private:
  bool _internal_has_event_based_hold() const;
  public:
  void clear_event_based_hold();
  bool event_based_hold() const;
  void set_event_based_hold(bool value);
  private:
  bool _internal_event_based_hold() const;
  void _internal_set_event_based_hold(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl > acl_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Object_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_encoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_disposition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_control_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kms_key_;
  PROTOBUF_NAMESPACE_ID::Timestamp* delete_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::google::storage::v2::ObjectChecksums* checksums_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time_;
  ::google::storage::v2::Owner* owner_;
  ::google::storage::v2::Object_CustomerEncryption* customer_encryption_;
  PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 generation_;
  ::PROTOBUF_NAMESPACE_ID::int64 metageneration_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 component_count_;
  bool temporary_hold_;
  bool event_based_hold_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ObjectAccessControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ObjectAccessControl) */ {
 public:
  inline ObjectAccessControl() : ObjectAccessControl(nullptr) {}
  virtual ~ObjectAccessControl();
  explicit constexpr ObjectAccessControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAccessControl(const ObjectAccessControl& from);
  ObjectAccessControl(ObjectAccessControl&& from) noexcept
    : ObjectAccessControl() {
    *this = ::std::move(from);
  }

  inline ObjectAccessControl& operator=(const ObjectAccessControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAccessControl& operator=(ObjectAccessControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectAccessControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAccessControl* internal_default_instance() {
    return reinterpret_cast<const ObjectAccessControl*>(
               &_ObjectAccessControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ObjectAccessControl& a, ObjectAccessControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAccessControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAccessControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectAccessControl* New() const final {
    return CreateMaybeMessage<ObjectAccessControl>(nullptr);
  }

  ObjectAccessControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAccessControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectAccessControl& from);
  void MergeFrom(const ObjectAccessControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAccessControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ObjectAccessControl";
  }
  protected:
  explicit ObjectAccessControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kIdFieldNumber = 2,
    kEntityFieldNumber = 3,
    kEntityIdFieldNumber = 4,
    kEmailFieldNumber = 5,
    kDomainFieldNumber = 6,
    kProjectTeamFieldNumber = 7,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string entity = 3;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string entity_id = 4;
  void clear_entity_id();
  const std::string& entity_id() const;
  void set_entity_id(const std::string& value);
  void set_entity_id(std::string&& value);
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string domain = 6;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .google.storage.v2.ProjectTeam project_team = 7;
  bool has_project_team() const;
  private:
  bool _internal_has_project_team() const;
  public:
  void clear_project_team();
  const ::google::storage::v2::ProjectTeam& project_team() const;
  ::google::storage::v2::ProjectTeam* release_project_team();
  ::google::storage::v2::ProjectTeam* mutable_project_team();
  void set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team);
  private:
  const ::google::storage::v2::ProjectTeam& _internal_project_team() const;
  ::google::storage::v2::ProjectTeam* _internal_mutable_project_team();
  public:
  void unsafe_arena_set_allocated_project_team(
      ::google::storage::v2::ProjectTeam* project_team);
  ::google::storage::v2::ProjectTeam* unsafe_arena_release_project_team();

  // @@protoc_insertion_point(class_scope:google.storage.v2.ObjectAccessControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::google::storage::v2::ProjectTeam* project_team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ProjectTeam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ProjectTeam) */ {
 public:
  inline ProjectTeam() : ProjectTeam(nullptr) {}
  virtual ~ProjectTeam();
  explicit constexpr ProjectTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectTeam(const ProjectTeam& from);
  ProjectTeam(ProjectTeam&& from) noexcept
    : ProjectTeam() {
    *this = ::std::move(from);
  }

  inline ProjectTeam& operator=(const ProjectTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectTeam& operator=(ProjectTeam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectTeam* internal_default_instance() {
    return reinterpret_cast<const ProjectTeam*>(
               &_ProjectTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ProjectTeam& a, ProjectTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectTeam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectTeam* New() const final {
    return CreateMaybeMessage<ProjectTeam>(nullptr);
  }

  ProjectTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectTeam& from);
  void MergeFrom(const ProjectTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ProjectTeam";
  }
  protected:
  explicit ProjectTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNumberFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // string project_number = 1;
  void clear_project_number();
  const std::string& project_number() const;
  void set_project_number(const std::string& value);
  void set_project_number(std::string&& value);
  void set_project_number(const char* value);
  void set_project_number(const char* value, size_t size);
  std::string* mutable_project_number();
  std::string* release_project_number();
  void set_allocated_project_number(std::string* project_number);
  private:
  const std::string& _internal_project_number() const;
  void _internal_set_project_number(const std::string& value);
  std::string* _internal_mutable_project_number();
  public:

  // string team = 2;
  void clear_team();
  const std::string& team() const;
  void set_team(const std::string& value);
  void set_team(std::string&& value);
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  std::string* mutable_team();
  std::string* release_team();
  void set_allocated_team(std::string* team);
  private:
  const std::string& _internal_team() const;
  void _internal_set_team(const std::string& value);
  std::string* _internal_mutable_team();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ProjectTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class Owner PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.Owner) */ {
 public:
  inline Owner() : Owner(nullptr) {}
  virtual ~Owner();
  explicit constexpr Owner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Owner(const Owner& from);
  Owner(Owner&& from) noexcept
    : Owner() {
    *this = ::std::move(from);
  }

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Owner& operator=(Owner&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Owner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Owner* internal_default_instance() {
    return reinterpret_cast<const Owner*>(
               &_Owner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Owner& a, Owner& b) {
    a.Swap(&b);
  }
  inline void Swap(Owner* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Owner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Owner* New() const final {
    return CreateMaybeMessage<Owner>(nullptr);
  }

  Owner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Owner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Owner& from);
  void MergeFrom(const Owner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Owner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.Owner";
  }
  protected:
  explicit Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // string entity = 1;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string entity_id = 2;
  void clear_entity_id();
  const std::string& entity_id() const;
  void set_entity_id(const std::string& value);
  void set_entity_id(std::string&& value);
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.Owner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// -------------------------------------------------------------------

class ContentRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.storage.v2.ContentRange) */ {
 public:
  inline ContentRange() : ContentRange(nullptr) {}
  virtual ~ContentRange();
  explicit constexpr ContentRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentRange(const ContentRange& from);
  ContentRange(ContentRange&& from) noexcept
    : ContentRange() {
    *this = ::std::move(from);
  }

  inline ContentRange& operator=(const ContentRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentRange& operator=(ContentRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContentRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentRange* internal_default_instance() {
    return reinterpret_cast<const ContentRange*>(
               &_ContentRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ContentRange& a, ContentRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentRange* New() const final {
    return CreateMaybeMessage<ContentRange>(nullptr);
  }

  ContentRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContentRange& from);
  void MergeFrom(const ContentRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.storage.v2.ContentRange";
  }
  protected:
  explicit ContentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fstorage_2fv2_2fstorage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kCompleteLengthFieldNumber = 3,
  };
  // int64 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 complete_length = 3;
  void clear_complete_length();
  ::PROTOBUF_NAMESPACE_ID::int64 complete_length() const;
  void set_complete_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_complete_length() const;
  void _internal_set_complete_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.storage.v2.ContentRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  ::PROTOBUF_NAMESPACE_ID::int64 complete_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fstorage_2fv2_2fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadObjectRequest

// string bucket = 1;
inline void ReadObjectRequest::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& ReadObjectRequest::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.bucket)
  return _internal_bucket();
}
inline void ReadObjectRequest::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.bucket)
}
inline std::string* ReadObjectRequest::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& ReadObjectRequest::_internal_bucket() const {
  return bucket_.Get();
}
inline void ReadObjectRequest::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadObjectRequest::set_bucket(std::string&& value) {
  
  bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ReadObjectRequest.bucket)
}
inline void ReadObjectRequest::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ReadObjectRequest.bucket)
}
inline void ReadObjectRequest::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ReadObjectRequest.bucket)
}
inline std::string* ReadObjectRequest::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadObjectRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadObjectRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.bucket)
}

// string object = 2;
inline void ReadObjectRequest::clear_object() {
  object_.ClearToEmpty();
}
inline const std::string& ReadObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.object)
  return _internal_object();
}
inline void ReadObjectRequest::set_object(const std::string& value) {
  _internal_set_object(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.object)
}
inline std::string* ReadObjectRequest::mutable_object() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.object)
  return _internal_mutable_object();
}
inline const std::string& ReadObjectRequest::_internal_object() const {
  return object_.Get();
}
inline void ReadObjectRequest::_internal_set_object(const std::string& value) {
  
  object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadObjectRequest::set_object(std::string&& value) {
  
  object_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ReadObjectRequest.object)
}
inline void ReadObjectRequest::set_object(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ReadObjectRequest.object)
}
inline void ReadObjectRequest::set_object(const char* value,
    size_t size) {
  
  object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ReadObjectRequest.object)
}
inline std::string* ReadObjectRequest::_internal_mutable_object() {
  
  return object_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.object)
  return object_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadObjectRequest::set_allocated_object(std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  object_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.object)
}

// int64 generation = 3;
inline void ReadObjectRequest::clear_generation() {
  generation_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.generation)
  return _internal_generation();
}
inline void ReadObjectRequest::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  generation_ = value;
}
inline void ReadObjectRequest::set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.generation)
}

// int64 read_offset = 4;
inline void ReadObjectRequest::clear_read_offset() {
  read_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_read_offset() const {
  return read_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::read_offset() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.read_offset)
  return _internal_read_offset();
}
inline void ReadObjectRequest::_internal_set_read_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  read_offset_ = value;
}
inline void ReadObjectRequest::set_read_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_read_offset(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.read_offset)
}

// int64 read_limit = 5;
inline void ReadObjectRequest::clear_read_limit() {
  read_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_read_limit() const {
  return read_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::read_limit() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.read_limit)
  return _internal_read_limit();
}
inline void ReadObjectRequest::_internal_set_read_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  read_limit_ = value;
}
inline void ReadObjectRequest::set_read_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_read_limit(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.read_limit)
}

// int64 if_generation_match = 6;
inline bool ReadObjectRequest::_internal_has_if_generation_match() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void ReadObjectRequest::clear_if_generation_match() {
  if_generation_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_if_generation_match() const {
  return if_generation_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_generation_match)
  return _internal_if_generation_match();
}
inline void ReadObjectRequest::_internal_set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  if_generation_match_ = value;
}
inline void ReadObjectRequest::set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_generation_match)
}

// int64 if_generation_not_match = 7;
inline bool ReadObjectRequest::_internal_has_if_generation_not_match() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void ReadObjectRequest::clear_if_generation_not_match() {
  if_generation_not_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_if_generation_not_match() const {
  return if_generation_not_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void ReadObjectRequest::_internal_set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  if_generation_not_match_ = value;
}
inline void ReadObjectRequest::set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_generation_not_match)
}

// int64 if_metageneration_match = 8;
inline bool ReadObjectRequest::_internal_has_if_metageneration_match() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void ReadObjectRequest::clear_if_metageneration_match() {
  if_metageneration_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_if_metageneration_match() const {
  return if_metageneration_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void ReadObjectRequest::_internal_set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  if_metageneration_match_ = value;
}
inline void ReadObjectRequest::set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_metageneration_match)
}

// int64 if_metageneration_not_match = 9;
inline bool ReadObjectRequest::_internal_has_if_metageneration_not_match() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReadObjectRequest::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void ReadObjectRequest::clear_if_metageneration_not_match() {
  if_metageneration_not_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::_internal_if_metageneration_not_match() const {
  return if_metageneration_not_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadObjectRequest::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void ReadObjectRequest::_internal_set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  if_metageneration_not_match_ = value;
}
inline void ReadObjectRequest::set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ReadObjectRequest.if_metageneration_not_match)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 10;
inline bool ReadObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && common_object_request_params_ != nullptr;
}
inline bool ReadObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void ReadObjectRequest::clear_common_object_request_params() {
  if (GetArena() == nullptr && common_object_request_params_ != nullptr) {
    delete common_object_request_params_;
  }
  common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& ReadObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& ReadObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void ReadObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_object_request_params_);
  }
  common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArena());
    common_object_request_params_ = p;
  }
  return common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* ReadObjectRequest::mutable_common_object_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.common_object_request_params)
  return _internal_mutable_common_object_request_params();
}
inline void ReadObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.common_object_request_params)
}

// .google.storage.v2.CommonRequestParams common_request_params = 11;
inline bool ReadObjectRequest::_internal_has_common_request_params() const {
  return this != internal_default_instance() && common_request_params_ != nullptr;
}
inline bool ReadObjectRequest::has_common_request_params() const {
  return _internal_has_common_request_params();
}
inline void ReadObjectRequest::clear_common_request_params() {
  if (GetArena() == nullptr && common_request_params_ != nullptr) {
    delete common_request_params_;
  }
  common_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonRequestParams& ReadObjectRequest::_internal_common_request_params() const {
  const ::google::storage::v2::CommonRequestParams* p = common_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonRequestParams&>(
      ::google::storage::v2::_CommonRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonRequestParams& ReadObjectRequest::common_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.common_request_params)
  return _internal_common_request_params();
}
inline void ReadObjectRequest::unsafe_arena_set_allocated_common_request_params(
    ::google::storage::v2::CommonRequestParams* common_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_request_params_);
  }
  common_request_params_ = common_request_params;
  if (common_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectRequest.common_request_params)
}
inline ::google::storage::v2::CommonRequestParams* ReadObjectRequest::release_common_request_params() {
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* ReadObjectRequest::unsafe_arena_release_common_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.common_request_params)
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* ReadObjectRequest::_internal_mutable_common_request_params() {
  
  if (common_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonRequestParams>(GetArena());
    common_request_params_ = p;
  }
  return common_request_params_;
}
inline ::google::storage::v2::CommonRequestParams* ReadObjectRequest::mutable_common_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.common_request_params)
  return _internal_mutable_common_request_params();
}
inline void ReadObjectRequest::set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_request_params_;
  }
  if (common_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_request_params);
    if (message_arena != submessage_arena) {
      common_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_request_params_ = common_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.common_request_params)
}

// .google.protobuf.FieldMask read_mask = 12;
inline bool ReadObjectRequest::_internal_has_read_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || read_mask_ != nullptr);
  return value;
}
inline bool ReadObjectRequest::has_read_mask() const {
  return _internal_has_read_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& ReadObjectRequest::_internal_read_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = read_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& ReadObjectRequest::read_mask() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectRequest.read_mask)
  return _internal_read_mask();
}
inline void ReadObjectRequest::unsafe_arena_set_allocated_read_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask_);
  }
  read_mask_ = read_mask;
  if (read_mask) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectRequest.read_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::release_read_mask() {
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = read_mask_;
  read_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::unsafe_arena_release_read_mask() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectRequest.read_mask)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = read_mask_;
  read_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::_internal_mutable_read_mask() {
  _has_bits_[0] |= 0x00000001u;
  if (read_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    read_mask_ = p;
  }
  return read_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* ReadObjectRequest::mutable_read_mask() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectRequest.read_mask)
  return _internal_mutable_read_mask();
}
inline void ReadObjectRequest::set_allocated_read_mask(PROTOBUF_NAMESPACE_ID::FieldMask* read_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask_);
  }
  if (read_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_mask)->GetArena();
    if (message_arena != submessage_arena) {
      read_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  read_mask_ = read_mask;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectRequest.read_mask)
}

// -------------------------------------------------------------------

// ReadObjectResponse

// .google.storage.v2.ChecksummedData checksummed_data = 1;
inline bool ReadObjectResponse::_internal_has_checksummed_data() const {
  return this != internal_default_instance() && checksummed_data_ != nullptr;
}
inline bool ReadObjectResponse::has_checksummed_data() const {
  return _internal_has_checksummed_data();
}
inline void ReadObjectResponse::clear_checksummed_data() {
  if (GetArena() == nullptr && checksummed_data_ != nullptr) {
    delete checksummed_data_;
  }
  checksummed_data_ = nullptr;
}
inline const ::google::storage::v2::ChecksummedData& ReadObjectResponse::_internal_checksummed_data() const {
  const ::google::storage::v2::ChecksummedData* p = checksummed_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ChecksummedData&>(
      ::google::storage::v2::_ChecksummedData_default_instance_);
}
inline const ::google::storage::v2::ChecksummedData& ReadObjectResponse::checksummed_data() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.checksummed_data)
  return _internal_checksummed_data();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_checksummed_data(
    ::google::storage::v2::ChecksummedData* checksummed_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checksummed_data_);
  }
  checksummed_data_ = checksummed_data;
  if (checksummed_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.checksummed_data)
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::release_checksummed_data() {
  
  ::google::storage::v2::ChecksummedData* temp = checksummed_data_;
  checksummed_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::unsafe_arena_release_checksummed_data() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.checksummed_data)
  
  ::google::storage::v2::ChecksummedData* temp = checksummed_data_;
  checksummed_data_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::_internal_mutable_checksummed_data() {
  
  if (checksummed_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ChecksummedData>(GetArena());
    checksummed_data_ = p;
  }
  return checksummed_data_;
}
inline ::google::storage::v2::ChecksummedData* ReadObjectResponse::mutable_checksummed_data() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.checksummed_data)
  return _internal_mutable_checksummed_data();
}
inline void ReadObjectResponse::set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checksummed_data_;
  }
  if (checksummed_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checksummed_data);
    if (message_arena != submessage_arena) {
      checksummed_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checksummed_data, submessage_arena);
    }
    
  } else {
    
  }
  checksummed_data_ = checksummed_data;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.checksummed_data)
}

// .google.storage.v2.ObjectChecksums object_checksums = 2;
inline bool ReadObjectResponse::_internal_has_object_checksums() const {
  return this != internal_default_instance() && object_checksums_ != nullptr;
}
inline bool ReadObjectResponse::has_object_checksums() const {
  return _internal_has_object_checksums();
}
inline void ReadObjectResponse::clear_object_checksums() {
  if (GetArena() == nullptr && object_checksums_ != nullptr) {
    delete object_checksums_;
  }
  object_checksums_ = nullptr;
}
inline const ::google::storage::v2::ObjectChecksums& ReadObjectResponse::_internal_object_checksums() const {
  const ::google::storage::v2::ObjectChecksums* p = object_checksums_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ObjectChecksums&>(
      ::google::storage::v2::_ObjectChecksums_default_instance_);
}
inline const ::google::storage::v2::ObjectChecksums& ReadObjectResponse::object_checksums() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.object_checksums)
  return _internal_object_checksums();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_object_checksums(
    ::google::storage::v2::ObjectChecksums* object_checksums) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_checksums_);
  }
  object_checksums_ = object_checksums;
  if (object_checksums) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.object_checksums)
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::release_object_checksums() {
  
  ::google::storage::v2::ObjectChecksums* temp = object_checksums_;
  object_checksums_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::unsafe_arena_release_object_checksums() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.object_checksums)
  
  ::google::storage::v2::ObjectChecksums* temp = object_checksums_;
  object_checksums_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::_internal_mutable_object_checksums() {
  
  if (object_checksums_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(GetArena());
    object_checksums_ = p;
  }
  return object_checksums_;
}
inline ::google::storage::v2::ObjectChecksums* ReadObjectResponse::mutable_object_checksums() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.object_checksums)
  return _internal_mutable_object_checksums();
}
inline void ReadObjectResponse::set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_checksums_;
  }
  if (object_checksums) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_checksums);
    if (message_arena != submessage_arena) {
      object_checksums = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_checksums, submessage_arena);
    }
    
  } else {
    
  }
  object_checksums_ = object_checksums;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.object_checksums)
}

// .google.storage.v2.ContentRange content_range = 3;
inline bool ReadObjectResponse::_internal_has_content_range() const {
  return this != internal_default_instance() && content_range_ != nullptr;
}
inline bool ReadObjectResponse::has_content_range() const {
  return _internal_has_content_range();
}
inline void ReadObjectResponse::clear_content_range() {
  if (GetArena() == nullptr && content_range_ != nullptr) {
    delete content_range_;
  }
  content_range_ = nullptr;
}
inline const ::google::storage::v2::ContentRange& ReadObjectResponse::_internal_content_range() const {
  const ::google::storage::v2::ContentRange* p = content_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ContentRange&>(
      ::google::storage::v2::_ContentRange_default_instance_);
}
inline const ::google::storage::v2::ContentRange& ReadObjectResponse::content_range() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.content_range)
  return _internal_content_range();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_content_range(
    ::google::storage::v2::ContentRange* content_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_range_);
  }
  content_range_ = content_range;
  if (content_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.content_range)
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::release_content_range() {
  
  ::google::storage::v2::ContentRange* temp = content_range_;
  content_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::unsafe_arena_release_content_range() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.content_range)
  
  ::google::storage::v2::ContentRange* temp = content_range_;
  content_range_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::_internal_mutable_content_range() {
  
  if (content_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ContentRange>(GetArena());
    content_range_ = p;
  }
  return content_range_;
}
inline ::google::storage::v2::ContentRange* ReadObjectResponse::mutable_content_range() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.content_range)
  return _internal_mutable_content_range();
}
inline void ReadObjectResponse::set_allocated_content_range(::google::storage::v2::ContentRange* content_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete content_range_;
  }
  if (content_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(content_range);
    if (message_arena != submessage_arena) {
      content_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_range, submessage_arena);
    }
    
  } else {
    
  }
  content_range_ = content_range;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.content_range)
}

// .google.storage.v2.Object metadata = 4;
inline bool ReadObjectResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ReadObjectResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void ReadObjectResponse::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::google::storage::v2::Object& ReadObjectResponse::_internal_metadata() const {
  const ::google::storage::v2::Object* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& ReadObjectResponse::metadata() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ReadObjectResponse.metadata)
  return _internal_metadata();
}
inline void ReadObjectResponse::unsafe_arena_set_allocated_metadata(
    ::google::storage::v2::Object* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ReadObjectResponse.metadata)
}
inline ::google::storage::v2::Object* ReadObjectResponse::release_metadata() {
  
  ::google::storage::v2::Object* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Object* ReadObjectResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ReadObjectResponse.metadata)
  
  ::google::storage::v2::Object* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* ReadObjectResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::google::storage::v2::Object* ReadObjectResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ReadObjectResponse.metadata)
  return _internal_mutable_metadata();
}
inline void ReadObjectResponse::set_allocated_metadata(::google::storage::v2::Object* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ReadObjectResponse.metadata)
}

// -------------------------------------------------------------------

// WriteObjectSpec

// .google.storage.v2.Object resource = 1;
inline bool WriteObjectSpec::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool WriteObjectSpec::has_resource() const {
  return _internal_has_resource();
}
inline void WriteObjectSpec::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
inline const ::google::storage::v2::Object& WriteObjectSpec::_internal_resource() const {
  const ::google::storage::v2::Object* p = resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object&>(
      ::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& WriteObjectSpec::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.resource)
  return _internal_resource();
}
inline void WriteObjectSpec::unsafe_arena_set_allocated_resource(
    ::google::storage::v2::Object* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectSpec.resource)
}
inline ::google::storage::v2::Object* WriteObjectSpec::release_resource() {
  
  ::google::storage::v2::Object* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Object* WriteObjectSpec::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectSpec.resource)
  
  ::google::storage::v2::Object* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object* WriteObjectSpec::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::google::storage::v2::Object* WriteObjectSpec::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectSpec.resource)
  return _internal_mutable_resource();
}
inline void WriteObjectSpec::set_allocated_resource(::google::storage::v2::Object* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectSpec.resource)
}

// .google.storage.v2.PredefinedObjectAcl predefined_acl = 2;
inline void WriteObjectSpec::clear_predefined_acl() {
  predefined_acl_ = 0;
}
inline ::google::storage::v2::PredefinedObjectAcl WriteObjectSpec::_internal_predefined_acl() const {
  return static_cast< ::google::storage::v2::PredefinedObjectAcl >(predefined_acl_);
}
inline ::google::storage::v2::PredefinedObjectAcl WriteObjectSpec::predefined_acl() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.predefined_acl)
  return _internal_predefined_acl();
}
inline void WriteObjectSpec::_internal_set_predefined_acl(::google::storage::v2::PredefinedObjectAcl value) {
  
  predefined_acl_ = value;
}
inline void WriteObjectSpec::set_predefined_acl(::google::storage::v2::PredefinedObjectAcl value) {
  _internal_set_predefined_acl(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.predefined_acl)
}

// int64 if_generation_match = 3;
inline bool WriteObjectSpec::_internal_has_if_generation_match() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_generation_match() const {
  return _internal_has_if_generation_match();
}
inline void WriteObjectSpec::clear_if_generation_match() {
  if_generation_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::_internal_if_generation_match() const {
  return if_generation_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::if_generation_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_generation_match)
  return _internal_if_generation_match();
}
inline void WriteObjectSpec::_internal_set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  if_generation_match_ = value;
}
inline void WriteObjectSpec::set_if_generation_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_generation_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_generation_match)
}

// int64 if_generation_not_match = 4;
inline bool WriteObjectSpec::_internal_has_if_generation_not_match() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_generation_not_match() const {
  return _internal_has_if_generation_not_match();
}
inline void WriteObjectSpec::clear_if_generation_not_match() {
  if_generation_not_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::_internal_if_generation_not_match() const {
  return if_generation_not_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::if_generation_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_generation_not_match)
  return _internal_if_generation_not_match();
}
inline void WriteObjectSpec::_internal_set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  if_generation_not_match_ = value;
}
inline void WriteObjectSpec::set_if_generation_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_generation_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_generation_not_match)
}

// int64 if_metageneration_match = 5;
inline bool WriteObjectSpec::_internal_has_if_metageneration_match() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_metageneration_match() const {
  return _internal_has_if_metageneration_match();
}
inline void WriteObjectSpec::clear_if_metageneration_match() {
  if_metageneration_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::_internal_if_metageneration_match() const {
  return if_metageneration_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::if_metageneration_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_metageneration_match)
  return _internal_if_metageneration_match();
}
inline void WriteObjectSpec::_internal_set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  if_metageneration_match_ = value;
}
inline void WriteObjectSpec::set_if_metageneration_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_metageneration_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_metageneration_match)
}

// int64 if_metageneration_not_match = 6;
inline bool WriteObjectSpec::_internal_has_if_metageneration_not_match() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WriteObjectSpec::has_if_metageneration_not_match() const {
  return _internal_has_if_metageneration_not_match();
}
inline void WriteObjectSpec::clear_if_metageneration_not_match() {
  if_metageneration_not_match_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::_internal_if_metageneration_not_match() const {
  return if_metageneration_not_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectSpec::if_metageneration_not_match() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectSpec.if_metageneration_not_match)
  return _internal_if_metageneration_not_match();
}
inline void WriteObjectSpec::_internal_set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  if_metageneration_not_match_ = value;
}
inline void WriteObjectSpec::set_if_metageneration_not_match(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_if_metageneration_not_match(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectSpec.if_metageneration_not_match)
}

// -------------------------------------------------------------------

// WriteObjectRequest

// string upload_id = 1;
inline bool WriteObjectRequest::_internal_has_upload_id() const {
  return first_message_case() == kUploadId;
}
inline bool WriteObjectRequest::has_upload_id() const {
  return _internal_has_upload_id();
}
inline void WriteObjectRequest::set_has_upload_id() {
  _oneof_case_[0] = kUploadId;
}
inline void WriteObjectRequest::clear_upload_id() {
  if (_internal_has_upload_id()) {
    first_message_.upload_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_first_message();
  }
}
inline const std::string& WriteObjectRequest::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.upload_id)
  return _internal_upload_id();
}
inline void WriteObjectRequest::set_upload_id(const std::string& value) {
  _internal_set_upload_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.upload_id)
}
inline std::string* WriteObjectRequest::mutable_upload_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.upload_id)
  return _internal_mutable_upload_id();
}
inline const std::string& WriteObjectRequest::_internal_upload_id() const {
  if (_internal_has_upload_id()) {
    return first_message_.upload_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void WriteObjectRequest::_internal_set_upload_id(const std::string& value) {
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    first_message_.upload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_message_.upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteObjectRequest::set_upload_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.upload_id)
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    first_message_.upload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_message_.upload_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.WriteObjectRequest.upload_id)
}
inline void WriteObjectRequest::set_upload_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    first_message_.upload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_message_.upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.WriteObjectRequest.upload_id)
}
inline void WriteObjectRequest::set_upload_id(const char* value,
                             size_t size) {
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    first_message_.upload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_message_.upload_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.WriteObjectRequest.upload_id)
}
inline std::string* WriteObjectRequest::_internal_mutable_upload_id() {
  if (!_internal_has_upload_id()) {
    clear_first_message();
    set_has_upload_id();
    first_message_.upload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return first_message_.upload_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteObjectRequest::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.upload_id)
  if (_internal_has_upload_id()) {
    clear_has_first_message();
    return first_message_.upload_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void WriteObjectRequest::set_allocated_upload_id(std::string* upload_id) {
  if (has_first_message()) {
    clear_first_message();
  }
  if (upload_id != nullptr) {
    set_has_upload_id();
    first_message_.upload_id_.UnsafeSetDefault(upload_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(upload_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.upload_id)
}

// .google.storage.v2.WriteObjectSpec write_object_spec = 2;
inline bool WriteObjectRequest::_internal_has_write_object_spec() const {
  return first_message_case() == kWriteObjectSpec;
}
inline bool WriteObjectRequest::has_write_object_spec() const {
  return _internal_has_write_object_spec();
}
inline void WriteObjectRequest::set_has_write_object_spec() {
  _oneof_case_[0] = kWriteObjectSpec;
}
inline void WriteObjectRequest::clear_write_object_spec() {
  if (_internal_has_write_object_spec()) {
    if (GetArena() == nullptr) {
      delete first_message_.write_object_spec_;
    }
    clear_has_first_message();
  }
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::release_write_object_spec() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.write_object_spec)
  if (_internal_has_write_object_spec()) {
    clear_has_first_message();
      ::google::storage::v2::WriteObjectSpec* temp = first_message_.write_object_spec_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    first_message_.write_object_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::WriteObjectSpec& WriteObjectRequest::_internal_write_object_spec() const {
  return _internal_has_write_object_spec()
      ? *first_message_.write_object_spec_
      : reinterpret_cast< ::google::storage::v2::WriteObjectSpec&>(::google::storage::v2::_WriteObjectSpec_default_instance_);
}
inline const ::google::storage::v2::WriteObjectSpec& WriteObjectRequest::write_object_spec() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.write_object_spec)
  return _internal_write_object_spec();
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::unsafe_arena_release_write_object_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.WriteObjectRequest.write_object_spec)
  if (_internal_has_write_object_spec()) {
    clear_has_first_message();
    ::google::storage::v2::WriteObjectSpec* temp = first_message_.write_object_spec_;
    first_message_.write_object_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec) {
  clear_first_message();
  if (write_object_spec) {
    set_has_write_object_spec();
    first_message_.write_object_spec_ = write_object_spec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.write_object_spec)
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::_internal_mutable_write_object_spec() {
  if (!_internal_has_write_object_spec()) {
    clear_first_message();
    set_has_write_object_spec();
    first_message_.write_object_spec_ = CreateMaybeMessage< ::google::storage::v2::WriteObjectSpec >(GetArena());
  }
  return first_message_.write_object_spec_;
}
inline ::google::storage::v2::WriteObjectSpec* WriteObjectRequest::mutable_write_object_spec() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.write_object_spec)
  return _internal_mutable_write_object_spec();
}

// int64 write_offset = 3 [(.google.api.field_behavior) = REQUIRED];
inline void WriteObjectRequest::clear_write_offset() {
  write_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectRequest::_internal_write_offset() const {
  return write_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectRequest::write_offset() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.write_offset)
  return _internal_write_offset();
}
inline void WriteObjectRequest::_internal_set_write_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  write_offset_ = value;
}
inline void WriteObjectRequest::set_write_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_write_offset(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.write_offset)
}

// .google.storage.v2.ChecksummedData checksummed_data = 4;
inline bool WriteObjectRequest::_internal_has_checksummed_data() const {
  return data_case() == kChecksummedData;
}
inline bool WriteObjectRequest::has_checksummed_data() const {
  return _internal_has_checksummed_data();
}
inline void WriteObjectRequest::set_has_checksummed_data() {
  _oneof_case_[1] = kChecksummedData;
}
inline void WriteObjectRequest::clear_checksummed_data() {
  if (_internal_has_checksummed_data()) {
    if (GetArena() == nullptr) {
      delete data_.checksummed_data_;
    }
    clear_has_data();
  }
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::release_checksummed_data() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.checksummed_data)
  if (_internal_has_checksummed_data()) {
    clear_has_data();
      ::google::storage::v2::ChecksummedData* temp = data_.checksummed_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.checksummed_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::ChecksummedData& WriteObjectRequest::_internal_checksummed_data() const {
  return _internal_has_checksummed_data()
      ? *data_.checksummed_data_
      : reinterpret_cast< ::google::storage::v2::ChecksummedData&>(::google::storage::v2::_ChecksummedData_default_instance_);
}
inline const ::google::storage::v2::ChecksummedData& WriteObjectRequest::checksummed_data() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.checksummed_data)
  return _internal_checksummed_data();
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::unsafe_arena_release_checksummed_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.WriteObjectRequest.checksummed_data)
  if (_internal_has_checksummed_data()) {
    clear_has_data();
    ::google::storage::v2::ChecksummedData* temp = data_.checksummed_data_;
    data_.checksummed_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_checksummed_data(::google::storage::v2::ChecksummedData* checksummed_data) {
  clear_data();
  if (checksummed_data) {
    set_has_checksummed_data();
    data_.checksummed_data_ = checksummed_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.checksummed_data)
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::_internal_mutable_checksummed_data() {
  if (!_internal_has_checksummed_data()) {
    clear_data();
    set_has_checksummed_data();
    data_.checksummed_data_ = CreateMaybeMessage< ::google::storage::v2::ChecksummedData >(GetArena());
  }
  return data_.checksummed_data_;
}
inline ::google::storage::v2::ChecksummedData* WriteObjectRequest::mutable_checksummed_data() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.checksummed_data)
  return _internal_mutable_checksummed_data();
}

// .google.storage.v2.ObjectChecksums object_checksums = 6;
inline bool WriteObjectRequest::_internal_has_object_checksums() const {
  return this != internal_default_instance() && object_checksums_ != nullptr;
}
inline bool WriteObjectRequest::has_object_checksums() const {
  return _internal_has_object_checksums();
}
inline void WriteObjectRequest::clear_object_checksums() {
  if (GetArena() == nullptr && object_checksums_ != nullptr) {
    delete object_checksums_;
  }
  object_checksums_ = nullptr;
}
inline const ::google::storage::v2::ObjectChecksums& WriteObjectRequest::_internal_object_checksums() const {
  const ::google::storage::v2::ObjectChecksums* p = object_checksums_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ObjectChecksums&>(
      ::google::storage::v2::_ObjectChecksums_default_instance_);
}
inline const ::google::storage::v2::ObjectChecksums& WriteObjectRequest::object_checksums() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.object_checksums)
  return _internal_object_checksums();
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_object_checksums(
    ::google::storage::v2::ObjectChecksums* object_checksums) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_checksums_);
  }
  object_checksums_ = object_checksums;
  if (object_checksums) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.object_checksums)
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::release_object_checksums() {
  
  ::google::storage::v2::ObjectChecksums* temp = object_checksums_;
  object_checksums_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::unsafe_arena_release_object_checksums() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.object_checksums)
  
  ::google::storage::v2::ObjectChecksums* temp = object_checksums_;
  object_checksums_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::_internal_mutable_object_checksums() {
  
  if (object_checksums_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(GetArena());
    object_checksums_ = p;
  }
  return object_checksums_;
}
inline ::google::storage::v2::ObjectChecksums* WriteObjectRequest::mutable_object_checksums() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.object_checksums)
  return _internal_mutable_object_checksums();
}
inline void WriteObjectRequest::set_allocated_object_checksums(::google::storage::v2::ObjectChecksums* object_checksums) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_checksums_;
  }
  if (object_checksums) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_checksums);
    if (message_arena != submessage_arena) {
      object_checksums = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_checksums, submessage_arena);
    }
    
  } else {
    
  }
  object_checksums_ = object_checksums;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.object_checksums)
}

// bool finish_write = 7;
inline void WriteObjectRequest::clear_finish_write() {
  finish_write_ = false;
}
inline bool WriteObjectRequest::_internal_finish_write() const {
  return finish_write_;
}
inline bool WriteObjectRequest::finish_write() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.finish_write)
  return _internal_finish_write();
}
inline void WriteObjectRequest::_internal_set_finish_write(bool value) {
  
  finish_write_ = value;
}
inline void WriteObjectRequest::set_finish_write(bool value) {
  _internal_set_finish_write(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectRequest.finish_write)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 8;
inline bool WriteObjectRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && common_object_request_params_ != nullptr;
}
inline bool WriteObjectRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void WriteObjectRequest::clear_common_object_request_params() {
  if (GetArena() == nullptr && common_object_request_params_ != nullptr) {
    delete common_object_request_params_;
  }
  common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& WriteObjectRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& WriteObjectRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_object_request_params_);
  }
  common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::_internal_mutable_common_object_request_params() {
  
  if (common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArena());
    common_object_request_params_ = p;
  }
  return common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* WriteObjectRequest::mutable_common_object_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.common_object_request_params)
  return _internal_mutable_common_object_request_params();
}
inline void WriteObjectRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.common_object_request_params)
}

// .google.storage.v2.CommonRequestParams common_request_params = 9;
inline bool WriteObjectRequest::_internal_has_common_request_params() const {
  return this != internal_default_instance() && common_request_params_ != nullptr;
}
inline bool WriteObjectRequest::has_common_request_params() const {
  return _internal_has_common_request_params();
}
inline void WriteObjectRequest::clear_common_request_params() {
  if (GetArena() == nullptr && common_request_params_ != nullptr) {
    delete common_request_params_;
  }
  common_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonRequestParams& WriteObjectRequest::_internal_common_request_params() const {
  const ::google::storage::v2::CommonRequestParams* p = common_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonRequestParams&>(
      ::google::storage::v2::_CommonRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonRequestParams& WriteObjectRequest::common_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectRequest.common_request_params)
  return _internal_common_request_params();
}
inline void WriteObjectRequest::unsafe_arena_set_allocated_common_request_params(
    ::google::storage::v2::CommonRequestParams* common_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_request_params_);
  }
  common_request_params_ = common_request_params;
  if (common_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectRequest.common_request_params)
}
inline ::google::storage::v2::CommonRequestParams* WriteObjectRequest::release_common_request_params() {
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* WriteObjectRequest::unsafe_arena_release_common_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectRequest.common_request_params)
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* WriteObjectRequest::_internal_mutable_common_request_params() {
  
  if (common_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonRequestParams>(GetArena());
    common_request_params_ = p;
  }
  return common_request_params_;
}
inline ::google::storage::v2::CommonRequestParams* WriteObjectRequest::mutable_common_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectRequest.common_request_params)
  return _internal_mutable_common_request_params();
}
inline void WriteObjectRequest::set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_request_params_;
  }
  if (common_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_request_params);
    if (message_arena != submessage_arena) {
      common_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_request_params_ = common_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.WriteObjectRequest.common_request_params)
}

inline bool WriteObjectRequest::has_first_message() const {
  return first_message_case() != FIRST_MESSAGE_NOT_SET;
}
inline void WriteObjectRequest::clear_has_first_message() {
  _oneof_case_[0] = FIRST_MESSAGE_NOT_SET;
}
inline bool WriteObjectRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void WriteObjectRequest::clear_has_data() {
  _oneof_case_[1] = DATA_NOT_SET;
}
inline WriteObjectRequest::FirstMessageCase WriteObjectRequest::first_message_case() const {
  return WriteObjectRequest::FirstMessageCase(_oneof_case_[0]);
}
inline WriteObjectRequest::DataCase WriteObjectRequest::data_case() const {
  return WriteObjectRequest::DataCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// WriteObjectResponse

// int64 committed_size = 1;
inline bool WriteObjectResponse::_internal_has_committed_size() const {
  return write_status_case() == kCommittedSize;
}
inline bool WriteObjectResponse::has_committed_size() const {
  return _internal_has_committed_size();
}
inline void WriteObjectResponse::set_has_committed_size() {
  _oneof_case_[0] = kCommittedSize;
}
inline void WriteObjectResponse::clear_committed_size() {
  if (_internal_has_committed_size()) {
    write_status_.committed_size_ = PROTOBUF_LONGLONG(0);
    clear_has_write_status();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectResponse::_internal_committed_size() const {
  if (_internal_has_committed_size()) {
    return write_status_.committed_size_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void WriteObjectResponse::_internal_set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_committed_size()) {
    clear_write_status();
    set_has_committed_size();
  }
  write_status_.committed_size_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WriteObjectResponse::committed_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectResponse.committed_size)
  return _internal_committed_size();
}
inline void WriteObjectResponse::set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_committed_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.WriteObjectResponse.committed_size)
}

// .google.storage.v2.Object resource = 2;
inline bool WriteObjectResponse::_internal_has_resource() const {
  return write_status_case() == kResource;
}
inline bool WriteObjectResponse::has_resource() const {
  return _internal_has_resource();
}
inline void WriteObjectResponse::set_has_resource() {
  _oneof_case_[0] = kResource;
}
inline void WriteObjectResponse::clear_resource() {
  if (_internal_has_resource()) {
    if (GetArena() == nullptr) {
      delete write_status_.resource_;
    }
    clear_has_write_status();
  }
}
inline ::google::storage::v2::Object* WriteObjectResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.WriteObjectResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
      ::google::storage::v2::Object* temp = write_status_.resource_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::Object& WriteObjectResponse::_internal_resource() const {
  return _internal_has_resource()
      ? *write_status_.resource_
      : reinterpret_cast< ::google::storage::v2::Object&>(::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& WriteObjectResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.WriteObjectResponse.resource)
  return _internal_resource();
}
inline ::google::storage::v2::Object* WriteObjectResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.WriteObjectResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
    ::google::storage::v2::Object* temp = write_status_.resource_;
    write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteObjectResponse::unsafe_arena_set_allocated_resource(::google::storage::v2::Object* resource) {
  clear_write_status();
  if (resource) {
    set_has_resource();
    write_status_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.WriteObjectResponse.resource)
}
inline ::google::storage::v2::Object* WriteObjectResponse::_internal_mutable_resource() {
  if (!_internal_has_resource()) {
    clear_write_status();
    set_has_resource();
    write_status_.resource_ = CreateMaybeMessage< ::google::storage::v2::Object >(GetArena());
  }
  return write_status_.resource_;
}
inline ::google::storage::v2::Object* WriteObjectResponse::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.WriteObjectResponse.resource)
  return _internal_mutable_resource();
}

inline bool WriteObjectResponse::has_write_status() const {
  return write_status_case() != WRITE_STATUS_NOT_SET;
}
inline void WriteObjectResponse::clear_has_write_status() {
  _oneof_case_[0] = WRITE_STATUS_NOT_SET;
}
inline WriteObjectResponse::WriteStatusCase WriteObjectResponse::write_status_case() const {
  return WriteObjectResponse::WriteStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryWriteStatusRequest

// string upload_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void QueryWriteStatusRequest::clear_upload_id() {
  upload_id_.ClearToEmpty();
}
inline const std::string& QueryWriteStatusRequest::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusRequest.upload_id)
  return _internal_upload_id();
}
inline void QueryWriteStatusRequest::set_upload_id(const std::string& value) {
  _internal_set_upload_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.QueryWriteStatusRequest.upload_id)
}
inline std::string* QueryWriteStatusRequest::mutable_upload_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusRequest.upload_id)
  return _internal_mutable_upload_id();
}
inline const std::string& QueryWriteStatusRequest::_internal_upload_id() const {
  return upload_id_.Get();
}
inline void QueryWriteStatusRequest::_internal_set_upload_id(const std::string& value) {
  
  upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryWriteStatusRequest::set_upload_id(std::string&& value) {
  
  upload_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.QueryWriteStatusRequest.upload_id)
}
inline void QueryWriteStatusRequest::set_upload_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.QueryWriteStatusRequest.upload_id)
}
inline void QueryWriteStatusRequest::set_upload_id(const char* value,
    size_t size) {
  
  upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.QueryWriteStatusRequest.upload_id)
}
inline std::string* QueryWriteStatusRequest::_internal_mutable_upload_id() {
  
  return upload_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryWriteStatusRequest::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusRequest.upload_id)
  return upload_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryWriteStatusRequest::set_allocated_upload_id(std::string* upload_id) {
  if (upload_id != nullptr) {
    
  } else {
    
  }
  upload_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.QueryWriteStatusRequest.upload_id)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 2;
inline bool QueryWriteStatusRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && common_object_request_params_ != nullptr;
}
inline bool QueryWriteStatusRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void QueryWriteStatusRequest::clear_common_object_request_params() {
  if (GetArena() == nullptr && common_object_request_params_ != nullptr) {
    delete common_object_request_params_;
  }
  common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& QueryWriteStatusRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& QueryWriteStatusRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void QueryWriteStatusRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_object_request_params_);
  }
  common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::_internal_mutable_common_object_request_params() {
  
  if (common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArena());
    common_object_request_params_ = p;
  }
  return common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* QueryWriteStatusRequest::mutable_common_object_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
  return _internal_mutable_common_object_request_params();
}
inline void QueryWriteStatusRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.QueryWriteStatusRequest.common_object_request_params)
}

// .google.storage.v2.CommonRequestParams common_request_params = 3;
inline bool QueryWriteStatusRequest::_internal_has_common_request_params() const {
  return this != internal_default_instance() && common_request_params_ != nullptr;
}
inline bool QueryWriteStatusRequest::has_common_request_params() const {
  return _internal_has_common_request_params();
}
inline void QueryWriteStatusRequest::clear_common_request_params() {
  if (GetArena() == nullptr && common_request_params_ != nullptr) {
    delete common_request_params_;
  }
  common_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonRequestParams& QueryWriteStatusRequest::_internal_common_request_params() const {
  const ::google::storage::v2::CommonRequestParams* p = common_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonRequestParams&>(
      ::google::storage::v2::_CommonRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonRequestParams& QueryWriteStatusRequest::common_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusRequest.common_request_params)
  return _internal_common_request_params();
}
inline void QueryWriteStatusRequest::unsafe_arena_set_allocated_common_request_params(
    ::google::storage::v2::CommonRequestParams* common_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_request_params_);
  }
  common_request_params_ = common_request_params;
  if (common_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.QueryWriteStatusRequest.common_request_params)
}
inline ::google::storage::v2::CommonRequestParams* QueryWriteStatusRequest::release_common_request_params() {
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* QueryWriteStatusRequest::unsafe_arena_release_common_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusRequest.common_request_params)
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* QueryWriteStatusRequest::_internal_mutable_common_request_params() {
  
  if (common_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonRequestParams>(GetArena());
    common_request_params_ = p;
  }
  return common_request_params_;
}
inline ::google::storage::v2::CommonRequestParams* QueryWriteStatusRequest::mutable_common_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusRequest.common_request_params)
  return _internal_mutable_common_request_params();
}
inline void QueryWriteStatusRequest::set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_request_params_;
  }
  if (common_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_request_params);
    if (message_arena != submessage_arena) {
      common_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_request_params_ = common_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.QueryWriteStatusRequest.common_request_params)
}

// -------------------------------------------------------------------

// QueryWriteStatusResponse

// int64 committed_size = 1;
inline bool QueryWriteStatusResponse::_internal_has_committed_size() const {
  return write_status_case() == kCommittedSize;
}
inline bool QueryWriteStatusResponse::has_committed_size() const {
  return _internal_has_committed_size();
}
inline void QueryWriteStatusResponse::set_has_committed_size() {
  _oneof_case_[0] = kCommittedSize;
}
inline void QueryWriteStatusResponse::clear_committed_size() {
  if (_internal_has_committed_size()) {
    write_status_.committed_size_ = PROTOBUF_LONGLONG(0);
    clear_has_write_status();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryWriteStatusResponse::_internal_committed_size() const {
  if (_internal_has_committed_size()) {
    return write_status_.committed_size_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void QueryWriteStatusResponse::_internal_set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_committed_size()) {
    clear_write_status();
    set_has_committed_size();
  }
  write_status_.committed_size_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryWriteStatusResponse::committed_size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusResponse.committed_size)
  return _internal_committed_size();
}
inline void QueryWriteStatusResponse::set_committed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_committed_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.QueryWriteStatusResponse.committed_size)
}

// .google.storage.v2.Object resource = 2;
inline bool QueryWriteStatusResponse::_internal_has_resource() const {
  return write_status_case() == kResource;
}
inline bool QueryWriteStatusResponse::has_resource() const {
  return _internal_has_resource();
}
inline void QueryWriteStatusResponse::set_has_resource() {
  _oneof_case_[0] = kResource;
}
inline void QueryWriteStatusResponse::clear_resource() {
  if (_internal_has_resource()) {
    if (GetArena() == nullptr) {
      delete write_status_.resource_;
    }
    clear_has_write_status();
  }
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.storage.v2.QueryWriteStatusResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
      ::google::storage::v2::Object* temp = write_status_.resource_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::storage::v2::Object& QueryWriteStatusResponse::_internal_resource() const {
  return _internal_has_resource()
      ? *write_status_.resource_
      : reinterpret_cast< ::google::storage::v2::Object&>(::google::storage::v2::_Object_default_instance_);
}
inline const ::google::storage::v2::Object& QueryWriteStatusResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.QueryWriteStatusResponse.resource)
  return _internal_resource();
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.storage.v2.QueryWriteStatusResponse.resource)
  if (_internal_has_resource()) {
    clear_has_write_status();
    ::google::storage::v2::Object* temp = write_status_.resource_;
    write_status_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QueryWriteStatusResponse::unsafe_arena_set_allocated_resource(::google::storage::v2::Object* resource) {
  clear_write_status();
  if (resource) {
    set_has_resource();
    write_status_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.QueryWriteStatusResponse.resource)
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::_internal_mutable_resource() {
  if (!_internal_has_resource()) {
    clear_write_status();
    set_has_resource();
    write_status_.resource_ = CreateMaybeMessage< ::google::storage::v2::Object >(GetArena());
  }
  return write_status_.resource_;
}
inline ::google::storage::v2::Object* QueryWriteStatusResponse::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.QueryWriteStatusResponse.resource)
  return _internal_mutable_resource();
}

inline bool QueryWriteStatusResponse::has_write_status() const {
  return write_status_case() != WRITE_STATUS_NOT_SET;
}
inline void QueryWriteStatusResponse::clear_has_write_status() {
  _oneof_case_[0] = WRITE_STATUS_NOT_SET;
}
inline QueryWriteStatusResponse::WriteStatusCase QueryWriteStatusResponse::write_status_case() const {
  return QueryWriteStatusResponse::WriteStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StartResumableWriteRequest

// .google.storage.v2.WriteObjectSpec write_object_spec = 1;
inline bool StartResumableWriteRequest::_internal_has_write_object_spec() const {
  return this != internal_default_instance() && write_object_spec_ != nullptr;
}
inline bool StartResumableWriteRequest::has_write_object_spec() const {
  return _internal_has_write_object_spec();
}
inline void StartResumableWriteRequest::clear_write_object_spec() {
  if (GetArena() == nullptr && write_object_spec_ != nullptr) {
    delete write_object_spec_;
  }
  write_object_spec_ = nullptr;
}
inline const ::google::storage::v2::WriteObjectSpec& StartResumableWriteRequest::_internal_write_object_spec() const {
  const ::google::storage::v2::WriteObjectSpec* p = write_object_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::WriteObjectSpec&>(
      ::google::storage::v2::_WriteObjectSpec_default_instance_);
}
inline const ::google::storage::v2::WriteObjectSpec& StartResumableWriteRequest::write_object_spec() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteRequest.write_object_spec)
  return _internal_write_object_spec();
}
inline void StartResumableWriteRequest::unsafe_arena_set_allocated_write_object_spec(
    ::google::storage::v2::WriteObjectSpec* write_object_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(write_object_spec_);
  }
  write_object_spec_ = write_object_spec;
  if (write_object_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.StartResumableWriteRequest.write_object_spec)
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::release_write_object_spec() {
  
  ::google::storage::v2::WriteObjectSpec* temp = write_object_spec_;
  write_object_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::unsafe_arena_release_write_object_spec() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteRequest.write_object_spec)
  
  ::google::storage::v2::WriteObjectSpec* temp = write_object_spec_;
  write_object_spec_ = nullptr;
  return temp;
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::_internal_mutable_write_object_spec() {
  
  if (write_object_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::WriteObjectSpec>(GetArena());
    write_object_spec_ = p;
  }
  return write_object_spec_;
}
inline ::google::storage::v2::WriteObjectSpec* StartResumableWriteRequest::mutable_write_object_spec() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteRequest.write_object_spec)
  return _internal_mutable_write_object_spec();
}
inline void StartResumableWriteRequest::set_allocated_write_object_spec(::google::storage::v2::WriteObjectSpec* write_object_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete write_object_spec_;
  }
  if (write_object_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(write_object_spec);
    if (message_arena != submessage_arena) {
      write_object_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_object_spec, submessage_arena);
    }
    
  } else {
    
  }
  write_object_spec_ = write_object_spec;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteRequest.write_object_spec)
}

// .google.storage.v2.CommonObjectRequestParams common_object_request_params = 3;
inline bool StartResumableWriteRequest::_internal_has_common_object_request_params() const {
  return this != internal_default_instance() && common_object_request_params_ != nullptr;
}
inline bool StartResumableWriteRequest::has_common_object_request_params() const {
  return _internal_has_common_object_request_params();
}
inline void StartResumableWriteRequest::clear_common_object_request_params() {
  if (GetArena() == nullptr && common_object_request_params_ != nullptr) {
    delete common_object_request_params_;
  }
  common_object_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonObjectRequestParams& StartResumableWriteRequest::_internal_common_object_request_params() const {
  const ::google::storage::v2::CommonObjectRequestParams* p = common_object_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonObjectRequestParams&>(
      ::google::storage::v2::_CommonObjectRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonObjectRequestParams& StartResumableWriteRequest::common_object_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
  return _internal_common_object_request_params();
}
inline void StartResumableWriteRequest::unsafe_arena_set_allocated_common_object_request_params(
    ::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_object_request_params_);
  }
  common_object_request_params_ = common_object_request_params;
  if (common_object_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::release_common_object_request_params() {
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::unsafe_arena_release_common_object_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
  
  ::google::storage::v2::CommonObjectRequestParams* temp = common_object_request_params_;
  common_object_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::_internal_mutable_common_object_request_params() {
  
  if (common_object_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonObjectRequestParams>(GetArena());
    common_object_request_params_ = p;
  }
  return common_object_request_params_;
}
inline ::google::storage::v2::CommonObjectRequestParams* StartResumableWriteRequest::mutable_common_object_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
  return _internal_mutable_common_object_request_params();
}
inline void StartResumableWriteRequest::set_allocated_common_object_request_params(::google::storage::v2::CommonObjectRequestParams* common_object_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_object_request_params_;
  }
  if (common_object_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_object_request_params);
    if (message_arena != submessage_arena) {
      common_object_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_object_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_object_request_params_ = common_object_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteRequest.common_object_request_params)
}

// .google.storage.v2.CommonRequestParams common_request_params = 4;
inline bool StartResumableWriteRequest::_internal_has_common_request_params() const {
  return this != internal_default_instance() && common_request_params_ != nullptr;
}
inline bool StartResumableWriteRequest::has_common_request_params() const {
  return _internal_has_common_request_params();
}
inline void StartResumableWriteRequest::clear_common_request_params() {
  if (GetArena() == nullptr && common_request_params_ != nullptr) {
    delete common_request_params_;
  }
  common_request_params_ = nullptr;
}
inline const ::google::storage::v2::CommonRequestParams& StartResumableWriteRequest::_internal_common_request_params() const {
  const ::google::storage::v2::CommonRequestParams* p = common_request_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::CommonRequestParams&>(
      ::google::storage::v2::_CommonRequestParams_default_instance_);
}
inline const ::google::storage::v2::CommonRequestParams& StartResumableWriteRequest::common_request_params() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteRequest.common_request_params)
  return _internal_common_request_params();
}
inline void StartResumableWriteRequest::unsafe_arena_set_allocated_common_request_params(
    ::google::storage::v2::CommonRequestParams* common_request_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_request_params_);
  }
  common_request_params_ = common_request_params;
  if (common_request_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.StartResumableWriteRequest.common_request_params)
}
inline ::google::storage::v2::CommonRequestParams* StartResumableWriteRequest::release_common_request_params() {
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* StartResumableWriteRequest::unsafe_arena_release_common_request_params() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteRequest.common_request_params)
  
  ::google::storage::v2::CommonRequestParams* temp = common_request_params_;
  common_request_params_ = nullptr;
  return temp;
}
inline ::google::storage::v2::CommonRequestParams* StartResumableWriteRequest::_internal_mutable_common_request_params() {
  
  if (common_request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::CommonRequestParams>(GetArena());
    common_request_params_ = p;
  }
  return common_request_params_;
}
inline ::google::storage::v2::CommonRequestParams* StartResumableWriteRequest::mutable_common_request_params() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteRequest.common_request_params)
  return _internal_mutable_common_request_params();
}
inline void StartResumableWriteRequest::set_allocated_common_request_params(::google::storage::v2::CommonRequestParams* common_request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_request_params_;
  }
  if (common_request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common_request_params);
    if (message_arena != submessage_arena) {
      common_request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_request_params, submessage_arena);
    }
    
  } else {
    
  }
  common_request_params_ = common_request_params;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteRequest.common_request_params)
}

// -------------------------------------------------------------------

// StartResumableWriteResponse

// string upload_id = 1;
inline void StartResumableWriteResponse::clear_upload_id() {
  upload_id_.ClearToEmpty();
}
inline const std::string& StartResumableWriteResponse::upload_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.StartResumableWriteResponse.upload_id)
  return _internal_upload_id();
}
inline void StartResumableWriteResponse::set_upload_id(const std::string& value) {
  _internal_set_upload_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.StartResumableWriteResponse.upload_id)
}
inline std::string* StartResumableWriteResponse::mutable_upload_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.StartResumableWriteResponse.upload_id)
  return _internal_mutable_upload_id();
}
inline const std::string& StartResumableWriteResponse::_internal_upload_id() const {
  return upload_id_.Get();
}
inline void StartResumableWriteResponse::_internal_set_upload_id(const std::string& value) {
  
  upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StartResumableWriteResponse::set_upload_id(std::string&& value) {
  
  upload_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.StartResumableWriteResponse.upload_id)
}
inline void StartResumableWriteResponse::set_upload_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.StartResumableWriteResponse.upload_id)
}
inline void StartResumableWriteResponse::set_upload_id(const char* value,
    size_t size) {
  
  upload_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.StartResumableWriteResponse.upload_id)
}
inline std::string* StartResumableWriteResponse::_internal_mutable_upload_id() {
  
  return upload_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StartResumableWriteResponse::release_upload_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.StartResumableWriteResponse.upload_id)
  return upload_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartResumableWriteResponse::set_allocated_upload_id(std::string* upload_id) {
  if (upload_id != nullptr) {
    
  } else {
    
  }
  upload_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.StartResumableWriteResponse.upload_id)
}

// -------------------------------------------------------------------

// CommonObjectRequestParams

// string encryption_algorithm = 1;
inline void CommonObjectRequestParams::clear_encryption_algorithm() {
  encryption_algorithm_.ClearToEmpty();
}
inline const std::string& CommonObjectRequestParams::encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
  return _internal_encryption_algorithm();
}
inline void CommonObjectRequestParams::set_encryption_algorithm(const std::string& value) {
  _internal_set_encryption_algorithm(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}
inline std::string* CommonObjectRequestParams::mutable_encryption_algorithm() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
  return _internal_mutable_encryption_algorithm();
}
inline const std::string& CommonObjectRequestParams::_internal_encryption_algorithm() const {
  return encryption_algorithm_.Get();
}
inline void CommonObjectRequestParams::_internal_set_encryption_algorithm(const std::string& value) {
  
  encryption_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonObjectRequestParams::set_encryption_algorithm(std::string&& value) {
  
  encryption_algorithm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}
inline void CommonObjectRequestParams::set_encryption_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryption_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}
inline void CommonObjectRequestParams::set_encryption_algorithm(const char* value,
    size_t size) {
  
  encryption_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}
inline std::string* CommonObjectRequestParams::_internal_mutable_encryption_algorithm() {
  
  return encryption_algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonObjectRequestParams::release_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
  return encryption_algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonObjectRequestParams::set_allocated_encryption_algorithm(std::string* encryption_algorithm) {
  if (encryption_algorithm != nullptr) {
    
  } else {
    
  }
  encryption_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonObjectRequestParams.encryption_algorithm)
}

// string encryption_key = 2;
inline void CommonObjectRequestParams::clear_encryption_key() {
  encryption_key_.ClearToEmpty();
}
inline const std::string& CommonObjectRequestParams::encryption_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonObjectRequestParams.encryption_key)
  return _internal_encryption_key();
}
inline void CommonObjectRequestParams::set_encryption_key(const std::string& value) {
  _internal_set_encryption_key(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonObjectRequestParams.encryption_key)
}
inline std::string* CommonObjectRequestParams::mutable_encryption_key() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonObjectRequestParams.encryption_key)
  return _internal_mutable_encryption_key();
}
inline const std::string& CommonObjectRequestParams::_internal_encryption_key() const {
  return encryption_key_.Get();
}
inline void CommonObjectRequestParams::_internal_set_encryption_key(const std::string& value) {
  
  encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonObjectRequestParams::set_encryption_key(std::string&& value) {
  
  encryption_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.CommonObjectRequestParams.encryption_key)
}
inline void CommonObjectRequestParams::set_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.CommonObjectRequestParams.encryption_key)
}
inline void CommonObjectRequestParams::set_encryption_key(const char* value,
    size_t size) {
  
  encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.CommonObjectRequestParams.encryption_key)
}
inline std::string* CommonObjectRequestParams::_internal_mutable_encryption_key() {
  
  return encryption_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonObjectRequestParams::release_encryption_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonObjectRequestParams.encryption_key)
  return encryption_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonObjectRequestParams::set_allocated_encryption_key(std::string* encryption_key) {
  if (encryption_key != nullptr) {
    
  } else {
    
  }
  encryption_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonObjectRequestParams.encryption_key)
}

// string encryption_key_sha256 = 3;
inline void CommonObjectRequestParams::clear_encryption_key_sha256() {
  encryption_key_sha256_.ClearToEmpty();
}
inline const std::string& CommonObjectRequestParams::encryption_key_sha256() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
  return _internal_encryption_key_sha256();
}
inline void CommonObjectRequestParams::set_encryption_key_sha256(const std::string& value) {
  _internal_set_encryption_key_sha256(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
}
inline std::string* CommonObjectRequestParams::mutable_encryption_key_sha256() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
  return _internal_mutable_encryption_key_sha256();
}
inline const std::string& CommonObjectRequestParams::_internal_encryption_key_sha256() const {
  return encryption_key_sha256_.Get();
}
inline void CommonObjectRequestParams::_internal_set_encryption_key_sha256(const std::string& value) {
  
  encryption_key_sha256_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonObjectRequestParams::set_encryption_key_sha256(std::string&& value) {
  
  encryption_key_sha256_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
}
inline void CommonObjectRequestParams::set_encryption_key_sha256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryption_key_sha256_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
}
inline void CommonObjectRequestParams::set_encryption_key_sha256(const char* value,
    size_t size) {
  
  encryption_key_sha256_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
}
inline std::string* CommonObjectRequestParams::_internal_mutable_encryption_key_sha256() {
  
  return encryption_key_sha256_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonObjectRequestParams::release_encryption_key_sha256() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
  return encryption_key_sha256_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonObjectRequestParams::set_allocated_encryption_key_sha256(std::string* encryption_key_sha256) {
  if (encryption_key_sha256 != nullptr) {
    
  } else {
    
  }
  encryption_key_sha256_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_key_sha256,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonObjectRequestParams.encryption_key_sha256)
}

// -------------------------------------------------------------------

// CommonRequestParams

// string user_project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CommonRequestParams::clear_user_project() {
  user_project_.ClearToEmpty();
}
inline const std::string& CommonRequestParams::user_project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.CommonRequestParams.user_project)
  return _internal_user_project();
}
inline void CommonRequestParams::set_user_project(const std::string& value) {
  _internal_set_user_project(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.CommonRequestParams.user_project)
}
inline std::string* CommonRequestParams::mutable_user_project() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.CommonRequestParams.user_project)
  return _internal_mutable_user_project();
}
inline const std::string& CommonRequestParams::_internal_user_project() const {
  return user_project_.Get();
}
inline void CommonRequestParams::_internal_set_user_project(const std::string& value) {
  
  user_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonRequestParams::set_user_project(std::string&& value) {
  
  user_project_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.CommonRequestParams.user_project)
}
inline void CommonRequestParams::set_user_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.CommonRequestParams.user_project)
}
inline void CommonRequestParams::set_user_project(const char* value,
    size_t size) {
  
  user_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.CommonRequestParams.user_project)
}
inline std::string* CommonRequestParams::_internal_mutable_user_project() {
  
  return user_project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonRequestParams::release_user_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.CommonRequestParams.user_project)
  return user_project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonRequestParams::set_allocated_user_project(std::string* user_project) {
  if (user_project != nullptr) {
    
  } else {
    
  }
  user_project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_project,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.CommonRequestParams.user_project)
}

// -------------------------------------------------------------------

// ServiceConstants

// -------------------------------------------------------------------

// Bucket_Billing

// bool requester_pays = 1;
inline void Bucket_Billing::clear_requester_pays() {
  requester_pays_ = false;
}
inline bool Bucket_Billing::_internal_requester_pays() const {
  return requester_pays_;
}
inline bool Bucket_Billing::requester_pays() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Billing.requester_pays)
  return _internal_requester_pays();
}
inline void Bucket_Billing::_internal_set_requester_pays(bool value) {
  
  requester_pays_ = value;
}
inline void Bucket_Billing::set_requester_pays(bool value) {
  _internal_set_requester_pays(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Billing.requester_pays)
}

// -------------------------------------------------------------------

// Bucket_Cors

// repeated string origin = 1;
inline int Bucket_Cors::_internal_origin_size() const {
  return origin_.size();
}
inline int Bucket_Cors::origin_size() const {
  return _internal_origin_size();
}
inline void Bucket_Cors::clear_origin() {
  origin_.Clear();
}
inline std::string* Bucket_Cors::add_origin() {
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Cors.origin)
  return _internal_add_origin();
}
inline const std::string& Bucket_Cors::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline const std::string& Bucket_Cors::origin(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.origin)
  return _internal_origin(index);
}
inline std::string* Bucket_Cors::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Cors.origin)
  return origin_.Mutable(index);
}
inline void Bucket_Cors::set_origin(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.origin)
  origin_.Mutable(index)->assign(value);
}
inline void Bucket_Cors::set_origin(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.origin)
  origin_.Mutable(index)->assign(std::move(value));
}
inline void Bucket_Cors::set_origin(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::set_origin(int index, const char* value, size_t size) {
  origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Cors.origin)
}
inline std::string* Bucket_Cors::_internal_add_origin() {
  return origin_.Add();
}
inline void Bucket_Cors::add_origin(const std::string& value) {
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::add_origin(std::string&& value) {
  origin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::add_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Cors.origin)
}
inline void Bucket_Cors::add_origin(const char* value, size_t size) {
  origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Cors.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Cors::origin() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Cors.origin)
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Cors::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Cors.origin)
  return &origin_;
}

// repeated string method = 2;
inline int Bucket_Cors::_internal_method_size() const {
  return method_.size();
}
inline int Bucket_Cors::method_size() const {
  return _internal_method_size();
}
inline void Bucket_Cors::clear_method() {
  method_.Clear();
}
inline std::string* Bucket_Cors::add_method() {
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Cors.method)
  return _internal_add_method();
}
inline const std::string& Bucket_Cors::_internal_method(int index) const {
  return method_.Get(index);
}
inline const std::string& Bucket_Cors::method(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.method)
  return _internal_method(index);
}
inline std::string* Bucket_Cors::mutable_method(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Cors.method)
  return method_.Mutable(index);
}
inline void Bucket_Cors::set_method(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.method)
  method_.Mutable(index)->assign(value);
}
inline void Bucket_Cors::set_method(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.method)
  method_.Mutable(index)->assign(std::move(value));
}
inline void Bucket_Cors::set_method(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  method_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::set_method(int index, const char* value, size_t size) {
  method_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Cors.method)
}
inline std::string* Bucket_Cors::_internal_add_method() {
  return method_.Add();
}
inline void Bucket_Cors::add_method(const std::string& value) {
  method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::add_method(std::string&& value) {
  method_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::add_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Cors.method)
}
inline void Bucket_Cors::add_method(const char* value, size_t size) {
  method_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Cors.method)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Cors::method() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Cors.method)
  return method_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Cors::mutable_method() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Cors.method)
  return &method_;
}

// repeated string response_header = 3;
inline int Bucket_Cors::_internal_response_header_size() const {
  return response_header_.size();
}
inline int Bucket_Cors::response_header_size() const {
  return _internal_response_header_size();
}
inline void Bucket_Cors::clear_response_header() {
  response_header_.Clear();
}
inline std::string* Bucket_Cors::add_response_header() {
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Cors.response_header)
  return _internal_add_response_header();
}
inline const std::string& Bucket_Cors::_internal_response_header(int index) const {
  return response_header_.Get(index);
}
inline const std::string& Bucket_Cors::response_header(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.response_header)
  return _internal_response_header(index);
}
inline std::string* Bucket_Cors::mutable_response_header(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Cors.response_header)
  return response_header_.Mutable(index);
}
inline void Bucket_Cors::set_response_header(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.response_header)
  response_header_.Mutable(index)->assign(value);
}
inline void Bucket_Cors::set_response_header(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.response_header)
  response_header_.Mutable(index)->assign(std::move(value));
}
inline void Bucket_Cors::set_response_header(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_header_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::set_response_header(int index, const char* value, size_t size) {
  response_header_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Cors.response_header)
}
inline std::string* Bucket_Cors::_internal_add_response_header() {
  return response_header_.Add();
}
inline void Bucket_Cors::add_response_header(const std::string& value) {
  response_header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::add_response_header(std::string&& value) {
  response_header_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::add_response_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_header_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Cors.response_header)
}
inline void Bucket_Cors::add_response_header(const char* value, size_t size) {
  response_header_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Cors.response_header)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Cors::response_header() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Cors.response_header)
  return response_header_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Cors::mutable_response_header() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Cors.response_header)
  return &response_header_;
}

// int32 max_age_seconds = 4;
inline void Bucket_Cors::clear_max_age_seconds() {
  max_age_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Cors::_internal_max_age_seconds() const {
  return max_age_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Cors::max_age_seconds() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Cors.max_age_seconds)
  return _internal_max_age_seconds();
}
inline void Bucket_Cors::_internal_set_max_age_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_age_seconds_ = value;
}
inline void Bucket_Cors::set_max_age_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_age_seconds(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Cors.max_age_seconds)
}

// -------------------------------------------------------------------

// Bucket_Encryption

// string default_kms_key = 1 [(.google.api.resource_reference) = {
inline void Bucket_Encryption::clear_default_kms_key() {
  default_kms_key_.ClearToEmpty();
}
inline const std::string& Bucket_Encryption::default_kms_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Encryption.default_kms_key)
  return _internal_default_kms_key();
}
inline void Bucket_Encryption::set_default_kms_key(const std::string& value) {
  _internal_set_default_kms_key(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Encryption.default_kms_key)
}
inline std::string* Bucket_Encryption::mutable_default_kms_key() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Encryption.default_kms_key)
  return _internal_mutable_default_kms_key();
}
inline const std::string& Bucket_Encryption::_internal_default_kms_key() const {
  return default_kms_key_.Get();
}
inline void Bucket_Encryption::_internal_set_default_kms_key(const std::string& value) {
  
  default_kms_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Encryption::set_default_kms_key(std::string&& value) {
  
  default_kms_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Encryption.default_kms_key)
}
inline void Bucket_Encryption::set_default_kms_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_kms_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Encryption.default_kms_key)
}
inline void Bucket_Encryption::set_default_kms_key(const char* value,
    size_t size) {
  
  default_kms_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Encryption.default_kms_key)
}
inline std::string* Bucket_Encryption::_internal_mutable_default_kms_key() {
  
  return default_kms_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Encryption::release_default_kms_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Encryption.default_kms_key)
  return default_kms_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Encryption::set_allocated_default_kms_key(std::string* default_kms_key) {
  if (default_kms_key != nullptr) {
    
  } else {
    
  }
  default_kms_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_kms_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Encryption.default_kms_key)
}

// -------------------------------------------------------------------

// Bucket_IamConfig_UniformBucketLevelAccess

// bool enabled = 1;
inline void Bucket_IamConfig_UniformBucketLevelAccess::clear_enabled() {
  enabled_ = false;
}
inline bool Bucket_IamConfig_UniformBucketLevelAccess::_internal_enabled() const {
  return enabled_;
}
inline bool Bucket_IamConfig_UniformBucketLevelAccess::enabled() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.enabled)
  return _internal_enabled();
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.enabled)
}

// .google.protobuf.Timestamp lock_time = 2;
inline bool Bucket_IamConfig_UniformBucketLevelAccess::_internal_has_lock_time() const {
  return this != internal_default_instance() && lock_time_ != nullptr;
}
inline bool Bucket_IamConfig_UniformBucketLevelAccess::has_lock_time() const {
  return _internal_has_lock_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_IamConfig_UniformBucketLevelAccess::_internal_lock_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = lock_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_IamConfig_UniformBucketLevelAccess::lock_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
  return _internal_lock_time();
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::unsafe_arena_set_allocated_lock_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* lock_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_time_);
  }
  lock_time_ = lock_time;
  if (lock_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::release_lock_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lock_time_;
  lock_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::unsafe_arena_release_lock_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lock_time_;
  lock_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::_internal_mutable_lock_time() {
  
  if (lock_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    lock_time_ = p;
  }
  return lock_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_IamConfig_UniformBucketLevelAccess::mutable_lock_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
  return _internal_mutable_lock_time();
}
inline void Bucket_IamConfig_UniformBucketLevelAccess::set_allocated_lock_time(PROTOBUF_NAMESPACE_ID::Timestamp* lock_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_time_);
  }
  if (lock_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_time)->GetArena();
    if (message_arena != submessage_arena) {
      lock_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_time, submessage_arena);
    }
    
  } else {
    
  }
  lock_time_ = lock_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess.lock_time)
}

// -------------------------------------------------------------------

// Bucket_IamConfig

// .google.storage.v2.Bucket.IamConfig.UniformBucketLevelAccess uniform_bucket_level_access = 1;
inline bool Bucket_IamConfig::_internal_has_uniform_bucket_level_access() const {
  return this != internal_default_instance() && uniform_bucket_level_access_ != nullptr;
}
inline bool Bucket_IamConfig::has_uniform_bucket_level_access() const {
  return _internal_has_uniform_bucket_level_access();
}
inline void Bucket_IamConfig::clear_uniform_bucket_level_access() {
  if (GetArena() == nullptr && uniform_bucket_level_access_ != nullptr) {
    delete uniform_bucket_level_access_;
  }
  uniform_bucket_level_access_ = nullptr;
}
inline const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& Bucket_IamConfig::_internal_uniform_bucket_level_access() const {
  const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* p = uniform_bucket_level_access_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess&>(
      ::google::storage::v2::_Bucket_IamConfig_UniformBucketLevelAccess_default_instance_);
}
inline const ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess& Bucket_IamConfig::uniform_bucket_level_access() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
  return _internal_uniform_bucket_level_access();
}
inline void Bucket_IamConfig::unsafe_arena_set_allocated_uniform_bucket_level_access(
    ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_bucket_level_access_);
  }
  uniform_bucket_level_access_ = uniform_bucket_level_access;
  if (uniform_bucket_level_access) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::release_uniform_bucket_level_access() {
  
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* temp = uniform_bucket_level_access_;
  uniform_bucket_level_access_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::unsafe_arena_release_uniform_bucket_level_access() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
  
  ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* temp = uniform_bucket_level_access_;
  uniform_bucket_level_access_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::_internal_mutable_uniform_bucket_level_access() {
  
  if (uniform_bucket_level_access_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess>(GetArena());
    uniform_bucket_level_access_ = p;
  }
  return uniform_bucket_level_access_;
}
inline ::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* Bucket_IamConfig::mutable_uniform_bucket_level_access() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
  return _internal_mutable_uniform_bucket_level_access();
}
inline void Bucket_IamConfig::set_allocated_uniform_bucket_level_access(::google::storage::v2::Bucket_IamConfig_UniformBucketLevelAccess* uniform_bucket_level_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uniform_bucket_level_access_;
  }
  if (uniform_bucket_level_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uniform_bucket_level_access);
    if (message_arena != submessage_arena) {
      uniform_bucket_level_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_bucket_level_access, submessage_arena);
    }
    
  } else {
    
  }
  uniform_bucket_level_access_ = uniform_bucket_level_access;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.IamConfig.uniform_bucket_level_access)
}

// .google.storage.v2.Bucket.IamConfig.PublicAccessPrevention public_access_prevention = 2;
inline void Bucket_IamConfig::clear_public_access_prevention() {
  public_access_prevention_ = 0;
}
inline ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention Bucket_IamConfig::_internal_public_access_prevention() const {
  return static_cast< ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention >(public_access_prevention_);
}
inline ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention Bucket_IamConfig::public_access_prevention() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.IamConfig.public_access_prevention)
  return _internal_public_access_prevention();
}
inline void Bucket_IamConfig::_internal_set_public_access_prevention(::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention value) {
  
  public_access_prevention_ = value;
}
inline void Bucket_IamConfig::set_public_access_prevention(::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention value) {
  _internal_set_public_access_prevention(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.IamConfig.public_access_prevention)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle_Rule_Action

// string type = 1;
inline void Bucket_Lifecycle_Rule_Action::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Bucket_Lifecycle_Rule_Action::type() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
  return _internal_type();
}
inline void Bucket_Lifecycle_Rule_Action::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}
inline std::string* Bucket_Lifecycle_Rule_Action::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
  return _internal_mutable_type();
}
inline const std::string& Bucket_Lifecycle_Rule_Action::_internal_type() const {
  return type_.Get();
}
inline void Bucket_Lifecycle_Rule_Action::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Lifecycle_Rule_Action::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}
inline void Bucket_Lifecycle_Rule_Action::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}
inline void Bucket_Lifecycle_Rule_Action::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}
inline std::string* Bucket_Lifecycle_Rule_Action::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Lifecycle_Rule_Action::release_type() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Lifecycle_Rule_Action::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Action.type)
}

// string storage_class = 2;
inline void Bucket_Lifecycle_Rule_Action::clear_storage_class() {
  storage_class_.ClearToEmpty();
}
inline const std::string& Bucket_Lifecycle_Rule_Action::storage_class() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
  return _internal_storage_class();
}
inline void Bucket_Lifecycle_Rule_Action::set_storage_class(const std::string& value) {
  _internal_set_storage_class(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}
inline std::string* Bucket_Lifecycle_Rule_Action::mutable_storage_class() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
  return _internal_mutable_storage_class();
}
inline const std::string& Bucket_Lifecycle_Rule_Action::_internal_storage_class() const {
  return storage_class_.Get();
}
inline void Bucket_Lifecycle_Rule_Action::_internal_set_storage_class(const std::string& value) {
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Lifecycle_Rule_Action::set_storage_class(std::string&& value) {
  
  storage_class_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}
inline void Bucket_Lifecycle_Rule_Action::set_storage_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}
inline void Bucket_Lifecycle_Rule_Action::set_storage_class(const char* value,
    size_t size) {
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}
inline std::string* Bucket_Lifecycle_Rule_Action::_internal_mutable_storage_class() {
  
  return storage_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Lifecycle_Rule_Action::release_storage_class() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
  return storage_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Lifecycle_Rule_Action::set_allocated_storage_class(std::string* storage_class) {
  if (storage_class != nullptr) {
    
  } else {
    
  }
  storage_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Action.storage_class)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle_Rule_Condition

// int32 age_days = 1;
inline void Bucket_Lifecycle_Rule_Condition::clear_age_days() {
  age_days_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::_internal_age_days() const {
  return age_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::age_days() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.age_days)
  return _internal_age_days();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_age_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_days_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_age_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age_days(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.age_days)
}

// .google.protobuf.Timestamp created_before_time = 2;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_created_before_time() const {
  return this != internal_default_instance() && created_before_time_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_created_before_time() const {
  return _internal_has_created_before_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Lifecycle_Rule_Condition::_internal_created_before_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_before_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Lifecycle_Rule_Condition::created_before_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before_time)
  return _internal_created_before_time();
}
inline void Bucket_Lifecycle_Rule_Condition::unsafe_arena_set_allocated_created_before_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_before_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_before_time_);
  }
  created_before_time_ = created_before_time;
  if (created_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::release_created_before_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_before_time_;
  created_before_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::unsafe_arena_release_created_before_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_before_time_;
  created_before_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::_internal_mutable_created_before_time() {
  
  if (created_before_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_before_time_ = p;
  }
  return created_before_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::mutable_created_before_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before_time)
  return _internal_mutable_created_before_time();
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_created_before_time(PROTOBUF_NAMESPACE_ID::Timestamp* created_before_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_before_time_);
  }
  if (created_before_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_before_time)->GetArena();
    if (message_arena != submessage_arena) {
      created_before_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_before_time, submessage_arena);
    }
    
  } else {
    
  }
  created_before_time_ = created_before_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.created_before_time)
}

// bool is_live = 3;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_is_live() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_is_live() const {
  return _internal_has_is_live();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_is_live() {
  is_live_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Bucket_Lifecycle_Rule_Condition::_internal_is_live() const {
  return is_live_;
}
inline bool Bucket_Lifecycle_Rule_Condition::is_live() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.is_live)
  return _internal_is_live();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_is_live(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_live_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_is_live(bool value) {
  _internal_set_is_live(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.is_live)
}

// int32 num_newer_versions = 4;
inline void Bucket_Lifecycle_Rule_Condition::clear_num_newer_versions() {
  num_newer_versions_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::_internal_num_newer_versions() const {
  return num_newer_versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::num_newer_versions() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.num_newer_versions)
  return _internal_num_newer_versions();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_num_newer_versions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_newer_versions_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_num_newer_versions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_newer_versions(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.num_newer_versions)
}

// repeated string matches_storage_class = 5;
inline int Bucket_Lifecycle_Rule_Condition::_internal_matches_storage_class_size() const {
  return matches_storage_class_.size();
}
inline int Bucket_Lifecycle_Rule_Condition::matches_storage_class_size() const {
  return _internal_matches_storage_class_size();
}
inline void Bucket_Lifecycle_Rule_Condition::clear_matches_storage_class() {
  matches_storage_class_.Clear();
}
inline std::string* Bucket_Lifecycle_Rule_Condition::add_matches_storage_class() {
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return _internal_add_matches_storage_class();
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::_internal_matches_storage_class(int index) const {
  return matches_storage_class_.Get(index);
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::matches_storage_class(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return _internal_matches_storage_class(index);
}
inline std::string* Bucket_Lifecycle_Rule_Condition::mutable_matches_storage_class(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return matches_storage_class_.Mutable(index);
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  matches_storage_class_.Mutable(index)->assign(value);
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  matches_storage_class_.Mutable(index)->assign(std::move(value));
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matches_storage_class_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_storage_class(int index, const char* value, size_t size) {
  matches_storage_class_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline std::string* Bucket_Lifecycle_Rule_Condition::_internal_add_matches_storage_class() {
  return matches_storage_class_.Add();
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(const std::string& value) {
  matches_storage_class_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(std::string&& value) {
  matches_storage_class_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matches_storage_class_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline void Bucket_Lifecycle_Rule_Condition::add_matches_storage_class(const char* value, size_t size) {
  matches_storage_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket_Lifecycle_Rule_Condition::matches_storage_class() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return matches_storage_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket_Lifecycle_Rule_Condition::mutable_matches_storage_class() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_storage_class)
  return &matches_storage_class_;
}

// string matches_pattern = 6;
inline void Bucket_Lifecycle_Rule_Condition::clear_matches_pattern() {
  matches_pattern_.ClearToEmpty();
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::matches_pattern() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
  return _internal_matches_pattern();
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_pattern(const std::string& value) {
  _internal_set_matches_pattern(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
}
inline std::string* Bucket_Lifecycle_Rule_Condition::mutable_matches_pattern() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
  return _internal_mutable_matches_pattern();
}
inline const std::string& Bucket_Lifecycle_Rule_Condition::_internal_matches_pattern() const {
  return matches_pattern_.Get();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_matches_pattern(const std::string& value) {
  
  matches_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_pattern(std::string&& value) {
  
  matches_pattern_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
}
inline void Bucket_Lifecycle_Rule_Condition::set_matches_pattern(const char* value,
    size_t size) {
  
  matches_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
}
inline std::string* Bucket_Lifecycle_Rule_Condition::_internal_mutable_matches_pattern() {
  
  return matches_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Lifecycle_Rule_Condition::release_matches_pattern() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
  return matches_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_matches_pattern(std::string* matches_pattern) {
  if (matches_pattern != nullptr) {
    
  } else {
    
  }
  matches_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.matches_pattern)
}

// int32 days_since_custom_time = 7;
inline void Bucket_Lifecycle_Rule_Condition::clear_days_since_custom_time() {
  days_since_custom_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::_internal_days_since_custom_time() const {
  return days_since_custom_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::days_since_custom_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_custom_time)
  return _internal_days_since_custom_time();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_days_since_custom_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  days_since_custom_time_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_days_since_custom_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days_since_custom_time(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_custom_time)
}

// .google.protobuf.Timestamp custom_time_before_time = 8;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_custom_time_before_time() const {
  return this != internal_default_instance() && custom_time_before_time_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_custom_time_before_time() const {
  return _internal_has_custom_time_before_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Lifecycle_Rule_Condition::_internal_custom_time_before_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = custom_time_before_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Lifecycle_Rule_Condition::custom_time_before_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before_time)
  return _internal_custom_time_before_time();
}
inline void Bucket_Lifecycle_Rule_Condition::unsafe_arena_set_allocated_custom_time_before_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_before_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time_before_time_);
  }
  custom_time_before_time_ = custom_time_before_time;
  if (custom_time_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::release_custom_time_before_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = custom_time_before_time_;
  custom_time_before_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::unsafe_arena_release_custom_time_before_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = custom_time_before_time_;
  custom_time_before_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::_internal_mutable_custom_time_before_time() {
  
  if (custom_time_before_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    custom_time_before_time_ = p;
  }
  return custom_time_before_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::mutable_custom_time_before_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before_time)
  return _internal_mutable_custom_time_before_time();
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_custom_time_before_time(PROTOBUF_NAMESPACE_ID::Timestamp* custom_time_before_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time_before_time_);
  }
  if (custom_time_before_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time_before_time)->GetArena();
    if (message_arena != submessage_arena) {
      custom_time_before_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_time_before_time, submessage_arena);
    }
    
  } else {
    
  }
  custom_time_before_time_ = custom_time_before_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.custom_time_before_time)
}

// int32 days_since_noncurrent_time = 9;
inline void Bucket_Lifecycle_Rule_Condition::clear_days_since_noncurrent_time() {
  days_since_noncurrent_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::_internal_days_since_noncurrent_time() const {
  return days_since_noncurrent_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bucket_Lifecycle_Rule_Condition::days_since_noncurrent_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_noncurrent_time)
  return _internal_days_since_noncurrent_time();
}
inline void Bucket_Lifecycle_Rule_Condition::_internal_set_days_since_noncurrent_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  days_since_noncurrent_time_ = value;
}
inline void Bucket_Lifecycle_Rule_Condition::set_days_since_noncurrent_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days_since_noncurrent_time(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Lifecycle.Rule.Condition.days_since_noncurrent_time)
}

// .google.protobuf.Timestamp noncurrent_time_before_time = 10;
inline bool Bucket_Lifecycle_Rule_Condition::_internal_has_noncurrent_time_before_time() const {
  return this != internal_default_instance() && noncurrent_time_before_time_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule_Condition::has_noncurrent_time_before_time() const {
  return _internal_has_noncurrent_time_before_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Lifecycle_Rule_Condition::_internal_noncurrent_time_before_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = noncurrent_time_before_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_Lifecycle_Rule_Condition::noncurrent_time_before_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before_time)
  return _internal_noncurrent_time_before_time();
}
inline void Bucket_Lifecycle_Rule_Condition::unsafe_arena_set_allocated_noncurrent_time_before_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* noncurrent_time_before_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noncurrent_time_before_time_);
  }
  noncurrent_time_before_time_ = noncurrent_time_before_time;
  if (noncurrent_time_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::release_noncurrent_time_before_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = noncurrent_time_before_time_;
  noncurrent_time_before_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::unsafe_arena_release_noncurrent_time_before_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = noncurrent_time_before_time_;
  noncurrent_time_before_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::_internal_mutable_noncurrent_time_before_time() {
  
  if (noncurrent_time_before_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    noncurrent_time_before_time_ = p;
  }
  return noncurrent_time_before_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_Lifecycle_Rule_Condition::mutable_noncurrent_time_before_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before_time)
  return _internal_mutable_noncurrent_time_before_time();
}
inline void Bucket_Lifecycle_Rule_Condition::set_allocated_noncurrent_time_before_time(PROTOBUF_NAMESPACE_ID::Timestamp* noncurrent_time_before_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(noncurrent_time_before_time_);
  }
  if (noncurrent_time_before_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noncurrent_time_before_time)->GetArena();
    if (message_arena != submessage_arena) {
      noncurrent_time_before_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noncurrent_time_before_time, submessage_arena);
    }
    
  } else {
    
  }
  noncurrent_time_before_time_ = noncurrent_time_before_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.Condition.noncurrent_time_before_time)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle_Rule

// .google.storage.v2.Bucket.Lifecycle.Rule.Action action = 1;
inline bool Bucket_Lifecycle_Rule::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule::has_action() const {
  return _internal_has_action();
}
inline void Bucket_Lifecycle_Rule::clear_action() {
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& Bucket_Lifecycle_Rule::_internal_action() const {
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Action* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Lifecycle_Rule_Action&>(
      ::google::storage::v2::_Bucket_Lifecycle_Rule_Action_default_instance_);
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Action& Bucket_Lifecycle_Rule::action() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.action)
  return _internal_action();
}
inline void Bucket_Lifecycle_Rule::unsafe_arena_set_allocated_action(
    ::google::storage::v2::Bucket_Lifecycle_Rule_Action* action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.action)
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::release_action() {
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* temp = action_;
  action_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.action)
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Action>(GetArena());
    action_ = p;
  }
  return action_;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Action* Bucket_Lifecycle_Rule::mutable_action() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.action)
  return _internal_mutable_action();
}
inline void Bucket_Lifecycle_Rule::set_allocated_action(::google::storage::v2::Bucket_Lifecycle_Rule_Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.action)
}

// .google.storage.v2.Bucket.Lifecycle.Rule.Condition condition = 2;
inline bool Bucket_Lifecycle_Rule::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool Bucket_Lifecycle_Rule::has_condition() const {
  return _internal_has_condition();
}
inline void Bucket_Lifecycle_Rule::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& Bucket_Lifecycle_Rule::_internal_condition() const {
  const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition&>(
      ::google::storage::v2::_Bucket_Lifecycle_Rule_Condition_default_instance_);
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule_Condition& Bucket_Lifecycle_Rule::condition() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.Rule.condition)
  return _internal_condition();
}
inline void Bucket_Lifecycle_Rule::unsafe_arena_set_allocated_condition(
    ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.condition)
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::release_condition() {
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Lifecycle.Rule.condition)
  
  ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle_Rule_Condition>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule_Condition* Bucket_Lifecycle_Rule::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.Rule.condition)
  return _internal_mutable_condition();
}
inline void Bucket_Lifecycle_Rule::set_allocated_condition(::google::storage::v2::Bucket_Lifecycle_Rule_Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Lifecycle.Rule.condition)
}

// -------------------------------------------------------------------

// Bucket_Lifecycle

// repeated .google.storage.v2.Bucket.Lifecycle.Rule rule = 1;
inline int Bucket_Lifecycle::_internal_rule_size() const {
  return rule_.size();
}
inline int Bucket_Lifecycle::rule_size() const {
  return _internal_rule_size();
}
inline void Bucket_Lifecycle::clear_rule() {
  rule_.Clear();
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule* Bucket_Lifecycle::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Lifecycle.rule)
  return rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >*
Bucket_Lifecycle::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.Lifecycle.rule)
  return &rule_;
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule& Bucket_Lifecycle::_internal_rule(int index) const {
  return rule_.Get(index);
}
inline const ::google::storage::v2::Bucket_Lifecycle_Rule& Bucket_Lifecycle::rule(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Lifecycle.rule)
  return _internal_rule(index);
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule* Bucket_Lifecycle::_internal_add_rule() {
  return rule_.Add();
}
inline ::google::storage::v2::Bucket_Lifecycle_Rule* Bucket_Lifecycle::add_rule() {
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.Lifecycle.rule)
  return _internal_add_rule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Lifecycle_Rule >&
Bucket_Lifecycle::rule() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.Lifecycle.rule)
  return rule_;
}

// -------------------------------------------------------------------

// Bucket_Logging

// string log_bucket = 1;
inline void Bucket_Logging::clear_log_bucket() {
  log_bucket_.ClearToEmpty();
}
inline const std::string& Bucket_Logging::log_bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Logging.log_bucket)
  return _internal_log_bucket();
}
inline void Bucket_Logging::set_log_bucket(const std::string& value) {
  _internal_set_log_bucket(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Logging.log_bucket)
}
inline std::string* Bucket_Logging::mutable_log_bucket() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Logging.log_bucket)
  return _internal_mutable_log_bucket();
}
inline const std::string& Bucket_Logging::_internal_log_bucket() const {
  return log_bucket_.Get();
}
inline void Bucket_Logging::_internal_set_log_bucket(const std::string& value) {
  
  log_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Logging::set_log_bucket(std::string&& value) {
  
  log_bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Logging.log_bucket)
}
inline void Bucket_Logging::set_log_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Logging.log_bucket)
}
inline void Bucket_Logging::set_log_bucket(const char* value,
    size_t size) {
  
  log_bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Logging.log_bucket)
}
inline std::string* Bucket_Logging::_internal_mutable_log_bucket() {
  
  return log_bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Logging::release_log_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Logging.log_bucket)
  return log_bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Logging::set_allocated_log_bucket(std::string* log_bucket) {
  if (log_bucket != nullptr) {
    
  } else {
    
  }
  log_bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Logging.log_bucket)
}

// string log_object_prefix = 2;
inline void Bucket_Logging::clear_log_object_prefix() {
  log_object_prefix_.ClearToEmpty();
}
inline const std::string& Bucket_Logging::log_object_prefix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Logging.log_object_prefix)
  return _internal_log_object_prefix();
}
inline void Bucket_Logging::set_log_object_prefix(const std::string& value) {
  _internal_set_log_object_prefix(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Logging.log_object_prefix)
}
inline std::string* Bucket_Logging::mutable_log_object_prefix() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Logging.log_object_prefix)
  return _internal_mutable_log_object_prefix();
}
inline const std::string& Bucket_Logging::_internal_log_object_prefix() const {
  return log_object_prefix_.Get();
}
inline void Bucket_Logging::_internal_set_log_object_prefix(const std::string& value) {
  
  log_object_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Logging::set_log_object_prefix(std::string&& value) {
  
  log_object_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Logging.log_object_prefix)
}
inline void Bucket_Logging::set_log_object_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_object_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Logging.log_object_prefix)
}
inline void Bucket_Logging::set_log_object_prefix(const char* value,
    size_t size) {
  
  log_object_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Logging.log_object_prefix)
}
inline std::string* Bucket_Logging::_internal_mutable_log_object_prefix() {
  
  return log_object_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Logging::release_log_object_prefix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Logging.log_object_prefix)
  return log_object_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Logging::set_allocated_log_object_prefix(std::string* log_object_prefix) {
  if (log_object_prefix != nullptr) {
    
  } else {
    
  }
  log_object_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_object_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Logging.log_object_prefix)
}

// -------------------------------------------------------------------

// Bucket_RetentionPolicy

// .google.protobuf.Timestamp effective_time = 1;
inline bool Bucket_RetentionPolicy::_internal_has_effective_time() const {
  return this != internal_default_instance() && effective_time_ != nullptr;
}
inline bool Bucket_RetentionPolicy::has_effective_time() const {
  return _internal_has_effective_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_RetentionPolicy::_internal_effective_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = effective_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket_RetentionPolicy::effective_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.RetentionPolicy.effective_time)
  return _internal_effective_time();
}
inline void Bucket_RetentionPolicy::unsafe_arena_set_allocated_effective_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* effective_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effective_time_);
  }
  effective_time_ = effective_time;
  if (effective_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.RetentionPolicy.effective_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::release_effective_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = effective_time_;
  effective_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::unsafe_arena_release_effective_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.RetentionPolicy.effective_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = effective_time_;
  effective_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::_internal_mutable_effective_time() {
  
  if (effective_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    effective_time_ = p;
  }
  return effective_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket_RetentionPolicy::mutable_effective_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.RetentionPolicy.effective_time)
  return _internal_mutable_effective_time();
}
inline void Bucket_RetentionPolicy::set_allocated_effective_time(PROTOBUF_NAMESPACE_ID::Timestamp* effective_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(effective_time_);
  }
  if (effective_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effective_time)->GetArena();
    if (message_arena != submessage_arena) {
      effective_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effective_time, submessage_arena);
    }
    
  } else {
    
  }
  effective_time_ = effective_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.RetentionPolicy.effective_time)
}

// bool is_locked = 2;
inline void Bucket_RetentionPolicy::clear_is_locked() {
  is_locked_ = false;
}
inline bool Bucket_RetentionPolicy::_internal_is_locked() const {
  return is_locked_;
}
inline bool Bucket_RetentionPolicy::is_locked() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.RetentionPolicy.is_locked)
  return _internal_is_locked();
}
inline void Bucket_RetentionPolicy::_internal_set_is_locked(bool value) {
  
  is_locked_ = value;
}
inline void Bucket_RetentionPolicy::set_is_locked(bool value) {
  _internal_set_is_locked(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.RetentionPolicy.is_locked)
}

// int64 retention_period = 3;
inline void Bucket_RetentionPolicy::clear_retention_period() {
  retention_period_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Bucket_RetentionPolicy::_internal_retention_period() const {
  return retention_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Bucket_RetentionPolicy::retention_period() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.RetentionPolicy.retention_period)
  return _internal_retention_period();
}
inline void Bucket_RetentionPolicy::_internal_set_retention_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  retention_period_ = value;
}
inline void Bucket_RetentionPolicy::set_retention_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_retention_period(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.RetentionPolicy.retention_period)
}

// -------------------------------------------------------------------

// Bucket_Versioning

// bool enabled = 1;
inline void Bucket_Versioning::clear_enabled() {
  enabled_ = false;
}
inline bool Bucket_Versioning::_internal_enabled() const {
  return enabled_;
}
inline bool Bucket_Versioning::enabled() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Versioning.enabled)
  return _internal_enabled();
}
inline void Bucket_Versioning::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Bucket_Versioning::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Versioning.enabled)
}

// -------------------------------------------------------------------

// Bucket_Website

// string main_page_suffix = 1;
inline void Bucket_Website::clear_main_page_suffix() {
  main_page_suffix_.ClearToEmpty();
}
inline const std::string& Bucket_Website::main_page_suffix() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Website.main_page_suffix)
  return _internal_main_page_suffix();
}
inline void Bucket_Website::set_main_page_suffix(const std::string& value) {
  _internal_set_main_page_suffix(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Website.main_page_suffix)
}
inline std::string* Bucket_Website::mutable_main_page_suffix() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Website.main_page_suffix)
  return _internal_mutable_main_page_suffix();
}
inline const std::string& Bucket_Website::_internal_main_page_suffix() const {
  return main_page_suffix_.Get();
}
inline void Bucket_Website::_internal_set_main_page_suffix(const std::string& value) {
  
  main_page_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Website::set_main_page_suffix(std::string&& value) {
  
  main_page_suffix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Website.main_page_suffix)
}
inline void Bucket_Website::set_main_page_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_page_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Website.main_page_suffix)
}
inline void Bucket_Website::set_main_page_suffix(const char* value,
    size_t size) {
  
  main_page_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Website.main_page_suffix)
}
inline std::string* Bucket_Website::_internal_mutable_main_page_suffix() {
  
  return main_page_suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Website::release_main_page_suffix() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Website.main_page_suffix)
  return main_page_suffix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Website::set_allocated_main_page_suffix(std::string* main_page_suffix) {
  if (main_page_suffix != nullptr) {
    
  } else {
    
  }
  main_page_suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_page_suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Website.main_page_suffix)
}

// string not_found_page = 2;
inline void Bucket_Website::clear_not_found_page() {
  not_found_page_.ClearToEmpty();
}
inline const std::string& Bucket_Website::not_found_page() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.Website.not_found_page)
  return _internal_not_found_page();
}
inline void Bucket_Website::set_not_found_page(const std::string& value) {
  _internal_set_not_found_page(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.Website.not_found_page)
}
inline std::string* Bucket_Website::mutable_not_found_page() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.Website.not_found_page)
  return _internal_mutable_not_found_page();
}
inline const std::string& Bucket_Website::_internal_not_found_page() const {
  return not_found_page_.Get();
}
inline void Bucket_Website::_internal_set_not_found_page(const std::string& value) {
  
  not_found_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket_Website::set_not_found_page(std::string&& value) {
  
  not_found_page_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.Website.not_found_page)
}
inline void Bucket_Website::set_not_found_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  not_found_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.Website.not_found_page)
}
inline void Bucket_Website::set_not_found_page(const char* value,
    size_t size) {
  
  not_found_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.Website.not_found_page)
}
inline std::string* Bucket_Website::_internal_mutable_not_found_page() {
  
  return not_found_page_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket_Website::release_not_found_page() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.Website.not_found_page)
  return not_found_page_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket_Website::set_allocated_not_found_page(std::string* not_found_page) {
  if (not_found_page != nullptr) {
    
  } else {
    
  }
  not_found_page_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), not_found_page,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.Website.not_found_page)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Bucket

// string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void Bucket::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Bucket::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.name)
  return _internal_name();
}
inline void Bucket::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.name)
}
inline std::string* Bucket::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.name)
  return _internal_mutable_name();
}
inline const std::string& Bucket::_internal_name() const {
  return name_.Get();
}
inline void Bucket::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.name)
}
inline void Bucket::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.name)
}
inline void Bucket::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.name)
}
inline std::string* Bucket::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.name)
}

// string bucket_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Bucket::clear_bucket_id() {
  bucket_id_.ClearToEmpty();
}
inline const std::string& Bucket::bucket_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.bucket_id)
  return _internal_bucket_id();
}
inline void Bucket::set_bucket_id(const std::string& value) {
  _internal_set_bucket_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.bucket_id)
}
inline std::string* Bucket::mutable_bucket_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.bucket_id)
  return _internal_mutable_bucket_id();
}
inline const std::string& Bucket::_internal_bucket_id() const {
  return bucket_id_.Get();
}
inline void Bucket::_internal_set_bucket_id(const std::string& value) {
  
  bucket_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket::set_bucket_id(std::string&& value) {
  
  bucket_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.bucket_id)
}
inline void Bucket::set_bucket_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.bucket_id)
}
inline void Bucket::set_bucket_id(const char* value,
    size_t size) {
  
  bucket_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.bucket_id)
}
inline std::string* Bucket::_internal_mutable_bucket_id() {
  
  return bucket_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket::release_bucket_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.bucket_id)
  return bucket_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket::set_allocated_bucket_id(std::string* bucket_id) {
  if (bucket_id != nullptr) {
    
  } else {
    
  }
  bucket_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.bucket_id)
}

// string project = 3 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void Bucket::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& Bucket::project() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.project)
  return _internal_project();
}
inline void Bucket::set_project(const std::string& value) {
  _internal_set_project(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.project)
}
inline std::string* Bucket::mutable_project() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.project)
  return _internal_mutable_project();
}
inline const std::string& Bucket::_internal_project() const {
  return project_.Get();
}
inline void Bucket::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket::set_project(std::string&& value) {
  
  project_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.project)
}
inline void Bucket::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.project)
}
inline void Bucket::set_project(const char* value,
    size_t size) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.project)
}
inline std::string* Bucket::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket::release_project() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.project)
}

// int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Bucket::clear_metageneration() {
  metageneration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Bucket::_internal_metageneration() const {
  return metageneration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Bucket::metageneration() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.metageneration)
  return _internal_metageneration();
}
inline void Bucket::_internal_set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  metageneration_ = value;
}
inline void Bucket::set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_metageneration(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.metageneration)
}

// string location = 5 [(.google.api.field_behavior) = IMMUTABLE];
inline void Bucket::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& Bucket::location() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.location)
  return _internal_location();
}
inline void Bucket::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.location)
}
inline std::string* Bucket::mutable_location() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.location)
  return _internal_mutable_location();
}
inline const std::string& Bucket::_internal_location() const {
  return location_.Get();
}
inline void Bucket::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket::set_location(std::string&& value) {
  
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.location)
}
inline void Bucket::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.location)
}
inline void Bucket::set_location(const char* value,
    size_t size) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.location)
}
inline std::string* Bucket::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket::release_location() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.location)
}

// string location_type = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Bucket::clear_location_type() {
  location_type_.ClearToEmpty();
}
inline const std::string& Bucket::location_type() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.location_type)
  return _internal_location_type();
}
inline void Bucket::set_location_type(const std::string& value) {
  _internal_set_location_type(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.location_type)
}
inline std::string* Bucket::mutable_location_type() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.location_type)
  return _internal_mutable_location_type();
}
inline const std::string& Bucket::_internal_location_type() const {
  return location_type_.Get();
}
inline void Bucket::_internal_set_location_type(const std::string& value) {
  
  location_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket::set_location_type(std::string&& value) {
  
  location_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.location_type)
}
inline void Bucket::set_location_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.location_type)
}
inline void Bucket::set_location_type(const char* value,
    size_t size) {
  
  location_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.location_type)
}
inline std::string* Bucket::_internal_mutable_location_type() {
  
  return location_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket::release_location_type() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.location_type)
  return location_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket::set_allocated_location_type(std::string* location_type) {
  if (location_type != nullptr) {
    
  } else {
    
  }
  location_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.location_type)
}

// string storage_class = 7;
inline void Bucket::clear_storage_class() {
  storage_class_.ClearToEmpty();
}
inline const std::string& Bucket::storage_class() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.storage_class)
  return _internal_storage_class();
}
inline void Bucket::set_storage_class(const std::string& value) {
  _internal_set_storage_class(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.storage_class)
}
inline std::string* Bucket::mutable_storage_class() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.storage_class)
  return _internal_mutable_storage_class();
}
inline const std::string& Bucket::_internal_storage_class() const {
  return storage_class_.Get();
}
inline void Bucket::_internal_set_storage_class(const std::string& value) {
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bucket::set_storage_class(std::string&& value) {
  
  storage_class_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Bucket.storage_class)
}
inline void Bucket::set_storage_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.storage_class)
}
inline void Bucket::set_storage_class(const char* value,
    size_t size) {
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.storage_class)
}
inline std::string* Bucket::_internal_mutable_storage_class() {
  
  return storage_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bucket::release_storage_class() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.storage_class)
  return storage_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bucket::set_allocated_storage_class(std::string* storage_class) {
  if (storage_class != nullptr) {
    
  } else {
    
  }
  storage_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.storage_class)
}

// repeated .google.storage.v2.BucketAccessControl acl = 8;
inline int Bucket::_internal_acl_size() const {
  return acl_.size();
}
inline int Bucket::acl_size() const {
  return _internal_acl_size();
}
inline void Bucket::clear_acl() {
  acl_.Clear();
}
inline ::google::storage::v2::BucketAccessControl* Bucket::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.acl)
  return acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >*
Bucket::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.acl)
  return &acl_;
}
inline const ::google::storage::v2::BucketAccessControl& Bucket::_internal_acl(int index) const {
  return acl_.Get(index);
}
inline const ::google::storage::v2::BucketAccessControl& Bucket::acl(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.acl)
  return _internal_acl(index);
}
inline ::google::storage::v2::BucketAccessControl* Bucket::_internal_add_acl() {
  return acl_.Add();
}
inline ::google::storage::v2::BucketAccessControl* Bucket::add_acl() {
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.acl)
  return _internal_add_acl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::BucketAccessControl >&
Bucket::acl() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.acl)
  return acl_;
}

// repeated .google.storage.v2.ObjectAccessControl default_object_acl = 9;
inline int Bucket::_internal_default_object_acl_size() const {
  return default_object_acl_.size();
}
inline int Bucket::default_object_acl_size() const {
  return _internal_default_object_acl_size();
}
inline void Bucket::clear_default_object_acl() {
  default_object_acl_.Clear();
}
inline ::google::storage::v2::ObjectAccessControl* Bucket::mutable_default_object_acl(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.default_object_acl)
  return default_object_acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
Bucket::mutable_default_object_acl() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.default_object_acl)
  return &default_object_acl_;
}
inline const ::google::storage::v2::ObjectAccessControl& Bucket::_internal_default_object_acl(int index) const {
  return default_object_acl_.Get(index);
}
inline const ::google::storage::v2::ObjectAccessControl& Bucket::default_object_acl(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.default_object_acl)
  return _internal_default_object_acl(index);
}
inline ::google::storage::v2::ObjectAccessControl* Bucket::_internal_add_default_object_acl() {
  return default_object_acl_.Add();
}
inline ::google::storage::v2::ObjectAccessControl* Bucket::add_default_object_acl() {
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.default_object_acl)
  return _internal_add_default_object_acl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
Bucket::default_object_acl() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.default_object_acl)
  return default_object_acl_;
}

// .google.storage.v2.Bucket.Lifecycle lifecycle = 10;
inline bool Bucket::_internal_has_lifecycle() const {
  return this != internal_default_instance() && lifecycle_ != nullptr;
}
inline bool Bucket::has_lifecycle() const {
  return _internal_has_lifecycle();
}
inline void Bucket::clear_lifecycle() {
  if (GetArena() == nullptr && lifecycle_ != nullptr) {
    delete lifecycle_;
  }
  lifecycle_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Lifecycle& Bucket::_internal_lifecycle() const {
  const ::google::storage::v2::Bucket_Lifecycle* p = lifecycle_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Lifecycle&>(
      ::google::storage::v2::_Bucket_Lifecycle_default_instance_);
}
inline const ::google::storage::v2::Bucket_Lifecycle& Bucket::lifecycle() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.lifecycle)
  return _internal_lifecycle();
}
inline void Bucket::unsafe_arena_set_allocated_lifecycle(
    ::google::storage::v2::Bucket_Lifecycle* lifecycle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifecycle_);
  }
  lifecycle_ = lifecycle;
  if (lifecycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.lifecycle)
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::release_lifecycle() {
  
  ::google::storage::v2::Bucket_Lifecycle* temp = lifecycle_;
  lifecycle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::unsafe_arena_release_lifecycle() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.lifecycle)
  
  ::google::storage::v2::Bucket_Lifecycle* temp = lifecycle_;
  lifecycle_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::_internal_mutable_lifecycle() {
  
  if (lifecycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Lifecycle>(GetArena());
    lifecycle_ = p;
  }
  return lifecycle_;
}
inline ::google::storage::v2::Bucket_Lifecycle* Bucket::mutable_lifecycle() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.lifecycle)
  return _internal_mutable_lifecycle();
}
inline void Bucket::set_allocated_lifecycle(::google::storage::v2::Bucket_Lifecycle* lifecycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lifecycle_;
  }
  if (lifecycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lifecycle);
    if (message_arena != submessage_arena) {
      lifecycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifecycle, submessage_arena);
    }
    
  } else {
    
  }
  lifecycle_ = lifecycle;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.lifecycle)
}

// .google.protobuf.Timestamp create_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Bucket::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::create_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.create_time)
  return _internal_create_time();
}
inline void Bucket::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.create_time)
  return _internal_mutable_create_time();
}
inline void Bucket::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.create_time)
}

// repeated .google.storage.v2.Bucket.Cors cors = 12;
inline int Bucket::_internal_cors_size() const {
  return cors_.size();
}
inline int Bucket::cors_size() const {
  return _internal_cors_size();
}
inline void Bucket::clear_cors() {
  cors_.Clear();
}
inline ::google::storage::v2::Bucket_Cors* Bucket::mutable_cors(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.cors)
  return cors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >*
Bucket::mutable_cors() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.cors)
  return &cors_;
}
inline const ::google::storage::v2::Bucket_Cors& Bucket::_internal_cors(int index) const {
  return cors_.Get(index);
}
inline const ::google::storage::v2::Bucket_Cors& Bucket::cors(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.cors)
  return _internal_cors(index);
}
inline ::google::storage::v2::Bucket_Cors* Bucket::_internal_add_cors() {
  return cors_.Add();
}
inline ::google::storage::v2::Bucket_Cors* Bucket::add_cors() {
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.cors)
  return _internal_add_cors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::Bucket_Cors >&
Bucket::cors() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.cors)
  return cors_;
}

// .google.protobuf.Timestamp update_time = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool Bucket::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Bucket::update_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.update_time)
  return _internal_update_time();
}
inline void Bucket::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Bucket::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.update_time)
  return _internal_mutable_update_time();
}
inline void Bucket::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.update_time)
}

// bool default_event_based_hold = 14;
inline void Bucket::clear_default_event_based_hold() {
  default_event_based_hold_ = false;
}
inline bool Bucket::_internal_default_event_based_hold() const {
  return default_event_based_hold_;
}
inline bool Bucket::default_event_based_hold() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.default_event_based_hold)
  return _internal_default_event_based_hold();
}
inline void Bucket::_internal_set_default_event_based_hold(bool value) {
  
  default_event_based_hold_ = value;
}
inline void Bucket::set_default_event_based_hold(bool value) {
  _internal_set_default_event_based_hold(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.default_event_based_hold)
}

// map<string, string> labels = 15;
inline int Bucket::_internal_labels_size() const {
  return labels_.size();
}
inline int Bucket::labels_size() const {
  return _internal_labels_size();
}
inline void Bucket::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Bucket::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Bucket::labels() const {
  // @@protoc_insertion_point(field_map:google.storage.v2.Bucket.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Bucket::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Bucket::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.storage.v2.Bucket.labels)
  return _internal_mutable_labels();
}

// .google.storage.v2.Bucket.Website website = 16;
inline bool Bucket::_internal_has_website() const {
  return this != internal_default_instance() && website_ != nullptr;
}
inline bool Bucket::has_website() const {
  return _internal_has_website();
}
inline void Bucket::clear_website() {
  if (GetArena() == nullptr && website_ != nullptr) {
    delete website_;
  }
  website_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Website& Bucket::_internal_website() const {
  const ::google::storage::v2::Bucket_Website* p = website_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Website&>(
      ::google::storage::v2::_Bucket_Website_default_instance_);
}
inline const ::google::storage::v2::Bucket_Website& Bucket::website() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.website)
  return _internal_website();
}
inline void Bucket::unsafe_arena_set_allocated_website(
    ::google::storage::v2::Bucket_Website* website) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(website_);
  }
  website_ = website;
  if (website) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.website)
}
inline ::google::storage::v2::Bucket_Website* Bucket::release_website() {
  
  ::google::storage::v2::Bucket_Website* temp = website_;
  website_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Website* Bucket::unsafe_arena_release_website() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.website)
  
  ::google::storage::v2::Bucket_Website* temp = website_;
  website_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Website* Bucket::_internal_mutable_website() {
  
  if (website_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Website>(GetArena());
    website_ = p;
  }
  return website_;
}
inline ::google::storage::v2::Bucket_Website* Bucket::mutable_website() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.website)
  return _internal_mutable_website();
}
inline void Bucket::set_allocated_website(::google::storage::v2::Bucket_Website* website) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete website_;
  }
  if (website) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(website);
    if (message_arena != submessage_arena) {
      website = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, website, submessage_arena);
    }
    
  } else {
    
  }
  website_ = website;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.website)
}

// .google.storage.v2.Bucket.Versioning versioning = 17;
inline bool Bucket::_internal_has_versioning() const {
  return this != internal_default_instance() && versioning_ != nullptr;
}
inline bool Bucket::has_versioning() const {
  return _internal_has_versioning();
}
inline void Bucket::clear_versioning() {
  if (GetArena() == nullptr && versioning_ != nullptr) {
    delete versioning_;
  }
  versioning_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Versioning& Bucket::_internal_versioning() const {
  const ::google::storage::v2::Bucket_Versioning* p = versioning_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Versioning&>(
      ::google::storage::v2::_Bucket_Versioning_default_instance_);
}
inline const ::google::storage::v2::Bucket_Versioning& Bucket::versioning() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.versioning)
  return _internal_versioning();
}
inline void Bucket::unsafe_arena_set_allocated_versioning(
    ::google::storage::v2::Bucket_Versioning* versioning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(versioning_);
  }
  versioning_ = versioning;
  if (versioning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.versioning)
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::release_versioning() {
  
  ::google::storage::v2::Bucket_Versioning* temp = versioning_;
  versioning_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::unsafe_arena_release_versioning() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.versioning)
  
  ::google::storage::v2::Bucket_Versioning* temp = versioning_;
  versioning_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::_internal_mutable_versioning() {
  
  if (versioning_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Versioning>(GetArena());
    versioning_ = p;
  }
  return versioning_;
}
inline ::google::storage::v2::Bucket_Versioning* Bucket::mutable_versioning() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.versioning)
  return _internal_mutable_versioning();
}
inline void Bucket::set_allocated_versioning(::google::storage::v2::Bucket_Versioning* versioning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete versioning_;
  }
  if (versioning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(versioning);
    if (message_arena != submessage_arena) {
      versioning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versioning, submessage_arena);
    }
    
  } else {
    
  }
  versioning_ = versioning;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.versioning)
}

// .google.storage.v2.Bucket.Logging logging = 18;
inline bool Bucket::_internal_has_logging() const {
  return this != internal_default_instance() && logging_ != nullptr;
}
inline bool Bucket::has_logging() const {
  return _internal_has_logging();
}
inline void Bucket::clear_logging() {
  if (GetArena() == nullptr && logging_ != nullptr) {
    delete logging_;
  }
  logging_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Logging& Bucket::_internal_logging() const {
  const ::google::storage::v2::Bucket_Logging* p = logging_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Logging&>(
      ::google::storage::v2::_Bucket_Logging_default_instance_);
}
inline const ::google::storage::v2::Bucket_Logging& Bucket::logging() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.logging)
  return _internal_logging();
}
inline void Bucket::unsafe_arena_set_allocated_logging(
    ::google::storage::v2::Bucket_Logging* logging) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logging_);
  }
  logging_ = logging;
  if (logging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.logging)
}
inline ::google::storage::v2::Bucket_Logging* Bucket::release_logging() {
  
  ::google::storage::v2::Bucket_Logging* temp = logging_;
  logging_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Logging* Bucket::unsafe_arena_release_logging() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.logging)
  
  ::google::storage::v2::Bucket_Logging* temp = logging_;
  logging_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Logging* Bucket::_internal_mutable_logging() {
  
  if (logging_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Logging>(GetArena());
    logging_ = p;
  }
  return logging_;
}
inline ::google::storage::v2::Bucket_Logging* Bucket::mutable_logging() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.logging)
  return _internal_mutable_logging();
}
inline void Bucket::set_allocated_logging(::google::storage::v2::Bucket_Logging* logging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logging_;
  }
  if (logging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logging);
    if (message_arena != submessage_arena) {
      logging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging, submessage_arena);
    }
    
  } else {
    
  }
  logging_ = logging;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.logging)
}

// .google.storage.v2.Owner owner = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Bucket::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool Bucket::has_owner() const {
  return _internal_has_owner();
}
inline void Bucket::clear_owner() {
  if (GetArena() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
inline const ::google::storage::v2::Owner& Bucket::_internal_owner() const {
  const ::google::storage::v2::Owner* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Owner&>(
      ::google::storage::v2::_Owner_default_instance_);
}
inline const ::google::storage::v2::Owner& Bucket::owner() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.owner)
  return _internal_owner();
}
inline void Bucket::unsafe_arena_set_allocated_owner(
    ::google::storage::v2::Owner* owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.owner)
}
inline ::google::storage::v2::Owner* Bucket::release_owner() {
  
  ::google::storage::v2::Owner* temp = owner_;
  owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Owner* Bucket::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.owner)
  
  ::google::storage::v2::Owner* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Owner* Bucket::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Owner>(GetArena());
    owner_ = p;
  }
  return owner_;
}
inline ::google::storage::v2::Owner* Bucket::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.owner)
  return _internal_mutable_owner();
}
inline void Bucket::set_allocated_owner(::google::storage::v2::Owner* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.owner)
}

// .google.storage.v2.Bucket.Encryption encryption = 20;
inline bool Bucket::_internal_has_encryption() const {
  return this != internal_default_instance() && encryption_ != nullptr;
}
inline bool Bucket::has_encryption() const {
  return _internal_has_encryption();
}
inline void Bucket::clear_encryption() {
  if (GetArena() == nullptr && encryption_ != nullptr) {
    delete encryption_;
  }
  encryption_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Encryption& Bucket::_internal_encryption() const {
  const ::google::storage::v2::Bucket_Encryption* p = encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Encryption&>(
      ::google::storage::v2::_Bucket_Encryption_default_instance_);
}
inline const ::google::storage::v2::Bucket_Encryption& Bucket::encryption() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.encryption)
  return _internal_encryption();
}
inline void Bucket::unsafe_arena_set_allocated_encryption(
    ::google::storage::v2::Bucket_Encryption* encryption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_);
  }
  encryption_ = encryption;
  if (encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.encryption)
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::release_encryption() {
  
  ::google::storage::v2::Bucket_Encryption* temp = encryption_;
  encryption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::unsafe_arena_release_encryption() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.encryption)
  
  ::google::storage::v2::Bucket_Encryption* temp = encryption_;
  encryption_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::_internal_mutable_encryption() {
  
  if (encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Encryption>(GetArena());
    encryption_ = p;
  }
  return encryption_;
}
inline ::google::storage::v2::Bucket_Encryption* Bucket::mutable_encryption() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.encryption)
  return _internal_mutable_encryption();
}
inline void Bucket::set_allocated_encryption(::google::storage::v2::Bucket_Encryption* encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete encryption_;
  }
  if (encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(encryption);
    if (message_arena != submessage_arena) {
      encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption, submessage_arena);
    }
    
  } else {
    
  }
  encryption_ = encryption;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.encryption)
}

// .google.storage.v2.Bucket.Billing billing = 21;
inline bool Bucket::_internal_has_billing() const {
  return this != internal_default_instance() && billing_ != nullptr;
}
inline bool Bucket::has_billing() const {
  return _internal_has_billing();
}
inline void Bucket::clear_billing() {
  if (GetArena() == nullptr && billing_ != nullptr) {
    delete billing_;
  }
  billing_ = nullptr;
}
inline const ::google::storage::v2::Bucket_Billing& Bucket::_internal_billing() const {
  const ::google::storage::v2::Bucket_Billing* p = billing_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_Billing&>(
      ::google::storage::v2::_Bucket_Billing_default_instance_);
}
inline const ::google::storage::v2::Bucket_Billing& Bucket::billing() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.billing)
  return _internal_billing();
}
inline void Bucket::unsafe_arena_set_allocated_billing(
    ::google::storage::v2::Bucket_Billing* billing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  billing_ = billing;
  if (billing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.billing)
}
inline ::google::storage::v2::Bucket_Billing* Bucket::release_billing() {
  
  ::google::storage::v2::Bucket_Billing* temp = billing_;
  billing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_Billing* Bucket::unsafe_arena_release_billing() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.billing)
  
  ::google::storage::v2::Bucket_Billing* temp = billing_;
  billing_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_Billing* Bucket::_internal_mutable_billing() {
  
  if (billing_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_Billing>(GetArena());
    billing_ = p;
  }
  return billing_;
}
inline ::google::storage::v2::Bucket_Billing* Bucket::mutable_billing() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.billing)
  return _internal_mutable_billing();
}
inline void Bucket::set_allocated_billing(::google::storage::v2::Bucket_Billing* billing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete billing_;
  }
  if (billing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(billing);
    if (message_arena != submessage_arena) {
      billing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing, submessage_arena);
    }
    
  } else {
    
  }
  billing_ = billing;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.billing)
}

// .google.storage.v2.Bucket.RetentionPolicy retention_policy = 22;
inline bool Bucket::_internal_has_retention_policy() const {
  return this != internal_default_instance() && retention_policy_ != nullptr;
}
inline bool Bucket::has_retention_policy() const {
  return _internal_has_retention_policy();
}
inline void Bucket::clear_retention_policy() {
  if (GetArena() == nullptr && retention_policy_ != nullptr) {
    delete retention_policy_;
  }
  retention_policy_ = nullptr;
}
inline const ::google::storage::v2::Bucket_RetentionPolicy& Bucket::_internal_retention_policy() const {
  const ::google::storage::v2::Bucket_RetentionPolicy* p = retention_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_RetentionPolicy&>(
      ::google::storage::v2::_Bucket_RetentionPolicy_default_instance_);
}
inline const ::google::storage::v2::Bucket_RetentionPolicy& Bucket::retention_policy() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.retention_policy)
  return _internal_retention_policy();
}
inline void Bucket::unsafe_arena_set_allocated_retention_policy(
    ::google::storage::v2::Bucket_RetentionPolicy* retention_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retention_policy_);
  }
  retention_policy_ = retention_policy;
  if (retention_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.retention_policy)
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::release_retention_policy() {
  
  ::google::storage::v2::Bucket_RetentionPolicy* temp = retention_policy_;
  retention_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::unsafe_arena_release_retention_policy() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.retention_policy)
  
  ::google::storage::v2::Bucket_RetentionPolicy* temp = retention_policy_;
  retention_policy_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::_internal_mutable_retention_policy() {
  
  if (retention_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_RetentionPolicy>(GetArena());
    retention_policy_ = p;
  }
  return retention_policy_;
}
inline ::google::storage::v2::Bucket_RetentionPolicy* Bucket::mutable_retention_policy() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.retention_policy)
  return _internal_mutable_retention_policy();
}
inline void Bucket::set_allocated_retention_policy(::google::storage::v2::Bucket_RetentionPolicy* retention_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete retention_policy_;
  }
  if (retention_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(retention_policy);
    if (message_arena != submessage_arena) {
      retention_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retention_policy, submessage_arena);
    }
    
  } else {
    
  }
  retention_policy_ = retention_policy;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.retention_policy)
}

// .google.storage.v2.Bucket.IamConfig iam_config = 23;
inline bool Bucket::_internal_has_iam_config() const {
  return this != internal_default_instance() && iam_config_ != nullptr;
}
inline bool Bucket::has_iam_config() const {
  return _internal_has_iam_config();
}
inline void Bucket::clear_iam_config() {
  if (GetArena() == nullptr && iam_config_ != nullptr) {
    delete iam_config_;
  }
  iam_config_ = nullptr;
}
inline const ::google::storage::v2::Bucket_IamConfig& Bucket::_internal_iam_config() const {
  const ::google::storage::v2::Bucket_IamConfig* p = iam_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Bucket_IamConfig&>(
      ::google::storage::v2::_Bucket_IamConfig_default_instance_);
}
inline const ::google::storage::v2::Bucket_IamConfig& Bucket::iam_config() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.iam_config)
  return _internal_iam_config();
}
inline void Bucket::unsafe_arena_set_allocated_iam_config(
    ::google::storage::v2::Bucket_IamConfig* iam_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iam_config_);
  }
  iam_config_ = iam_config;
  if (iam_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Bucket.iam_config)
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::release_iam_config() {
  
  ::google::storage::v2::Bucket_IamConfig* temp = iam_config_;
  iam_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::unsafe_arena_release_iam_config() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Bucket.iam_config)
  
  ::google::storage::v2::Bucket_IamConfig* temp = iam_config_;
  iam_config_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::_internal_mutable_iam_config() {
  
  if (iam_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Bucket_IamConfig>(GetArena());
    iam_config_ = p;
  }
  return iam_config_;
}
inline ::google::storage::v2::Bucket_IamConfig* Bucket::mutable_iam_config() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.iam_config)
  return _internal_mutable_iam_config();
}
inline void Bucket::set_allocated_iam_config(::google::storage::v2::Bucket_IamConfig* iam_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete iam_config_;
  }
  if (iam_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(iam_config);
    if (message_arena != submessage_arena) {
      iam_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iam_config, submessage_arena);
    }
    
  } else {
    
  }
  iam_config_ = iam_config;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Bucket.iam_config)
}

// repeated string zone_affinity = 24 [(.google.api.field_behavior) = IMMUTABLE];
inline int Bucket::_internal_zone_affinity_size() const {
  return zone_affinity_.size();
}
inline int Bucket::zone_affinity_size() const {
  return _internal_zone_affinity_size();
}
inline void Bucket::clear_zone_affinity() {
  zone_affinity_.Clear();
}
inline std::string* Bucket::add_zone_affinity() {
  // @@protoc_insertion_point(field_add_mutable:google.storage.v2.Bucket.zone_affinity)
  return _internal_add_zone_affinity();
}
inline const std::string& Bucket::_internal_zone_affinity(int index) const {
  return zone_affinity_.Get(index);
}
inline const std::string& Bucket::zone_affinity(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.zone_affinity)
  return _internal_zone_affinity(index);
}
inline std::string* Bucket::mutable_zone_affinity(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Bucket.zone_affinity)
  return zone_affinity_.Mutable(index);
}
inline void Bucket::set_zone_affinity(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.zone_affinity)
  zone_affinity_.Mutable(index)->assign(value);
}
inline void Bucket::set_zone_affinity(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.zone_affinity)
  zone_affinity_.Mutable(index)->assign(std::move(value));
}
inline void Bucket::set_zone_affinity(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  zone_affinity_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Bucket.zone_affinity)
}
inline void Bucket::set_zone_affinity(int index, const char* value, size_t size) {
  zone_affinity_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Bucket.zone_affinity)
}
inline std::string* Bucket::_internal_add_zone_affinity() {
  return zone_affinity_.Add();
}
inline void Bucket::add_zone_affinity(const std::string& value) {
  zone_affinity_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.zone_affinity)
}
inline void Bucket::add_zone_affinity(std::string&& value) {
  zone_affinity_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.storage.v2.Bucket.zone_affinity)
}
inline void Bucket::add_zone_affinity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  zone_affinity_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.storage.v2.Bucket.zone_affinity)
}
inline void Bucket::add_zone_affinity(const char* value, size_t size) {
  zone_affinity_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.storage.v2.Bucket.zone_affinity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bucket::zone_affinity() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Bucket.zone_affinity)
  return zone_affinity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bucket::mutable_zone_affinity() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Bucket.zone_affinity)
  return &zone_affinity_;
}

// bool satisfies_pzs = 25;
inline void Bucket::clear_satisfies_pzs() {
  satisfies_pzs_ = false;
}
inline bool Bucket::_internal_satisfies_pzs() const {
  return satisfies_pzs_;
}
inline bool Bucket::satisfies_pzs() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Bucket.satisfies_pzs)
  return _internal_satisfies_pzs();
}
inline void Bucket::_internal_set_satisfies_pzs(bool value) {
  
  satisfies_pzs_ = value;
}
inline void Bucket::set_satisfies_pzs(bool value) {
  _internal_set_satisfies_pzs(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Bucket.satisfies_pzs)
}

// -------------------------------------------------------------------

// BucketAccessControl

// string role = 1;
inline void BucketAccessControl::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::role() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.role)
  return _internal_role();
}
inline void BucketAccessControl::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.role)
}
inline std::string* BucketAccessControl::mutable_role() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.role)
  return _internal_mutable_role();
}
inline const std::string& BucketAccessControl::_internal_role() const {
  return role_.Get();
}
inline void BucketAccessControl::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAccessControl::set_role(std::string&& value) {
  
  role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.BucketAccessControl.role)
}
inline void BucketAccessControl::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.BucketAccessControl.role)
}
inline void BucketAccessControl::set_role(const char* value,
    size_t size) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.BucketAccessControl.role)
}
inline std::string* BucketAccessControl::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAccessControl::release_role() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAccessControl::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.role)
}

// string id = 2;
inline void BucketAccessControl::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.id)
  return _internal_id();
}
inline void BucketAccessControl::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.id)
}
inline std::string* BucketAccessControl::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.id)
  return _internal_mutable_id();
}
inline const std::string& BucketAccessControl::_internal_id() const {
  return id_.Get();
}
inline void BucketAccessControl::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAccessControl::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.BucketAccessControl.id)
}
inline void BucketAccessControl::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.BucketAccessControl.id)
}
inline void BucketAccessControl::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.BucketAccessControl.id)
}
inline std::string* BucketAccessControl::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAccessControl::release_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAccessControl::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.id)
}

// string entity = 3;
inline void BucketAccessControl::clear_entity() {
  entity_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::entity() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.entity)
  return _internal_entity();
}
inline void BucketAccessControl::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.entity)
}
inline std::string* BucketAccessControl::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.entity)
  return _internal_mutable_entity();
}
inline const std::string& BucketAccessControl::_internal_entity() const {
  return entity_.Get();
}
inline void BucketAccessControl::_internal_set_entity(const std::string& value) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAccessControl::set_entity(std::string&& value) {
  
  entity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.BucketAccessControl.entity)
}
inline void BucketAccessControl::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.BucketAccessControl.entity)
}
inline void BucketAccessControl::set_entity(const char* value,
    size_t size) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.BucketAccessControl.entity)
}
inline std::string* BucketAccessControl::_internal_mutable_entity() {
  
  return entity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAccessControl::release_entity() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.entity)
  return entity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAccessControl::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.entity)
}

// string entity_id = 4;
inline void BucketAccessControl::clear_entity_id() {
  entity_id_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::entity_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.entity_id)
  return _internal_entity_id();
}
inline void BucketAccessControl::set_entity_id(const std::string& value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.entity_id)
}
inline std::string* BucketAccessControl::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& BucketAccessControl::_internal_entity_id() const {
  return entity_id_.Get();
}
inline void BucketAccessControl::_internal_set_entity_id(const std::string& value) {
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAccessControl::set_entity_id(std::string&& value) {
  
  entity_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.BucketAccessControl.entity_id)
}
inline void BucketAccessControl::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.BucketAccessControl.entity_id)
}
inline void BucketAccessControl::set_entity_id(const char* value,
    size_t size) {
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.BucketAccessControl.entity_id)
}
inline std::string* BucketAccessControl::_internal_mutable_entity_id() {
  
  return entity_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAccessControl::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.entity_id)
  return entity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAccessControl::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  entity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.entity_id)
}

// string email = 5;
inline void BucketAccessControl::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.email)
  return _internal_email();
}
inline void BucketAccessControl::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.email)
}
inline std::string* BucketAccessControl::mutable_email() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.email)
  return _internal_mutable_email();
}
inline const std::string& BucketAccessControl::_internal_email() const {
  return email_.Get();
}
inline void BucketAccessControl::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAccessControl::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.BucketAccessControl.email)
}
inline void BucketAccessControl::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.BucketAccessControl.email)
}
inline void BucketAccessControl::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.BucketAccessControl.email)
}
inline std::string* BucketAccessControl::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAccessControl::release_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAccessControl::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.email)
}

// string domain = 6;
inline void BucketAccessControl::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& BucketAccessControl::domain() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.domain)
  return _internal_domain();
}
inline void BucketAccessControl::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.BucketAccessControl.domain)
}
inline std::string* BucketAccessControl::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.domain)
  return _internal_mutable_domain();
}
inline const std::string& BucketAccessControl::_internal_domain() const {
  return domain_.Get();
}
inline void BucketAccessControl::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BucketAccessControl::set_domain(std::string&& value) {
  
  domain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.BucketAccessControl.domain)
}
inline void BucketAccessControl::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.BucketAccessControl.domain)
}
inline void BucketAccessControl::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.BucketAccessControl.domain)
}
inline std::string* BucketAccessControl::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BucketAccessControl::release_domain() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BucketAccessControl::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.domain)
}

// .google.storage.v2.ProjectTeam project_team = 7;
inline bool BucketAccessControl::_internal_has_project_team() const {
  return this != internal_default_instance() && project_team_ != nullptr;
}
inline bool BucketAccessControl::has_project_team() const {
  return _internal_has_project_team();
}
inline void BucketAccessControl::clear_project_team() {
  if (GetArena() == nullptr && project_team_ != nullptr) {
    delete project_team_;
  }
  project_team_ = nullptr;
}
inline const ::google::storage::v2::ProjectTeam& BucketAccessControl::_internal_project_team() const {
  const ::google::storage::v2::ProjectTeam* p = project_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ProjectTeam&>(
      ::google::storage::v2::_ProjectTeam_default_instance_);
}
inline const ::google::storage::v2::ProjectTeam& BucketAccessControl::project_team() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.BucketAccessControl.project_team)
  return _internal_project_team();
}
inline void BucketAccessControl::unsafe_arena_set_allocated_project_team(
    ::google::storage::v2::ProjectTeam* project_team) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_team_);
  }
  project_team_ = project_team;
  if (project_team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.BucketAccessControl.project_team)
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::release_project_team() {
  
  ::google::storage::v2::ProjectTeam* temp = project_team_;
  project_team_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::unsafe_arena_release_project_team() {
  // @@protoc_insertion_point(field_release:google.storage.v2.BucketAccessControl.project_team)
  
  ::google::storage::v2::ProjectTeam* temp = project_team_;
  project_team_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::_internal_mutable_project_team() {
  
  if (project_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ProjectTeam>(GetArena());
    project_team_ = p;
  }
  return project_team_;
}
inline ::google::storage::v2::ProjectTeam* BucketAccessControl::mutable_project_team() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.BucketAccessControl.project_team)
  return _internal_mutable_project_team();
}
inline void BucketAccessControl::set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete project_team_;
  }
  if (project_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(project_team);
    if (message_arena != submessage_arena) {
      project_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_team, submessage_arena);
    }
    
  } else {
    
  }
  project_team_ = project_team;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.BucketAccessControl.project_team)
}

// -------------------------------------------------------------------

// ChecksummedData

// bytes content = 1;
inline void ChecksummedData::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ChecksummedData::content() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ChecksummedData.content)
  return _internal_content();
}
inline void ChecksummedData::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ChecksummedData.content)
}
inline std::string* ChecksummedData::mutable_content() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ChecksummedData.content)
  return _internal_mutable_content();
}
inline const std::string& ChecksummedData::_internal_content() const {
  return content_.Get();
}
inline void ChecksummedData::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChecksummedData::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ChecksummedData.content)
}
inline void ChecksummedData::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ChecksummedData.content)
}
inline void ChecksummedData::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ChecksummedData.content)
}
inline std::string* ChecksummedData::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChecksummedData::release_content() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ChecksummedData.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChecksummedData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ChecksummedData.content)
}

// fixed32 crc32c = 2;
inline bool ChecksummedData::_internal_has_crc32c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChecksummedData::has_crc32c() const {
  return _internal_has_crc32c();
}
inline void ChecksummedData::clear_crc32c() {
  crc32c_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChecksummedData::_internal_crc32c() const {
  return crc32c_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChecksummedData::crc32c() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ChecksummedData.crc32c)
  return _internal_crc32c();
}
inline void ChecksummedData::_internal_set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  crc32c_ = value;
}
inline void ChecksummedData::set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc32c(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ChecksummedData.crc32c)
}

// -------------------------------------------------------------------

// ObjectChecksums

// fixed32 crc32c = 1;
inline bool ObjectChecksums::_internal_has_crc32c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectChecksums::has_crc32c() const {
  return _internal_has_crc32c();
}
inline void ObjectChecksums::clear_crc32c() {
  crc32c_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectChecksums::_internal_crc32c() const {
  return crc32c_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectChecksums::crc32c() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectChecksums.crc32c)
  return _internal_crc32c();
}
inline void ObjectChecksums::_internal_set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  crc32c_ = value;
}
inline void ObjectChecksums::set_crc32c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc32c(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectChecksums.crc32c)
}

// bytes md5_hash = 2;
inline void ObjectChecksums::clear_md5_hash() {
  md5_hash_.ClearToEmpty();
}
inline const std::string& ObjectChecksums::md5_hash() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectChecksums.md5_hash)
  return _internal_md5_hash();
}
inline void ObjectChecksums::set_md5_hash(const std::string& value) {
  _internal_set_md5_hash(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectChecksums.md5_hash)
}
inline std::string* ObjectChecksums::mutable_md5_hash() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectChecksums.md5_hash)
  return _internal_mutable_md5_hash();
}
inline const std::string& ObjectChecksums::_internal_md5_hash() const {
  return md5_hash_.Get();
}
inline void ObjectChecksums::_internal_set_md5_hash(const std::string& value) {
  
  md5_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectChecksums::set_md5_hash(std::string&& value) {
  
  md5_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectChecksums.md5_hash)
}
inline void ObjectChecksums::set_md5_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectChecksums.md5_hash)
}
inline void ObjectChecksums::set_md5_hash(const void* value,
    size_t size) {
  
  md5_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectChecksums.md5_hash)
}
inline std::string* ObjectChecksums::_internal_mutable_md5_hash() {
  
  return md5_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectChecksums::release_md5_hash() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectChecksums.md5_hash)
  return md5_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectChecksums::set_allocated_md5_hash(std::string* md5_hash) {
  if (md5_hash != nullptr) {
    
  } else {
    
  }
  md5_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectChecksums.md5_hash)
}

// -------------------------------------------------------------------

// Object_CustomerEncryption

// string encryption_algorithm = 1;
inline void Object_CustomerEncryption::clear_encryption_algorithm() {
  encryption_algorithm_.ClearToEmpty();
}
inline const std::string& Object_CustomerEncryption::encryption_algorithm() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
  return _internal_encryption_algorithm();
}
inline void Object_CustomerEncryption::set_encryption_algorithm(const std::string& value) {
  _internal_set_encryption_algorithm(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
}
inline std::string* Object_CustomerEncryption::mutable_encryption_algorithm() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
  return _internal_mutable_encryption_algorithm();
}
inline const std::string& Object_CustomerEncryption::_internal_encryption_algorithm() const {
  return encryption_algorithm_.Get();
}
inline void Object_CustomerEncryption::_internal_set_encryption_algorithm(const std::string& value) {
  
  encryption_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object_CustomerEncryption::set_encryption_algorithm(std::string&& value) {
  
  encryption_algorithm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
}
inline void Object_CustomerEncryption::set_encryption_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryption_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
}
inline void Object_CustomerEncryption::set_encryption_algorithm(const char* value,
    size_t size) {
  
  encryption_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
}
inline std::string* Object_CustomerEncryption::_internal_mutable_encryption_algorithm() {
  
  return encryption_algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object_CustomerEncryption::release_encryption_algorithm() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
  return encryption_algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object_CustomerEncryption::set_allocated_encryption_algorithm(std::string* encryption_algorithm) {
  if (encryption_algorithm != nullptr) {
    
  } else {
    
  }
  encryption_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.CustomerEncryption.encryption_algorithm)
}

// string key_sha256 = 2;
inline void Object_CustomerEncryption::clear_key_sha256() {
  key_sha256_.ClearToEmpty();
}
inline const std::string& Object_CustomerEncryption::key_sha256() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.CustomerEncryption.key_sha256)
  return _internal_key_sha256();
}
inline void Object_CustomerEncryption::set_key_sha256(const std::string& value) {
  _internal_set_key_sha256(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.CustomerEncryption.key_sha256)
}
inline std::string* Object_CustomerEncryption::mutable_key_sha256() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.CustomerEncryption.key_sha256)
  return _internal_mutable_key_sha256();
}
inline const std::string& Object_CustomerEncryption::_internal_key_sha256() const {
  return key_sha256_.Get();
}
inline void Object_CustomerEncryption::_internal_set_key_sha256(const std::string& value) {
  
  key_sha256_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object_CustomerEncryption::set_key_sha256(std::string&& value) {
  
  key_sha256_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.CustomerEncryption.key_sha256)
}
inline void Object_CustomerEncryption::set_key_sha256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_sha256_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.CustomerEncryption.key_sha256)
}
inline void Object_CustomerEncryption::set_key_sha256(const char* value,
    size_t size) {
  
  key_sha256_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.CustomerEncryption.key_sha256)
}
inline std::string* Object_CustomerEncryption::_internal_mutable_key_sha256() {
  
  return key_sha256_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object_CustomerEncryption::release_key_sha256() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.CustomerEncryption.key_sha256)
  return key_sha256_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object_CustomerEncryption::set_allocated_key_sha256(std::string* key_sha256) {
  if (key_sha256 != nullptr) {
    
  } else {
    
  }
  key_sha256_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_sha256,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.CustomerEncryption.key_sha256)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Object

// string name = 1 [(.google.api.field_behavior) = IMMUTABLE];
inline void Object::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.name)
  return _internal_name();
}
inline void Object::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.name)
}
inline std::string* Object::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.name)
  return _internal_mutable_name();
}
inline const std::string& Object::_internal_name() const {
  return name_.Get();
}
inline void Object::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.name)
}
inline void Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.name)
}
inline void Object::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.name)
}
inline std::string* Object::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.name)
}

// string bucket = 2 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.resource_reference) = {
inline void Object::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& Object::bucket() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.bucket)
  return _internal_bucket();
}
inline void Object::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.bucket)
}
inline std::string* Object::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& Object::_internal_bucket() const {
  return bucket_.Get();
}
inline void Object::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_bucket(std::string&& value) {
  
  bucket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.bucket)
}
inline void Object::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.bucket)
}
inline void Object::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.bucket)
}
inline std::string* Object::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_bucket() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.bucket)
}

// int64 generation = 3 [(.google.api.field_behavior) = IMMUTABLE];
inline void Object::clear_generation() {
  generation_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::generation() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.generation)
  return _internal_generation();
}
inline void Object::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  generation_ = value;
}
inline void Object::set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.generation)
}

// int64 metageneration = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Object::clear_metageneration() {
  metageneration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::_internal_metageneration() const {
  return metageneration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::metageneration() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.metageneration)
  return _internal_metageneration();
}
inline void Object::_internal_set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  metageneration_ = value;
}
inline void Object::set_metageneration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_metageneration(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.metageneration)
}

// string storage_class = 5;
inline void Object::clear_storage_class() {
  storage_class_.ClearToEmpty();
}
inline const std::string& Object::storage_class() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.storage_class)
  return _internal_storage_class();
}
inline void Object::set_storage_class(const std::string& value) {
  _internal_set_storage_class(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.storage_class)
}
inline std::string* Object::mutable_storage_class() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.storage_class)
  return _internal_mutable_storage_class();
}
inline const std::string& Object::_internal_storage_class() const {
  return storage_class_.Get();
}
inline void Object::_internal_set_storage_class(const std::string& value) {
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_storage_class(std::string&& value) {
  
  storage_class_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.storage_class)
}
inline void Object::set_storage_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.storage_class)
}
inline void Object::set_storage_class(const char* value,
    size_t size) {
  
  storage_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.storage_class)
}
inline std::string* Object::_internal_mutable_storage_class() {
  
  return storage_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_storage_class() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.storage_class)
  return storage_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_storage_class(std::string* storage_class) {
  if (storage_class != nullptr) {
    
  } else {
    
  }
  storage_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.storage_class)
}

// int64 size = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Object::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::size() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.size)
  return _internal_size();
}
inline void Object::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Object::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.size)
}

// string content_encoding = 7;
inline void Object::clear_content_encoding() {
  content_encoding_.ClearToEmpty();
}
inline const std::string& Object::content_encoding() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_encoding)
  return _internal_content_encoding();
}
inline void Object::set_content_encoding(const std::string& value) {
  _internal_set_content_encoding(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_encoding)
}
inline std::string* Object::mutable_content_encoding() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_encoding)
  return _internal_mutable_content_encoding();
}
inline const std::string& Object::_internal_content_encoding() const {
  return content_encoding_.Get();
}
inline void Object::_internal_set_content_encoding(const std::string& value) {
  
  content_encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_content_encoding(std::string&& value) {
  
  content_encoding_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.content_encoding)
}
inline void Object::set_content_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.content_encoding)
}
inline void Object::set_content_encoding(const char* value,
    size_t size) {
  
  content_encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.content_encoding)
}
inline std::string* Object::_internal_mutable_content_encoding() {
  
  return content_encoding_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_content_encoding() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_encoding)
  return content_encoding_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_content_encoding(std::string* content_encoding) {
  if (content_encoding != nullptr) {
    
  } else {
    
  }
  content_encoding_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_encoding,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_encoding)
}

// string content_disposition = 8;
inline void Object::clear_content_disposition() {
  content_disposition_.ClearToEmpty();
}
inline const std::string& Object::content_disposition() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_disposition)
  return _internal_content_disposition();
}
inline void Object::set_content_disposition(const std::string& value) {
  _internal_set_content_disposition(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_disposition)
}
inline std::string* Object::mutable_content_disposition() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_disposition)
  return _internal_mutable_content_disposition();
}
inline const std::string& Object::_internal_content_disposition() const {
  return content_disposition_.Get();
}
inline void Object::_internal_set_content_disposition(const std::string& value) {
  
  content_disposition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_content_disposition(std::string&& value) {
  
  content_disposition_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.content_disposition)
}
inline void Object::set_content_disposition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_disposition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.content_disposition)
}
inline void Object::set_content_disposition(const char* value,
    size_t size) {
  
  content_disposition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.content_disposition)
}
inline std::string* Object::_internal_mutable_content_disposition() {
  
  return content_disposition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_content_disposition() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_disposition)
  return content_disposition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_content_disposition(std::string* content_disposition) {
  if (content_disposition != nullptr) {
    
  } else {
    
  }
  content_disposition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_disposition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_disposition)
}

// string cache_control = 9;
inline void Object::clear_cache_control() {
  cache_control_.ClearToEmpty();
}
inline const std::string& Object::cache_control() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.cache_control)
  return _internal_cache_control();
}
inline void Object::set_cache_control(const std::string& value) {
  _internal_set_cache_control(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.cache_control)
}
inline std::string* Object::mutable_cache_control() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.cache_control)
  return _internal_mutable_cache_control();
}
inline const std::string& Object::_internal_cache_control() const {
  return cache_control_.Get();
}
inline void Object::_internal_set_cache_control(const std::string& value) {
  
  cache_control_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_cache_control(std::string&& value) {
  
  cache_control_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.cache_control)
}
inline void Object::set_cache_control(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cache_control_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.cache_control)
}
inline void Object::set_cache_control(const char* value,
    size_t size) {
  
  cache_control_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.cache_control)
}
inline std::string* Object::_internal_mutable_cache_control() {
  
  return cache_control_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_cache_control() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.cache_control)
  return cache_control_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_cache_control(std::string* cache_control) {
  if (cache_control != nullptr) {
    
  } else {
    
  }
  cache_control_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_control,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.cache_control)
}

// repeated .google.storage.v2.ObjectAccessControl acl = 10;
inline int Object::_internal_acl_size() const {
  return acl_.size();
}
inline int Object::acl_size() const {
  return _internal_acl_size();
}
inline void Object::clear_acl() {
  acl_.Clear();
}
inline ::google::storage::v2::ObjectAccessControl* Object::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.acl)
  return acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >*
Object::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:google.storage.v2.Object.acl)
  return &acl_;
}
inline const ::google::storage::v2::ObjectAccessControl& Object::_internal_acl(int index) const {
  return acl_.Get(index);
}
inline const ::google::storage::v2::ObjectAccessControl& Object::acl(int index) const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.acl)
  return _internal_acl(index);
}
inline ::google::storage::v2::ObjectAccessControl* Object::_internal_add_acl() {
  return acl_.Add();
}
inline ::google::storage::v2::ObjectAccessControl* Object::add_acl() {
  // @@protoc_insertion_point(field_add:google.storage.v2.Object.acl)
  return _internal_add_acl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::storage::v2::ObjectAccessControl >&
Object::acl() const {
  // @@protoc_insertion_point(field_list:google.storage.v2.Object.acl)
  return acl_;
}

// string content_language = 11;
inline void Object::clear_content_language() {
  content_language_.ClearToEmpty();
}
inline const std::string& Object::content_language() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_language)
  return _internal_content_language();
}
inline void Object::set_content_language(const std::string& value) {
  _internal_set_content_language(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_language)
}
inline std::string* Object::mutable_content_language() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_language)
  return _internal_mutable_content_language();
}
inline const std::string& Object::_internal_content_language() const {
  return content_language_.Get();
}
inline void Object::_internal_set_content_language(const std::string& value) {
  
  content_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_content_language(std::string&& value) {
  
  content_language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.content_language)
}
inline void Object::set_content_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.content_language)
}
inline void Object::set_content_language(const char* value,
    size_t size) {
  
  content_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.content_language)
}
inline std::string* Object::_internal_mutable_content_language() {
  
  return content_language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_content_language() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_language)
  return content_language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_content_language(std::string* content_language) {
  if (content_language != nullptr) {
    
  } else {
    
  }
  content_language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_language)
}

// .google.protobuf.Timestamp delete_time = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_delete_time() const {
  return this != internal_default_instance() && delete_time_ != nullptr;
}
inline bool Object::has_delete_time() const {
  return _internal_has_delete_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_delete_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::delete_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.delete_time)
  return _internal_delete_time();
}
inline void Object::unsafe_arena_set_allocated_delete_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time_);
  }
  delete_time_ = delete_time;
  if (delete_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.delete_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_delete_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = delete_time_;
  delete_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_delete_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.delete_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = delete_time_;
  delete_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_delete_time() {
  
  if (delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    delete_time_ = p;
  }
  return delete_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_delete_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.delete_time)
  return _internal_mutable_delete_time();
}
inline void Object::set_allocated_delete_time(PROTOBUF_NAMESPACE_ID::Timestamp* delete_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time_);
  }
  if (delete_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_time)->GetArena();
    if (message_arena != submessage_arena) {
      delete_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.delete_time)
}

// string content_type = 13;
inline void Object::clear_content_type() {
  content_type_.ClearToEmpty();
}
inline const std::string& Object::content_type() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.content_type)
  return _internal_content_type();
}
inline void Object::set_content_type(const std::string& value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.content_type)
}
inline std::string* Object::mutable_content_type() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.content_type)
  return _internal_mutable_content_type();
}
inline const std::string& Object::_internal_content_type() const {
  return content_type_.Get();
}
inline void Object::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_content_type(std::string&& value) {
  
  content_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.content_type)
}
inline void Object::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.content_type)
}
inline void Object::set_content_type(const char* value,
    size_t size) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.content_type)
}
inline std::string* Object::_internal_mutable_content_type() {
  
  return content_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_content_type() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.content_type)
  return content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.content_type)
}

// .google.protobuf.Timestamp create_time = 14 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Object::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::create_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.create_time)
  return _internal_create_time();
}
inline void Object::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_create_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.create_time)
  return _internal_mutable_create_time();
}
inline void Object::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.create_time)
}

// int32 component_count = 15 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Object::clear_component_count() {
  component_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_component_count() const {
  return component_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::component_count() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.component_count)
  return _internal_component_count();
}
inline void Object::_internal_set_component_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  component_count_ = value;
}
inline void Object::set_component_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_component_count(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.component_count)
}

// .google.storage.v2.ObjectChecksums checksums = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_checksums() const {
  return this != internal_default_instance() && checksums_ != nullptr;
}
inline bool Object::has_checksums() const {
  return _internal_has_checksums();
}
inline void Object::clear_checksums() {
  if (GetArena() == nullptr && checksums_ != nullptr) {
    delete checksums_;
  }
  checksums_ = nullptr;
}
inline const ::google::storage::v2::ObjectChecksums& Object::_internal_checksums() const {
  const ::google::storage::v2::ObjectChecksums* p = checksums_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ObjectChecksums&>(
      ::google::storage::v2::_ObjectChecksums_default_instance_);
}
inline const ::google::storage::v2::ObjectChecksums& Object::checksums() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.checksums)
  return _internal_checksums();
}
inline void Object::unsafe_arena_set_allocated_checksums(
    ::google::storage::v2::ObjectChecksums* checksums) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checksums_);
  }
  checksums_ = checksums;
  if (checksums) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.checksums)
}
inline ::google::storage::v2::ObjectChecksums* Object::release_checksums() {
  
  ::google::storage::v2::ObjectChecksums* temp = checksums_;
  checksums_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* Object::unsafe_arena_release_checksums() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.checksums)
  
  ::google::storage::v2::ObjectChecksums* temp = checksums_;
  checksums_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ObjectChecksums* Object::_internal_mutable_checksums() {
  
  if (checksums_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ObjectChecksums>(GetArena());
    checksums_ = p;
  }
  return checksums_;
}
inline ::google::storage::v2::ObjectChecksums* Object::mutable_checksums() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.checksums)
  return _internal_mutable_checksums();
}
inline void Object::set_allocated_checksums(::google::storage::v2::ObjectChecksums* checksums) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete checksums_;
  }
  if (checksums) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checksums);
    if (message_arena != submessage_arena) {
      checksums = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checksums, submessage_arena);
    }
    
  } else {
    
  }
  checksums_ = checksums;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.checksums)
}

// .google.protobuf.Timestamp update_time = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool Object::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::update_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.update_time)
  return _internal_update_time();
}
inline void Object::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.update_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_update_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.update_time)
  return _internal_mutable_update_time();
}
inline void Object::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.update_time)
}

// string kms_key = 18 [(.google.api.resource_reference) = {
inline void Object::clear_kms_key() {
  kms_key_.ClearToEmpty();
}
inline const std::string& Object::kms_key() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.kms_key)
  return _internal_kms_key();
}
inline void Object::set_kms_key(const std::string& value) {
  _internal_set_kms_key(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.kms_key)
}
inline std::string* Object::mutable_kms_key() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.kms_key)
  return _internal_mutable_kms_key();
}
inline const std::string& Object::_internal_kms_key() const {
  return kms_key_.Get();
}
inline void Object::_internal_set_kms_key(const std::string& value) {
  
  kms_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_kms_key(std::string&& value) {
  
  kms_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Object.kms_key)
}
inline void Object::set_kms_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kms_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Object.kms_key)
}
inline void Object::set_kms_key(const char* value,
    size_t size) {
  
  kms_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Object.kms_key)
}
inline std::string* Object::_internal_mutable_kms_key() {
  
  return kms_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_kms_key() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.kms_key)
  return kms_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_kms_key(std::string* kms_key) {
  if (kms_key != nullptr) {
    
  } else {
    
  }
  kms_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kms_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.kms_key)
}

// .google.protobuf.Timestamp update_storage_class_time = 19 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_update_storage_class_time() const {
  return this != internal_default_instance() && update_storage_class_time_ != nullptr;
}
inline bool Object::has_update_storage_class_time() const {
  return _internal_has_update_storage_class_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_update_storage_class_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_storage_class_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::update_storage_class_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.update_storage_class_time)
  return _internal_update_storage_class_time();
}
inline void Object::unsafe_arena_set_allocated_update_storage_class_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_storage_class_time_);
  }
  update_storage_class_time_ = update_storage_class_time;
  if (update_storage_class_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.update_storage_class_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_update_storage_class_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_storage_class_time_;
  update_storage_class_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_update_storage_class_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.update_storage_class_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_storage_class_time_;
  update_storage_class_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_update_storage_class_time() {
  
  if (update_storage_class_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    update_storage_class_time_ = p;
  }
  return update_storage_class_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_update_storage_class_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.update_storage_class_time)
  return _internal_mutable_update_storage_class_time();
}
inline void Object::set_allocated_update_storage_class_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_storage_class_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_storage_class_time_);
  }
  if (update_storage_class_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_storage_class_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_storage_class_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_storage_class_time, submessage_arena);
    }
    
  } else {
    
  }
  update_storage_class_time_ = update_storage_class_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.update_storage_class_time)
}

// bool temporary_hold = 20;
inline void Object::clear_temporary_hold() {
  temporary_hold_ = false;
}
inline bool Object::_internal_temporary_hold() const {
  return temporary_hold_;
}
inline bool Object::temporary_hold() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.temporary_hold)
  return _internal_temporary_hold();
}
inline void Object::_internal_set_temporary_hold(bool value) {
  
  temporary_hold_ = value;
}
inline void Object::set_temporary_hold(bool value) {
  _internal_set_temporary_hold(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.temporary_hold)
}

// .google.protobuf.Timestamp retention_expire_time = 21;
inline bool Object::_internal_has_retention_expire_time() const {
  return this != internal_default_instance() && retention_expire_time_ != nullptr;
}
inline bool Object::has_retention_expire_time() const {
  return _internal_has_retention_expire_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_retention_expire_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = retention_expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::retention_expire_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.retention_expire_time)
  return _internal_retention_expire_time();
}
inline void Object::unsafe_arena_set_allocated_retention_expire_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retention_expire_time_);
  }
  retention_expire_time_ = retention_expire_time;
  if (retention_expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.retention_expire_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_retention_expire_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = retention_expire_time_;
  retention_expire_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_retention_expire_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.retention_expire_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = retention_expire_time_;
  retention_expire_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_retention_expire_time() {
  
  if (retention_expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    retention_expire_time_ = p;
  }
  return retention_expire_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_retention_expire_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.retention_expire_time)
  return _internal_mutable_retention_expire_time();
}
inline void Object::set_allocated_retention_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* retention_expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(retention_expire_time_);
  }
  if (retention_expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retention_expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      retention_expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retention_expire_time, submessage_arena);
    }
    
  } else {
    
  }
  retention_expire_time_ = retention_expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.retention_expire_time)
}

// map<string, string> metadata = 22;
inline int Object::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Object::metadata_size() const {
  return _internal_metadata_size();
}
inline void Object::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Object::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Object::metadata() const {
  // @@protoc_insertion_point(field_map:google.storage.v2.Object.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Object::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Object::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.storage.v2.Object.metadata)
  return _internal_mutable_metadata();
}

// bool event_based_hold = 23;
inline bool Object::_internal_has_event_based_hold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Object::has_event_based_hold() const {
  return _internal_has_event_based_hold();
}
inline void Object::clear_event_based_hold() {
  event_based_hold_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Object::_internal_event_based_hold() const {
  return event_based_hold_;
}
inline bool Object::event_based_hold() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.event_based_hold)
  return _internal_event_based_hold();
}
inline void Object::_internal_set_event_based_hold(bool value) {
  _has_bits_[0] |= 0x00000001u;
  event_based_hold_ = value;
}
inline void Object::set_event_based_hold(bool value) {
  _internal_set_event_based_hold(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Object.event_based_hold)
}

// .google.storage.v2.Owner owner = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Object::_internal_has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline bool Object::has_owner() const {
  return _internal_has_owner();
}
inline void Object::clear_owner() {
  if (GetArena() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
inline const ::google::storage::v2::Owner& Object::_internal_owner() const {
  const ::google::storage::v2::Owner* p = owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Owner&>(
      ::google::storage::v2::_Owner_default_instance_);
}
inline const ::google::storage::v2::Owner& Object::owner() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.owner)
  return _internal_owner();
}
inline void Object::unsafe_arena_set_allocated_owner(
    ::google::storage::v2::Owner* owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.owner)
}
inline ::google::storage::v2::Owner* Object::release_owner() {
  
  ::google::storage::v2::Owner* temp = owner_;
  owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Owner* Object::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.owner)
  
  ::google::storage::v2::Owner* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Owner* Object::_internal_mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Owner>(GetArena());
    owner_ = p;
  }
  return owner_;
}
inline ::google::storage::v2::Owner* Object::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.owner)
  return _internal_mutable_owner();
}
inline void Object::set_allocated_owner(::google::storage::v2::Owner* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.owner)
}

// .google.storage.v2.Object.CustomerEncryption customer_encryption = 25;
inline bool Object::_internal_has_customer_encryption() const {
  return this != internal_default_instance() && customer_encryption_ != nullptr;
}
inline bool Object::has_customer_encryption() const {
  return _internal_has_customer_encryption();
}
inline void Object::clear_customer_encryption() {
  if (GetArena() == nullptr && customer_encryption_ != nullptr) {
    delete customer_encryption_;
  }
  customer_encryption_ = nullptr;
}
inline const ::google::storage::v2::Object_CustomerEncryption& Object::_internal_customer_encryption() const {
  const ::google::storage::v2::Object_CustomerEncryption* p = customer_encryption_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::Object_CustomerEncryption&>(
      ::google::storage::v2::_Object_CustomerEncryption_default_instance_);
}
inline const ::google::storage::v2::Object_CustomerEncryption& Object::customer_encryption() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.customer_encryption)
  return _internal_customer_encryption();
}
inline void Object::unsafe_arena_set_allocated_customer_encryption(
    ::google::storage::v2::Object_CustomerEncryption* customer_encryption) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_encryption_);
  }
  customer_encryption_ = customer_encryption;
  if (customer_encryption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.customer_encryption)
}
inline ::google::storage::v2::Object_CustomerEncryption* Object::release_customer_encryption() {
  
  ::google::storage::v2::Object_CustomerEncryption* temp = customer_encryption_;
  customer_encryption_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::Object_CustomerEncryption* Object::unsafe_arena_release_customer_encryption() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.customer_encryption)
  
  ::google::storage::v2::Object_CustomerEncryption* temp = customer_encryption_;
  customer_encryption_ = nullptr;
  return temp;
}
inline ::google::storage::v2::Object_CustomerEncryption* Object::_internal_mutable_customer_encryption() {
  
  if (customer_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::Object_CustomerEncryption>(GetArena());
    customer_encryption_ = p;
  }
  return customer_encryption_;
}
inline ::google::storage::v2::Object_CustomerEncryption* Object::mutable_customer_encryption() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.customer_encryption)
  return _internal_mutable_customer_encryption();
}
inline void Object::set_allocated_customer_encryption(::google::storage::v2::Object_CustomerEncryption* customer_encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete customer_encryption_;
  }
  if (customer_encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(customer_encryption);
    if (message_arena != submessage_arena) {
      customer_encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_encryption, submessage_arena);
    }
    
  } else {
    
  }
  customer_encryption_ = customer_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.customer_encryption)
}

// .google.protobuf.Timestamp custom_time = 26;
inline bool Object::_internal_has_custom_time() const {
  return this != internal_default_instance() && custom_time_ != nullptr;
}
inline bool Object::has_custom_time() const {
  return _internal_has_custom_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::_internal_custom_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = custom_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Object::custom_time() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Object.custom_time)
  return _internal_custom_time();
}
inline void Object::unsafe_arena_set_allocated_custom_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* custom_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time_);
  }
  custom_time_ = custom_time;
  if (custom_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.Object.custom_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::release_custom_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = custom_time_;
  custom_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::unsafe_arena_release_custom_time() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Object.custom_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = custom_time_;
  custom_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::_internal_mutable_custom_time() {
  
  if (custom_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    custom_time_ = p;
  }
  return custom_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Object::mutable_custom_time() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Object.custom_time)
  return _internal_mutable_custom_time();
}
inline void Object::set_allocated_custom_time(PROTOBUF_NAMESPACE_ID::Timestamp* custom_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time_);
  }
  if (custom_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_time)->GetArena();
    if (message_arena != submessage_arena) {
      custom_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_time, submessage_arena);
    }
    
  } else {
    
  }
  custom_time_ = custom_time;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Object.custom_time)
}

// -------------------------------------------------------------------

// ObjectAccessControl

// string role = 1;
inline void ObjectAccessControl::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::role() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.role)
  return _internal_role();
}
inline void ObjectAccessControl::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.role)
}
inline std::string* ObjectAccessControl::mutable_role() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.role)
  return _internal_mutable_role();
}
inline const std::string& ObjectAccessControl::_internal_role() const {
  return role_.Get();
}
inline void ObjectAccessControl::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectAccessControl::set_role(std::string&& value) {
  
  role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectAccessControl.role)
}
inline void ObjectAccessControl::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectAccessControl.role)
}
inline void ObjectAccessControl::set_role(const char* value,
    size_t size) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectAccessControl.role)
}
inline std::string* ObjectAccessControl::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectAccessControl::release_role() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectAccessControl::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.role)
}

// string id = 2;
inline void ObjectAccessControl::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.id)
  return _internal_id();
}
inline void ObjectAccessControl::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.id)
}
inline std::string* ObjectAccessControl::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.id)
  return _internal_mutable_id();
}
inline const std::string& ObjectAccessControl::_internal_id() const {
  return id_.Get();
}
inline void ObjectAccessControl::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectAccessControl::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectAccessControl.id)
}
inline void ObjectAccessControl::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectAccessControl.id)
}
inline void ObjectAccessControl::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectAccessControl.id)
}
inline std::string* ObjectAccessControl::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectAccessControl::release_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectAccessControl::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.id)
}

// string entity = 3;
inline void ObjectAccessControl::clear_entity() {
  entity_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::entity() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.entity)
  return _internal_entity();
}
inline void ObjectAccessControl::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.entity)
}
inline std::string* ObjectAccessControl::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.entity)
  return _internal_mutable_entity();
}
inline const std::string& ObjectAccessControl::_internal_entity() const {
  return entity_.Get();
}
inline void ObjectAccessControl::_internal_set_entity(const std::string& value) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectAccessControl::set_entity(std::string&& value) {
  
  entity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectAccessControl.entity)
}
inline void ObjectAccessControl::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectAccessControl.entity)
}
inline void ObjectAccessControl::set_entity(const char* value,
    size_t size) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectAccessControl.entity)
}
inline std::string* ObjectAccessControl::_internal_mutable_entity() {
  
  return entity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectAccessControl::release_entity() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.entity)
  return entity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectAccessControl::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.entity)
}

// string entity_id = 4;
inline void ObjectAccessControl::clear_entity_id() {
  entity_id_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::entity_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.entity_id)
  return _internal_entity_id();
}
inline void ObjectAccessControl::set_entity_id(const std::string& value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.entity_id)
}
inline std::string* ObjectAccessControl::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& ObjectAccessControl::_internal_entity_id() const {
  return entity_id_.Get();
}
inline void ObjectAccessControl::_internal_set_entity_id(const std::string& value) {
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectAccessControl::set_entity_id(std::string&& value) {
  
  entity_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectAccessControl.entity_id)
}
inline void ObjectAccessControl::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectAccessControl.entity_id)
}
inline void ObjectAccessControl::set_entity_id(const char* value,
    size_t size) {
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectAccessControl.entity_id)
}
inline std::string* ObjectAccessControl::_internal_mutable_entity_id() {
  
  return entity_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectAccessControl::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.entity_id)
  return entity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectAccessControl::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  entity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.entity_id)
}

// string email = 5;
inline void ObjectAccessControl::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::email() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.email)
  return _internal_email();
}
inline void ObjectAccessControl::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.email)
}
inline std::string* ObjectAccessControl::mutable_email() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.email)
  return _internal_mutable_email();
}
inline const std::string& ObjectAccessControl::_internal_email() const {
  return email_.Get();
}
inline void ObjectAccessControl::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectAccessControl::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectAccessControl.email)
}
inline void ObjectAccessControl::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectAccessControl.email)
}
inline void ObjectAccessControl::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectAccessControl.email)
}
inline std::string* ObjectAccessControl::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectAccessControl::release_email() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectAccessControl::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.email)
}

// string domain = 6;
inline void ObjectAccessControl::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& ObjectAccessControl::domain() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.domain)
  return _internal_domain();
}
inline void ObjectAccessControl::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ObjectAccessControl.domain)
}
inline std::string* ObjectAccessControl::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.domain)
  return _internal_mutable_domain();
}
inline const std::string& ObjectAccessControl::_internal_domain() const {
  return domain_.Get();
}
inline void ObjectAccessControl::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObjectAccessControl::set_domain(std::string&& value) {
  
  domain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ObjectAccessControl.domain)
}
inline void ObjectAccessControl::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ObjectAccessControl.domain)
}
inline void ObjectAccessControl::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ObjectAccessControl.domain)
}
inline std::string* ObjectAccessControl::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObjectAccessControl::release_domain() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectAccessControl::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.domain)
}

// .google.storage.v2.ProjectTeam project_team = 7;
inline bool ObjectAccessControl::_internal_has_project_team() const {
  return this != internal_default_instance() && project_team_ != nullptr;
}
inline bool ObjectAccessControl::has_project_team() const {
  return _internal_has_project_team();
}
inline void ObjectAccessControl::clear_project_team() {
  if (GetArena() == nullptr && project_team_ != nullptr) {
    delete project_team_;
  }
  project_team_ = nullptr;
}
inline const ::google::storage::v2::ProjectTeam& ObjectAccessControl::_internal_project_team() const {
  const ::google::storage::v2::ProjectTeam* p = project_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::storage::v2::ProjectTeam&>(
      ::google::storage::v2::_ProjectTeam_default_instance_);
}
inline const ::google::storage::v2::ProjectTeam& ObjectAccessControl::project_team() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ObjectAccessControl.project_team)
  return _internal_project_team();
}
inline void ObjectAccessControl::unsafe_arena_set_allocated_project_team(
    ::google::storage::v2::ProjectTeam* project_team) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_team_);
  }
  project_team_ = project_team;
  if (project_team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.storage.v2.ObjectAccessControl.project_team)
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::release_project_team() {
  
  ::google::storage::v2::ProjectTeam* temp = project_team_;
  project_team_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::unsafe_arena_release_project_team() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ObjectAccessControl.project_team)
  
  ::google::storage::v2::ProjectTeam* temp = project_team_;
  project_team_ = nullptr;
  return temp;
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::_internal_mutable_project_team() {
  
  if (project_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::storage::v2::ProjectTeam>(GetArena());
    project_team_ = p;
  }
  return project_team_;
}
inline ::google::storage::v2::ProjectTeam* ObjectAccessControl::mutable_project_team() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ObjectAccessControl.project_team)
  return _internal_mutable_project_team();
}
inline void ObjectAccessControl::set_allocated_project_team(::google::storage::v2::ProjectTeam* project_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete project_team_;
  }
  if (project_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(project_team);
    if (message_arena != submessage_arena) {
      project_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_team, submessage_arena);
    }
    
  } else {
    
  }
  project_team_ = project_team;
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ObjectAccessControl.project_team)
}

// -------------------------------------------------------------------

// ProjectTeam

// string project_number = 1;
inline void ProjectTeam::clear_project_number() {
  project_number_.ClearToEmpty();
}
inline const std::string& ProjectTeam::project_number() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ProjectTeam.project_number)
  return _internal_project_number();
}
inline void ProjectTeam::set_project_number(const std::string& value) {
  _internal_set_project_number(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ProjectTeam.project_number)
}
inline std::string* ProjectTeam::mutable_project_number() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ProjectTeam.project_number)
  return _internal_mutable_project_number();
}
inline const std::string& ProjectTeam::_internal_project_number() const {
  return project_number_.Get();
}
inline void ProjectTeam::_internal_set_project_number(const std::string& value) {
  
  project_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProjectTeam::set_project_number(std::string&& value) {
  
  project_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ProjectTeam.project_number)
}
inline void ProjectTeam::set_project_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ProjectTeam.project_number)
}
inline void ProjectTeam::set_project_number(const char* value,
    size_t size) {
  
  project_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ProjectTeam.project_number)
}
inline std::string* ProjectTeam::_internal_mutable_project_number() {
  
  return project_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProjectTeam::release_project_number() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ProjectTeam.project_number)
  return project_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjectTeam::set_allocated_project_number(std::string* project_number) {
  if (project_number != nullptr) {
    
  } else {
    
  }
  project_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ProjectTeam.project_number)
}

// string team = 2;
inline void ProjectTeam::clear_team() {
  team_.ClearToEmpty();
}
inline const std::string& ProjectTeam::team() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ProjectTeam.team)
  return _internal_team();
}
inline void ProjectTeam::set_team(const std::string& value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ProjectTeam.team)
}
inline std::string* ProjectTeam::mutable_team() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.ProjectTeam.team)
  return _internal_mutable_team();
}
inline const std::string& ProjectTeam::_internal_team() const {
  return team_.Get();
}
inline void ProjectTeam::_internal_set_team(const std::string& value) {
  
  team_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProjectTeam::set_team(std::string&& value) {
  
  team_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.ProjectTeam.team)
}
inline void ProjectTeam::set_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  team_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.ProjectTeam.team)
}
inline void ProjectTeam::set_team(const char* value,
    size_t size) {
  
  team_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.ProjectTeam.team)
}
inline std::string* ProjectTeam::_internal_mutable_team() {
  
  return team_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProjectTeam::release_team() {
  // @@protoc_insertion_point(field_release:google.storage.v2.ProjectTeam.team)
  return team_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjectTeam::set_allocated_team(std::string* team) {
  if (team != nullptr) {
    
  } else {
    
  }
  team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.ProjectTeam.team)
}

// -------------------------------------------------------------------

// Owner

// string entity = 1;
inline void Owner::clear_entity() {
  entity_.ClearToEmpty();
}
inline const std::string& Owner::entity() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Owner.entity)
  return _internal_entity();
}
inline void Owner::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Owner.entity)
}
inline std::string* Owner::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Owner.entity)
  return _internal_mutable_entity();
}
inline const std::string& Owner::_internal_entity() const {
  return entity_.Get();
}
inline void Owner::_internal_set_entity(const std::string& value) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_entity(std::string&& value) {
  
  entity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Owner.entity)
}
inline void Owner::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Owner.entity)
}
inline void Owner::set_entity(const char* value,
    size_t size) {
  
  entity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Owner.entity)
}
inline std::string* Owner::_internal_mutable_entity() {
  
  return entity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_entity() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Owner.entity)
  return entity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Owner.entity)
}

// string entity_id = 2;
inline void Owner::clear_entity_id() {
  entity_id_.ClearToEmpty();
}
inline const std::string& Owner::entity_id() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.Owner.entity_id)
  return _internal_entity_id();
}
inline void Owner::set_entity_id(const std::string& value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.Owner.entity_id)
}
inline std::string* Owner::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:google.storage.v2.Owner.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& Owner::_internal_entity_id() const {
  return entity_id_.Get();
}
inline void Owner::_internal_set_entity_id(const std::string& value) {
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Owner::set_entity_id(std::string&& value) {
  
  entity_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.storage.v2.Owner.entity_id)
}
inline void Owner::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.storage.v2.Owner.entity_id)
}
inline void Owner::set_entity_id(const char* value,
    size_t size) {
  
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.storage.v2.Owner.entity_id)
}
inline std::string* Owner::_internal_mutable_entity_id() {
  
  return entity_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Owner::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.storage.v2.Owner.entity_id)
  return entity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Owner::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  entity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.storage.v2.Owner.entity_id)
}

// -------------------------------------------------------------------

// ContentRange

// int64 start = 1;
inline void ContentRange::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentRange::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentRange::start() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ContentRange.start)
  return _internal_start();
}
inline void ContentRange::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
}
inline void ContentRange::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ContentRange.start)
}

// int64 end = 2;
inline void ContentRange::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentRange::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentRange::end() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ContentRange.end)
  return _internal_end();
}
inline void ContentRange::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
}
inline void ContentRange::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ContentRange.end)
}

// int64 complete_length = 3;
inline void ContentRange::clear_complete_length() {
  complete_length_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentRange::_internal_complete_length() const {
  return complete_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentRange::complete_length() const {
  // @@protoc_insertion_point(field_get:google.storage.v2.ContentRange.complete_length)
  return _internal_complete_length();
}
inline void ContentRange::_internal_set_complete_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  complete_length_ = value;
}
inline void ContentRange::set_complete_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_complete_length(value);
  // @@protoc_insertion_point(field_set:google.storage.v2.ContentRange.complete_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace storage
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::storage::v2::ServiceConstants_Values> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::storage::v2::ServiceConstants_Values>() {
  return ::google::storage::v2::ServiceConstants_Values_descriptor();
}
template <> struct is_proto_enum< ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention>() {
  return ::google::storage::v2::Bucket_IamConfig_PublicAccessPrevention_descriptor();
}
template <> struct is_proto_enum< ::google::storage::v2::PredefinedObjectAcl> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::storage::v2::PredefinedObjectAcl>() {
  return ::google::storage::v2::PredefinedObjectAcl_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fstorage_2fv2_2fstorage_2eproto
